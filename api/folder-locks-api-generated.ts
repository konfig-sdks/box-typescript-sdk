/* tslint:disable */
/* eslint-disable */
/*
Box Platform API

[Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.

The version of the OpenAPI document: 2.0.0
Contact: devrel@box.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ClientError } from '../models';
// @ts-ignore
import { FolderLock } from '../models';
// @ts-ignore
import { FolderLocks } from '../models';
// @ts-ignore
import { FolderLocksCreateRequest } from '../models';
// @ts-ignore
import { FolderLocksCreateRequestFolder } from '../models';
// @ts-ignore
import { FolderLocksCreateRequestLockedOperations } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * FolderLocksApi - axios parameter creator
 * @export
 */
export const FolderLocksApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a folder lock on a folder, preventing it from being moved and/or deleted.  You must be authenticated as the owner or co-owner of the folder to use this endpoint.
         * @summary Create folder lock
         * @param {FolderLocksCreateRequest} [folderLocksCreateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create: async (folderLocksCreateRequest?: FolderLocksCreateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/folder_locks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2Security required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Security", [], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: folderLocksCreateRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/folder_locks',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(folderLocksCreateRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a folder lock on a given folder.  You must be authenticated as the owner or co-owner of the folder to use this endpoint.
         * @summary Delete folder lock
         * @param {string} folderLockId The ID of the folder lock.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFolderLock: async (folderLockId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'folderLockId' is not null or undefined
            assertParamExists('deleteFolderLock', 'folderLockId', folderLockId)
            const localVarPath = `/folder_locks/{folder_lock_id}`
                .replace(`{${"folder_lock_id"}}`, encodeURIComponent(String(folderLockId !== undefined ? folderLockId : `-folder_lock_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2Security required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Security", [], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/folder_locks/{folder_lock_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves folder lock details for a given folder.  You must be authenticated as the owner or co-owner of the folder to use this endpoint.
         * @summary List folder locks
         * @param {string} folderId The unique identifier that represent a folder.  The ID for any folder can be determined by visiting this folder in the web application and copying the ID from the URL. For example, for the URL &#x60;https://_*.app.box.com/folder/123&#x60; the &#x60;folder_id&#x60; is &#x60;123&#x60;.  The root folder of a Box account is always represented by the ID &#x60;0&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDetails: async (folderId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'folderId' is not null or undefined
            assertParamExists('listDetails', 'folderId', folderId)
            const localVarPath = `/folder_locks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2Security required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Security", [], configuration)
            if (folderId !== undefined) {
                localVarQueryParameter['folder_id'] = folderId;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/folder_locks',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FolderLocksApi - functional programming interface
 * @export
 */
export const FolderLocksApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FolderLocksApiAxiosParamCreator(configuration)
    return {
        /**
         * Creates a folder lock on a folder, preventing it from being moved and/or deleted.  You must be authenticated as the owner or co-owner of the folder to use this endpoint.
         * @summary Create folder lock
         * @param {FolderLocksApiCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async create(requestParameters: FolderLocksApiCreateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FolderLock>> {
            const folderLocksCreateRequest: FolderLocksCreateRequest = {
                locked_operations: requestParameters.locked_operations,
                folder: requestParameters.folder
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.create(folderLocksCreateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Deletes a folder lock on a given folder.  You must be authenticated as the owner or co-owner of the folder to use this endpoint.
         * @summary Delete folder lock
         * @param {FolderLocksApiDeleteFolderLockRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteFolderLock(requestParameters: FolderLocksApiDeleteFolderLockRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteFolderLock(requestParameters.folderLockId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves folder lock details for a given folder.  You must be authenticated as the owner or co-owner of the folder to use this endpoint.
         * @summary List folder locks
         * @param {FolderLocksApiListDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listDetails(requestParameters: FolderLocksApiListDetailsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FolderLocks>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listDetails(requestParameters.folderId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * FolderLocksApi - factory interface
 * @export
 */
export const FolderLocksApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FolderLocksApiFp(configuration)
    return {
        /**
         * Creates a folder lock on a folder, preventing it from being moved and/or deleted.  You must be authenticated as the owner or co-owner of the folder to use this endpoint.
         * @summary Create folder lock
         * @param {FolderLocksApiCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(requestParameters: FolderLocksApiCreateRequest, options?: AxiosRequestConfig): AxiosPromise<FolderLock> {
            return localVarFp.create(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes a folder lock on a given folder.  You must be authenticated as the owner or co-owner of the folder to use this endpoint.
         * @summary Delete folder lock
         * @param {FolderLocksApiDeleteFolderLockRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFolderLock(requestParameters: FolderLocksApiDeleteFolderLockRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteFolderLock(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves folder lock details for a given folder.  You must be authenticated as the owner or co-owner of the folder to use this endpoint.
         * @summary List folder locks
         * @param {FolderLocksApiListDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDetails(requestParameters: FolderLocksApiListDetailsRequest, options?: AxiosRequestConfig): AxiosPromise<FolderLocks> {
            return localVarFp.listDetails(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for create operation in FolderLocksApi.
 * @export
 * @interface FolderLocksApiCreateRequest
 */
export type FolderLocksApiCreateRequest = {
    
} & FolderLocksCreateRequest

/**
 * Request parameters for deleteFolderLock operation in FolderLocksApi.
 * @export
 * @interface FolderLocksApiDeleteFolderLockRequest
 */
export type FolderLocksApiDeleteFolderLockRequest = {
    
    /**
    * The ID of the folder lock.
    * @type {string}
    * @memberof FolderLocksApiDeleteFolderLock
    */
    readonly folderLockId: string
    
}

/**
 * Request parameters for listDetails operation in FolderLocksApi.
 * @export
 * @interface FolderLocksApiListDetailsRequest
 */
export type FolderLocksApiListDetailsRequest = {
    
    /**
    * The unique identifier that represent a folder.  The ID for any folder can be determined by visiting this folder in the web application and copying the ID from the URL. For example, for the URL `https://_*.app.box.com/folder/123` the `folder_id` is `123`.  The root folder of a Box account is always represented by the ID `0`.
    * @type {string}
    * @memberof FolderLocksApiListDetails
    */
    readonly folderId: string
    
}

/**
 * FolderLocksApiGenerated - object-oriented interface
 * @export
 * @class FolderLocksApiGenerated
 * @extends {BaseAPI}
 */
export class FolderLocksApiGenerated extends BaseAPI {
    /**
     * Creates a folder lock on a folder, preventing it from being moved and/or deleted.  You must be authenticated as the owner or co-owner of the folder to use this endpoint.
     * @summary Create folder lock
     * @param {FolderLocksApiCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FolderLocksApiGenerated
     */
    public create(requestParameters: FolderLocksApiCreateRequest, options?: AxiosRequestConfig) {
        return FolderLocksApiFp(this.configuration).create(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes a folder lock on a given folder.  You must be authenticated as the owner or co-owner of the folder to use this endpoint.
     * @summary Delete folder lock
     * @param {FolderLocksApiDeleteFolderLockRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FolderLocksApiGenerated
     */
    public deleteFolderLock(requestParameters: FolderLocksApiDeleteFolderLockRequest, options?: AxiosRequestConfig) {
        return FolderLocksApiFp(this.configuration).deleteFolderLock(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves folder lock details for a given folder.  You must be authenticated as the owner or co-owner of the folder to use this endpoint.
     * @summary List folder locks
     * @param {FolderLocksApiListDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FolderLocksApiGenerated
     */
    public listDetails(requestParameters: FolderLocksApiListDetailsRequest, options?: AxiosRequestConfig) {
        return FolderLocksApiFp(this.configuration).listDetails(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
