/* tslint:disable */
/* eslint-disable */
/*
Box Platform API

[Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.

The version of the OpenAPI document: 2.0.0
Contact: devrel@box.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ClientError } from '../models';
// @ts-ignore
import { FileFull } from '../models';
// @ts-ignore
import { SharedLinksFilesAddSharedLinkToFileRequest } from '../models';
// @ts-ignore
import { SharedLinksFilesAddSharedLinkToFileRequestSharedLink } from '../models';
// @ts-ignore
import { SharedLinksFilesRemoveSharedLinkRequest } from '../models';
// @ts-ignore
import { SharedLinksFilesUpdateLinkOnFileRequest } from '../models';
// @ts-ignore
import { SharedLinksFilesUpdateLinkOnFileRequestSharedLink } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * SharedLinksFilesApi - axios parameter creator
 * @export
 */
export const SharedLinksFilesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Adds a shared link to a file.
         * @summary Add shared link to file
         * @param {string} fileId The unique identifier that represents a file.  The ID for any file can be determined by visiting a file in the web application and copying the ID from the URL. For example, for the URL &#x60;https://_*.app.box.com/files/123&#x60; the &#x60;file_id&#x60; is &#x60;123&#x60;.
         * @param {string} fields Explicitly request the &#x60;shared_link&#x60; fields to be returned for this item.
         * @param {SharedLinksFilesAddSharedLinkToFileRequest} [sharedLinksFilesAddSharedLinkToFileRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addSharedLinkToFile: async (fileId: string, fields: string, sharedLinksFilesAddSharedLinkToFileRequest?: SharedLinksFilesAddSharedLinkToFileRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fileId' is not null or undefined
            assertParamExists('addSharedLinkToFile', 'fileId', fileId)
            // verify required parameter 'fields' is not null or undefined
            assertParamExists('addSharedLinkToFile', 'fields', fields)
            const localVarPath = `/files/{file_id}#add_shared_link`
                .replace(`{${"file_id"}}`, encodeURIComponent(String(fileId !== undefined ? fileId : `-file_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2Security required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Security", [], configuration)
            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: sharedLinksFilesAddSharedLinkToFileRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/files/{file_id}#add_shared_link',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(sharedLinksFilesAddSharedLinkToFileRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the file represented by a shared link.  A shared file can be represented by a shared link, which can originate within the current enterprise or within another.  This endpoint allows an application to retrieve information about a shared file when only given a shared link.  The `shared_link_permission_options` array field can be returned by requesting it in the `fields` query parameter.
         * @summary Find file for shared link
         * @param {string} boxapi A header containing the shared link and optional password for the shared link.  The format for this header is as follows.  &#x60;shared_link&#x3D;[link]&amp;shared_link_password&#x3D;[password]&#x60;
         * @param {string} [ifNoneMatch] Ensures an item is only returned if it has changed.  Pass in the item\&#39;s last observed &#x60;etag&#x60; value into this header and the endpoint will fail with a &#x60;304 Not Modified&#x60; if the item has not changed since.
         * @param {Array<string>} [fields] A comma-separated list of attributes to include in the response. This can be used to request fields that are not normally returned in a standard response.  Be aware that specifying this parameter will have the effect that none of the standard fields are returned in the response unless explicitly specified, instead only fields for the mini representation are returned, additional to the fields requested.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBySharedLink: async (boxapi: string, ifNoneMatch?: string, fields?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'boxapi' is not null or undefined
            assertParamExists('getBySharedLink', 'boxapi', boxapi)
            const localVarPath = `/shared_items`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2Security required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Security", [], configuration)
            if (fields) {
                localVarQueryParameter['fields'] = fields.join(COLLECTION_FORMATS.csv);
            }

            if (ifNoneMatch != null) {
                localVarHeaderParameter['if-none-match'] = String(ifNoneMatch);
            }

            if (boxapi != null) {
                localVarHeaderParameter['boxapi'] = String(boxapi);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/shared_items',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets the information for a shared link on a file.
         * @summary Get shared link for file
         * @param {string} fileId The unique identifier that represents a file.  The ID for any file can be determined by visiting a file in the web application and copying the ID from the URL. For example, for the URL &#x60;https://_*.app.box.com/files/123&#x60; the &#x60;file_id&#x60; is &#x60;123&#x60;.
         * @param {string} fields Explicitly request the &#x60;shared_link&#x60; fields to be returned for this item.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSharedLinkInfo: async (fileId: string, fields: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fileId' is not null or undefined
            assertParamExists('getSharedLinkInfo', 'fileId', fileId)
            // verify required parameter 'fields' is not null or undefined
            assertParamExists('getSharedLinkInfo', 'fields', fields)
            const localVarPath = `/files/{file_id}#get_shared_link`
                .replace(`{${"file_id"}}`, encodeURIComponent(String(fileId !== undefined ? fileId : `-file_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2Security required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Security", [], configuration)
            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/files/{file_id}#get_shared_link',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Removes a shared link from a file.
         * @summary Remove shared link from file
         * @param {string} fileId The unique identifier that represents a file.  The ID for any file can be determined by visiting a file in the web application and copying the ID from the URL. For example, for the URL &#x60;https://_*.app.box.com/files/123&#x60; the &#x60;file_id&#x60; is &#x60;123&#x60;.
         * @param {string} fields Explicitly request the &#x60;shared_link&#x60; fields to be returned for this item.
         * @param {SharedLinksFilesRemoveSharedLinkRequest} [sharedLinksFilesRemoveSharedLinkRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeSharedLink: async (fileId: string, fields: string, sharedLinksFilesRemoveSharedLinkRequest?: SharedLinksFilesRemoveSharedLinkRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fileId' is not null or undefined
            assertParamExists('removeSharedLink', 'fileId', fileId)
            // verify required parameter 'fields' is not null or undefined
            assertParamExists('removeSharedLink', 'fields', fields)
            const localVarPath = `/files/{file_id}#remove_shared_link`
                .replace(`{${"file_id"}}`, encodeURIComponent(String(fileId !== undefined ? fileId : `-file_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2Security required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Security", [], configuration)
            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: sharedLinksFilesRemoveSharedLinkRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/files/{file_id}#remove_shared_link',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(sharedLinksFilesRemoveSharedLinkRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates a shared link on a file.
         * @summary Update shared link on file
         * @param {string} fileId The unique identifier that represents a file.  The ID for any file can be determined by visiting a file in the web application and copying the ID from the URL. For example, for the URL &#x60;https://_*.app.box.com/files/123&#x60; the &#x60;file_id&#x60; is &#x60;123&#x60;.
         * @param {string} fields Explicitly request the &#x60;shared_link&#x60; fields to be returned for this item.
         * @param {SharedLinksFilesUpdateLinkOnFileRequest} [sharedLinksFilesUpdateLinkOnFileRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLinkOnFile: async (fileId: string, fields: string, sharedLinksFilesUpdateLinkOnFileRequest?: SharedLinksFilesUpdateLinkOnFileRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fileId' is not null or undefined
            assertParamExists('updateLinkOnFile', 'fileId', fileId)
            // verify required parameter 'fields' is not null or undefined
            assertParamExists('updateLinkOnFile', 'fields', fields)
            const localVarPath = `/files/{file_id}#update_shared_link`
                .replace(`{${"file_id"}}`, encodeURIComponent(String(fileId !== undefined ? fileId : `-file_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2Security required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Security", [], configuration)
            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: sharedLinksFilesUpdateLinkOnFileRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/files/{file_id}#update_shared_link',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(sharedLinksFilesUpdateLinkOnFileRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SharedLinksFilesApi - functional programming interface
 * @export
 */
export const SharedLinksFilesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SharedLinksFilesApiAxiosParamCreator(configuration)
    return {
        /**
         * Adds a shared link to a file.
         * @summary Add shared link to file
         * @param {SharedLinksFilesApiAddSharedLinkToFileRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addSharedLinkToFile(requestParameters: SharedLinksFilesApiAddSharedLinkToFileRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FileFull>> {
            const sharedLinksFilesAddSharedLinkToFileRequest: SharedLinksFilesAddSharedLinkToFileRequest = {
                shared_link: requestParameters.shared_link
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addSharedLinkToFile(requestParameters.fileId, requestParameters.fields, sharedLinksFilesAddSharedLinkToFileRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns the file represented by a shared link.  A shared file can be represented by a shared link, which can originate within the current enterprise or within another.  This endpoint allows an application to retrieve information about a shared file when only given a shared link.  The `shared_link_permission_options` array field can be returned by requesting it in the `fields` query parameter.
         * @summary Find file for shared link
         * @param {SharedLinksFilesApiGetBySharedLinkRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBySharedLink(requestParameters: SharedLinksFilesApiGetBySharedLinkRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FileFull>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBySharedLink(requestParameters.boxapi, requestParameters.ifNoneMatch, requestParameters.fields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Gets the information for a shared link on a file.
         * @summary Get shared link for file
         * @param {SharedLinksFilesApiGetSharedLinkInfoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSharedLinkInfo(requestParameters: SharedLinksFilesApiGetSharedLinkInfoRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FileFull>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSharedLinkInfo(requestParameters.fileId, requestParameters.fields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Removes a shared link from a file.
         * @summary Remove shared link from file
         * @param {SharedLinksFilesApiRemoveSharedLinkRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeSharedLink(requestParameters: SharedLinksFilesApiRemoveSharedLinkRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FileFull>> {
            const sharedLinksFilesRemoveSharedLinkRequest: SharedLinksFilesRemoveSharedLinkRequest = {
                shared_link: requestParameters.shared_link
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeSharedLink(requestParameters.fileId, requestParameters.fields, sharedLinksFilesRemoveSharedLinkRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates a shared link on a file.
         * @summary Update shared link on file
         * @param {SharedLinksFilesApiUpdateLinkOnFileRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateLinkOnFile(requestParameters: SharedLinksFilesApiUpdateLinkOnFileRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FileFull>> {
            const sharedLinksFilesUpdateLinkOnFileRequest: SharedLinksFilesUpdateLinkOnFileRequest = {
                shared_link: requestParameters.shared_link
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateLinkOnFile(requestParameters.fileId, requestParameters.fields, sharedLinksFilesUpdateLinkOnFileRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SharedLinksFilesApi - factory interface
 * @export
 */
export const SharedLinksFilesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SharedLinksFilesApiFp(configuration)
    return {
        /**
         * Adds a shared link to a file.
         * @summary Add shared link to file
         * @param {SharedLinksFilesApiAddSharedLinkToFileRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addSharedLinkToFile(requestParameters: SharedLinksFilesApiAddSharedLinkToFileRequest, options?: AxiosRequestConfig): AxiosPromise<FileFull> {
            return localVarFp.addSharedLinkToFile(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the file represented by a shared link.  A shared file can be represented by a shared link, which can originate within the current enterprise or within another.  This endpoint allows an application to retrieve information about a shared file when only given a shared link.  The `shared_link_permission_options` array field can be returned by requesting it in the `fields` query parameter.
         * @summary Find file for shared link
         * @param {SharedLinksFilesApiGetBySharedLinkRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBySharedLink(requestParameters: SharedLinksFilesApiGetBySharedLinkRequest, options?: AxiosRequestConfig): AxiosPromise<FileFull> {
            return localVarFp.getBySharedLink(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets the information for a shared link on a file.
         * @summary Get shared link for file
         * @param {SharedLinksFilesApiGetSharedLinkInfoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSharedLinkInfo(requestParameters: SharedLinksFilesApiGetSharedLinkInfoRequest, options?: AxiosRequestConfig): AxiosPromise<FileFull> {
            return localVarFp.getSharedLinkInfo(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Removes a shared link from a file.
         * @summary Remove shared link from file
         * @param {SharedLinksFilesApiRemoveSharedLinkRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeSharedLink(requestParameters: SharedLinksFilesApiRemoveSharedLinkRequest, options?: AxiosRequestConfig): AxiosPromise<FileFull> {
            return localVarFp.removeSharedLink(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates a shared link on a file.
         * @summary Update shared link on file
         * @param {SharedLinksFilesApiUpdateLinkOnFileRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLinkOnFile(requestParameters: SharedLinksFilesApiUpdateLinkOnFileRequest, options?: AxiosRequestConfig): AxiosPromise<FileFull> {
            return localVarFp.updateLinkOnFile(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addSharedLinkToFile operation in SharedLinksFilesApi.
 * @export
 * @interface SharedLinksFilesApiAddSharedLinkToFileRequest
 */
export type SharedLinksFilesApiAddSharedLinkToFileRequest = {
    
    /**
    * The unique identifier that represents a file.  The ID for any file can be determined by visiting a file in the web application and copying the ID from the URL. For example, for the URL `https://_*.app.box.com/files/123` the `file_id` is `123`.
    * @type {string}
    * @memberof SharedLinksFilesApiAddSharedLinkToFile
    */
    readonly fileId: string
    
    /**
    * Explicitly request the `shared_link` fields to be returned for this item.
    * @type {string}
    * @memberof SharedLinksFilesApiAddSharedLinkToFile
    */
    readonly fields: string
    
} & SharedLinksFilesAddSharedLinkToFileRequest

/**
 * Request parameters for getBySharedLink operation in SharedLinksFilesApi.
 * @export
 * @interface SharedLinksFilesApiGetBySharedLinkRequest
 */
export type SharedLinksFilesApiGetBySharedLinkRequest = {
    
    /**
    * A header containing the shared link and optional password for the shared link.  The format for this header is as follows.  `shared_link=[link]&shared_link_password=[password]`
    * @type {string}
    * @memberof SharedLinksFilesApiGetBySharedLink
    */
    readonly boxapi: string
    
    /**
    * Ensures an item is only returned if it has changed.  Pass in the item\'s last observed `etag` value into this header and the endpoint will fail with a `304 Not Modified` if the item has not changed since.
    * @type {string}
    * @memberof SharedLinksFilesApiGetBySharedLink
    */
    readonly ifNoneMatch?: string
    
    /**
    * A comma-separated list of attributes to include in the response. This can be used to request fields that are not normally returned in a standard response.  Be aware that specifying this parameter will have the effect that none of the standard fields are returned in the response unless explicitly specified, instead only fields for the mini representation are returned, additional to the fields requested.
    * @type {Array<string>}
    * @memberof SharedLinksFilesApiGetBySharedLink
    */
    readonly fields?: Array<string>
    
}

/**
 * Request parameters for getSharedLinkInfo operation in SharedLinksFilesApi.
 * @export
 * @interface SharedLinksFilesApiGetSharedLinkInfoRequest
 */
export type SharedLinksFilesApiGetSharedLinkInfoRequest = {
    
    /**
    * The unique identifier that represents a file.  The ID for any file can be determined by visiting a file in the web application and copying the ID from the URL. For example, for the URL `https://_*.app.box.com/files/123` the `file_id` is `123`.
    * @type {string}
    * @memberof SharedLinksFilesApiGetSharedLinkInfo
    */
    readonly fileId: string
    
    /**
    * Explicitly request the `shared_link` fields to be returned for this item.
    * @type {string}
    * @memberof SharedLinksFilesApiGetSharedLinkInfo
    */
    readonly fields: string
    
}

/**
 * Request parameters for removeSharedLink operation in SharedLinksFilesApi.
 * @export
 * @interface SharedLinksFilesApiRemoveSharedLinkRequest
 */
export type SharedLinksFilesApiRemoveSharedLinkRequest = {
    
    /**
    * The unique identifier that represents a file.  The ID for any file can be determined by visiting a file in the web application and copying the ID from the URL. For example, for the URL `https://_*.app.box.com/files/123` the `file_id` is `123`.
    * @type {string}
    * @memberof SharedLinksFilesApiRemoveSharedLink
    */
    readonly fileId: string
    
    /**
    * Explicitly request the `shared_link` fields to be returned for this item.
    * @type {string}
    * @memberof SharedLinksFilesApiRemoveSharedLink
    */
    readonly fields: string
    
} & SharedLinksFilesRemoveSharedLinkRequest

/**
 * Request parameters for updateLinkOnFile operation in SharedLinksFilesApi.
 * @export
 * @interface SharedLinksFilesApiUpdateLinkOnFileRequest
 */
export type SharedLinksFilesApiUpdateLinkOnFileRequest = {
    
    /**
    * The unique identifier that represents a file.  The ID for any file can be determined by visiting a file in the web application and copying the ID from the URL. For example, for the URL `https://_*.app.box.com/files/123` the `file_id` is `123`.
    * @type {string}
    * @memberof SharedLinksFilesApiUpdateLinkOnFile
    */
    readonly fileId: string
    
    /**
    * Explicitly request the `shared_link` fields to be returned for this item.
    * @type {string}
    * @memberof SharedLinksFilesApiUpdateLinkOnFile
    */
    readonly fields: string
    
} & SharedLinksFilesUpdateLinkOnFileRequest

/**
 * SharedLinksFilesApiGenerated - object-oriented interface
 * @export
 * @class SharedLinksFilesApiGenerated
 * @extends {BaseAPI}
 */
export class SharedLinksFilesApiGenerated extends BaseAPI {
    /**
     * Adds a shared link to a file.
     * @summary Add shared link to file
     * @param {SharedLinksFilesApiAddSharedLinkToFileRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SharedLinksFilesApiGenerated
     */
    public addSharedLinkToFile(requestParameters: SharedLinksFilesApiAddSharedLinkToFileRequest, options?: AxiosRequestConfig) {
        return SharedLinksFilesApiFp(this.configuration).addSharedLinkToFile(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the file represented by a shared link.  A shared file can be represented by a shared link, which can originate within the current enterprise or within another.  This endpoint allows an application to retrieve information about a shared file when only given a shared link.  The `shared_link_permission_options` array field can be returned by requesting it in the `fields` query parameter.
     * @summary Find file for shared link
     * @param {SharedLinksFilesApiGetBySharedLinkRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SharedLinksFilesApiGenerated
     */
    public getBySharedLink(requestParameters: SharedLinksFilesApiGetBySharedLinkRequest, options?: AxiosRequestConfig) {
        return SharedLinksFilesApiFp(this.configuration).getBySharedLink(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets the information for a shared link on a file.
     * @summary Get shared link for file
     * @param {SharedLinksFilesApiGetSharedLinkInfoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SharedLinksFilesApiGenerated
     */
    public getSharedLinkInfo(requestParameters: SharedLinksFilesApiGetSharedLinkInfoRequest, options?: AxiosRequestConfig) {
        return SharedLinksFilesApiFp(this.configuration).getSharedLinkInfo(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Removes a shared link from a file.
     * @summary Remove shared link from file
     * @param {SharedLinksFilesApiRemoveSharedLinkRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SharedLinksFilesApiGenerated
     */
    public removeSharedLink(requestParameters: SharedLinksFilesApiRemoveSharedLinkRequest, options?: AxiosRequestConfig) {
        return SharedLinksFilesApiFp(this.configuration).removeSharedLink(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates a shared link on a file.
     * @summary Update shared link on file
     * @param {SharedLinksFilesApiUpdateLinkOnFileRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SharedLinksFilesApiGenerated
     */
    public updateLinkOnFile(requestParameters: SharedLinksFilesApiUpdateLinkOnFileRequest, options?: AxiosRequestConfig) {
        return SharedLinksFilesApiFp(this.configuration).updateLinkOnFile(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
