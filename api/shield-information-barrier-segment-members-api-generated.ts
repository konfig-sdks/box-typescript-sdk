/* tslint:disable */
/* eslint-disable */
/*
Box Platform API

[Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.

The version of the OpenAPI document: 2.0.0
Contact: devrel@box.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ClientError } from '../models';
// @ts-ignore
import { ShieldInformationBarrierBase } from '../models';
// @ts-ignore
import { ShieldInformationBarrierSegmentMember } from '../models';
// @ts-ignore
import { ShieldInformationBarrierSegmentMembers } from '../models';
// @ts-ignore
import { ShieldInformationBarrierSegmentMembersCreateNewMemberRequest } from '../models';
// @ts-ignore
import { ShieldInformationBarrierSegmentMembersCreateNewMemberRequestShieldInformationBarrierSegment } from '../models';
// @ts-ignore
import { UserBase } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * ShieldInformationBarrierSegmentMembersApi - axios parameter creator
 * @export
 */
export const ShieldInformationBarrierSegmentMembersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a new shield information barrier segment member.
         * @summary Create shield information barrier segment member
         * @param {ShieldInformationBarrierSegmentMembersCreateNewMemberRequest} [shieldInformationBarrierSegmentMembersCreateNewMemberRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewMember: async (shieldInformationBarrierSegmentMembersCreateNewMemberRequest?: ShieldInformationBarrierSegmentMembersCreateNewMemberRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/shield_information_barrier_segment_members`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2Security required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Security", [], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: shieldInformationBarrierSegmentMembersCreateNewMemberRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/shield_information_barrier_segment_members',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(shieldInformationBarrierSegmentMembersCreateNewMemberRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a shield information barrier segment member by its ID.
         * @summary Get shield information barrier segment member by ID
         * @param {string} shieldInformationBarrierSegmentMemberId The ID of the shield information barrier segment Member.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById: async (shieldInformationBarrierSegmentMemberId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'shieldInformationBarrierSegmentMemberId' is not null or undefined
            assertParamExists('getById', 'shieldInformationBarrierSegmentMemberId', shieldInformationBarrierSegmentMemberId)
            const localVarPath = `/shield_information_barrier_segment_members/{shield_information_barrier_segment_member_id}`
                .replace(`{${"shield_information_barrier_segment_member_id"}}`, encodeURIComponent(String(shieldInformationBarrierSegmentMemberId !== undefined ? shieldInformationBarrierSegmentMemberId : `-shield_information_barrier_segment_member_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2Security required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Security", [], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/shield_information_barrier_segment_members/{shield_information_barrier_segment_member_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists shield information barrier segment members based on provided segment IDs.
         * @summary List shield information barrier segment members
         * @param {string} shieldInformationBarrierSegmentId The ID of the shield information barrier segment.
         * @param {string} [marker] Defines the position marker at which to begin returning results. This is used when paginating using marker-based pagination.  This requires &#x60;usemarker&#x60; to be set to &#x60;true&#x60;.
         * @param {number} [limit] The maximum number of items to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSegmentMembersBasedOnIds: async (shieldInformationBarrierSegmentId: string, marker?: string, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'shieldInformationBarrierSegmentId' is not null or undefined
            assertParamExists('listSegmentMembersBasedOnIds', 'shieldInformationBarrierSegmentId', shieldInformationBarrierSegmentId)
            const localVarPath = `/shield_information_barrier_segment_members`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2Security required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Security", [], configuration)
            if (shieldInformationBarrierSegmentId !== undefined) {
                localVarQueryParameter['shield_information_barrier_segment_id'] = shieldInformationBarrierSegmentId;
            }

            if (marker !== undefined) {
                localVarQueryParameter['marker'] = marker;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/shield_information_barrier_segment_members',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a shield information barrier segment member based on provided ID.
         * @summary Delete shield information barrier segment member by ID
         * @param {string} shieldInformationBarrierSegmentMemberId The ID of the shield information barrier segment Member.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeById: async (shieldInformationBarrierSegmentMemberId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'shieldInformationBarrierSegmentMemberId' is not null or undefined
            assertParamExists('removeById', 'shieldInformationBarrierSegmentMemberId', shieldInformationBarrierSegmentMemberId)
            const localVarPath = `/shield_information_barrier_segment_members/{shield_information_barrier_segment_member_id}`
                .replace(`{${"shield_information_barrier_segment_member_id"}}`, encodeURIComponent(String(shieldInformationBarrierSegmentMemberId !== undefined ? shieldInformationBarrierSegmentMemberId : `-shield_information_barrier_segment_member_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2Security required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Security", [], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/shield_information_barrier_segment_members/{shield_information_barrier_segment_member_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ShieldInformationBarrierSegmentMembersApi - functional programming interface
 * @export
 */
export const ShieldInformationBarrierSegmentMembersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ShieldInformationBarrierSegmentMembersApiAxiosParamCreator(configuration)
    return {
        /**
         * Creates a new shield information barrier segment member.
         * @summary Create shield information barrier segment member
         * @param {ShieldInformationBarrierSegmentMembersApiCreateNewMemberRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNewMember(requestParameters: ShieldInformationBarrierSegmentMembersApiCreateNewMemberRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShieldInformationBarrierSegmentMember>> {
            const shieldInformationBarrierSegmentMembersCreateNewMemberRequest: ShieldInformationBarrierSegmentMembersCreateNewMemberRequest = {
                type: requestParameters.type,
                shield_information_barrier: requestParameters.shield_information_barrier,
                shield_information_barrier_segment: requestParameters.shield_information_barrier_segment,
                user: requestParameters.user
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNewMember(shieldInformationBarrierSegmentMembersCreateNewMemberRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a shield information barrier segment member by its ID.
         * @summary Get shield information barrier segment member by ID
         * @param {ShieldInformationBarrierSegmentMembersApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getById(requestParameters: ShieldInformationBarrierSegmentMembersApiGetByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShieldInformationBarrierSegmentMember>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getById(requestParameters.shieldInformationBarrierSegmentMemberId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Lists shield information barrier segment members based on provided segment IDs.
         * @summary List shield information barrier segment members
         * @param {ShieldInformationBarrierSegmentMembersApiListSegmentMembersBasedOnIdsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSegmentMembersBasedOnIds(requestParameters: ShieldInformationBarrierSegmentMembersApiListSegmentMembersBasedOnIdsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShieldInformationBarrierSegmentMembers>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listSegmentMembersBasedOnIds(requestParameters.shieldInformationBarrierSegmentId, requestParameters.marker, requestParameters.limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Deletes a shield information barrier segment member based on provided ID.
         * @summary Delete shield information barrier segment member by ID
         * @param {ShieldInformationBarrierSegmentMembersApiRemoveByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeById(requestParameters: ShieldInformationBarrierSegmentMembersApiRemoveByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeById(requestParameters.shieldInformationBarrierSegmentMemberId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ShieldInformationBarrierSegmentMembersApi - factory interface
 * @export
 */
export const ShieldInformationBarrierSegmentMembersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ShieldInformationBarrierSegmentMembersApiFp(configuration)
    return {
        /**
         * Creates a new shield information barrier segment member.
         * @summary Create shield information barrier segment member
         * @param {ShieldInformationBarrierSegmentMembersApiCreateNewMemberRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewMember(requestParameters: ShieldInformationBarrierSegmentMembersApiCreateNewMemberRequest, options?: AxiosRequestConfig): AxiosPromise<ShieldInformationBarrierSegmentMember> {
            return localVarFp.createNewMember(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a shield information barrier segment member by its ID.
         * @summary Get shield information barrier segment member by ID
         * @param {ShieldInformationBarrierSegmentMembersApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById(requestParameters: ShieldInformationBarrierSegmentMembersApiGetByIdRequest, options?: AxiosRequestConfig): AxiosPromise<ShieldInformationBarrierSegmentMember> {
            return localVarFp.getById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Lists shield information barrier segment members based on provided segment IDs.
         * @summary List shield information barrier segment members
         * @param {ShieldInformationBarrierSegmentMembersApiListSegmentMembersBasedOnIdsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSegmentMembersBasedOnIds(requestParameters: ShieldInformationBarrierSegmentMembersApiListSegmentMembersBasedOnIdsRequest, options?: AxiosRequestConfig): AxiosPromise<ShieldInformationBarrierSegmentMembers> {
            return localVarFp.listSegmentMembersBasedOnIds(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes a shield information barrier segment member based on provided ID.
         * @summary Delete shield information barrier segment member by ID
         * @param {ShieldInformationBarrierSegmentMembersApiRemoveByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeById(requestParameters: ShieldInformationBarrierSegmentMembersApiRemoveByIdRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.removeById(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createNewMember operation in ShieldInformationBarrierSegmentMembersApi.
 * @export
 * @interface ShieldInformationBarrierSegmentMembersApiCreateNewMemberRequest
 */
export type ShieldInformationBarrierSegmentMembersApiCreateNewMemberRequest = {
    
} & ShieldInformationBarrierSegmentMembersCreateNewMemberRequest

/**
 * Request parameters for getById operation in ShieldInformationBarrierSegmentMembersApi.
 * @export
 * @interface ShieldInformationBarrierSegmentMembersApiGetByIdRequest
 */
export type ShieldInformationBarrierSegmentMembersApiGetByIdRequest = {
    
    /**
    * The ID of the shield information barrier segment Member.
    * @type {string}
    * @memberof ShieldInformationBarrierSegmentMembersApiGetById
    */
    readonly shieldInformationBarrierSegmentMemberId: string
    
}

/**
 * Request parameters for listSegmentMembersBasedOnIds operation in ShieldInformationBarrierSegmentMembersApi.
 * @export
 * @interface ShieldInformationBarrierSegmentMembersApiListSegmentMembersBasedOnIdsRequest
 */
export type ShieldInformationBarrierSegmentMembersApiListSegmentMembersBasedOnIdsRequest = {
    
    /**
    * The ID of the shield information barrier segment.
    * @type {string}
    * @memberof ShieldInformationBarrierSegmentMembersApiListSegmentMembersBasedOnIds
    */
    readonly shieldInformationBarrierSegmentId: string
    
    /**
    * Defines the position marker at which to begin returning results. This is used when paginating using marker-based pagination.  This requires `usemarker` to be set to `true`.
    * @type {string}
    * @memberof ShieldInformationBarrierSegmentMembersApiListSegmentMembersBasedOnIds
    */
    readonly marker?: string
    
    /**
    * The maximum number of items to return per page.
    * @type {number}
    * @memberof ShieldInformationBarrierSegmentMembersApiListSegmentMembersBasedOnIds
    */
    readonly limit?: number
    
}

/**
 * Request parameters for removeById operation in ShieldInformationBarrierSegmentMembersApi.
 * @export
 * @interface ShieldInformationBarrierSegmentMembersApiRemoveByIdRequest
 */
export type ShieldInformationBarrierSegmentMembersApiRemoveByIdRequest = {
    
    /**
    * The ID of the shield information barrier segment Member.
    * @type {string}
    * @memberof ShieldInformationBarrierSegmentMembersApiRemoveById
    */
    readonly shieldInformationBarrierSegmentMemberId: string
    
}

/**
 * ShieldInformationBarrierSegmentMembersApiGenerated - object-oriented interface
 * @export
 * @class ShieldInformationBarrierSegmentMembersApiGenerated
 * @extends {BaseAPI}
 */
export class ShieldInformationBarrierSegmentMembersApiGenerated extends BaseAPI {
    /**
     * Creates a new shield information barrier segment member.
     * @summary Create shield information barrier segment member
     * @param {ShieldInformationBarrierSegmentMembersApiCreateNewMemberRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShieldInformationBarrierSegmentMembersApiGenerated
     */
    public createNewMember(requestParameters: ShieldInformationBarrierSegmentMembersApiCreateNewMemberRequest, options?: AxiosRequestConfig) {
        return ShieldInformationBarrierSegmentMembersApiFp(this.configuration).createNewMember(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a shield information barrier segment member by its ID.
     * @summary Get shield information barrier segment member by ID
     * @param {ShieldInformationBarrierSegmentMembersApiGetByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShieldInformationBarrierSegmentMembersApiGenerated
     */
    public getById(requestParameters: ShieldInformationBarrierSegmentMembersApiGetByIdRequest, options?: AxiosRequestConfig) {
        return ShieldInformationBarrierSegmentMembersApiFp(this.configuration).getById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Lists shield information barrier segment members based on provided segment IDs.
     * @summary List shield information barrier segment members
     * @param {ShieldInformationBarrierSegmentMembersApiListSegmentMembersBasedOnIdsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShieldInformationBarrierSegmentMembersApiGenerated
     */
    public listSegmentMembersBasedOnIds(requestParameters: ShieldInformationBarrierSegmentMembersApiListSegmentMembersBasedOnIdsRequest, options?: AxiosRequestConfig) {
        return ShieldInformationBarrierSegmentMembersApiFp(this.configuration).listSegmentMembersBasedOnIds(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes a shield information barrier segment member based on provided ID.
     * @summary Delete shield information barrier segment member by ID
     * @param {ShieldInformationBarrierSegmentMembersApiRemoveByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShieldInformationBarrierSegmentMembersApiGenerated
     */
    public removeById(requestParameters: ShieldInformationBarrierSegmentMembersApiRemoveByIdRequest, options?: AxiosRequestConfig) {
        return ShieldInformationBarrierSegmentMembersApiFp(this.configuration).removeById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
