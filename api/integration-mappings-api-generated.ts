/* tslint:disable */
/* eslint-disable */
/*
Box Platform API

[Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.

The version of the OpenAPI document: 2.0.0
Contact: devrel@box.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ClientError } from '../models';
// @ts-ignore
import { IntegrationMapping } from '../models';
// @ts-ignore
import { IntegrationMappingBoxItemSlack } from '../models';
// @ts-ignore
import { IntegrationMappingPartnerItemSlack } from '../models';
// @ts-ignore
import { IntegrationMappingSlackCreateRequest } from '../models';
// @ts-ignore
import { IntegrationMappingSlackOptions } from '../models';
// @ts-ignore
import { IntegrationMappings } from '../models';
// @ts-ignore
import { IntegrationMappingsUpdateSlackMappingRequest } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * IntegrationMappingsApi - axios parameter creator
 * @export
 */
export const IntegrationMappingsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a [Slack integration mapping](https://support.box.com/hc/en-us/articles/4415585987859-Box-as-the-Content-Layer-for-Slack) by mapping a Slack channel to a Box item.  You need Admin or Co-Admin role to use this endpoint.
         * @summary Create Slack integration mapping
         * @param {IntegrationMappingSlackCreateRequest} [integrationMappingSlackCreateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSlackMapping: async (integrationMappingSlackCreateRequest?: IntegrationMappingSlackCreateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/integration_mappings/slack`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2Security required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Security", [], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: integrationMappingSlackCreateRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/integration_mappings/slack',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(integrationMappingSlackCreateRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a [Slack integration mapping](https://support.box.com/hc/en-us/articles/4415585987859-Box-as-the-Content-Layer-for-Slack).   You need Admin or Co-Admin role to use this endpoint.
         * @summary Delete Slack integration mapping
         * @param {string} integrationMappingId An ID of an integration mapping
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSlackMapping: async (integrationMappingId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'integrationMappingId' is not null or undefined
            assertParamExists('deleteSlackMapping', 'integrationMappingId', integrationMappingId)
            const localVarPath = `/integration_mappings/slack/{integration_mapping_id}`
                .replace(`{${"integration_mapping_id"}}`, encodeURIComponent(String(integrationMappingId !== undefined ? integrationMappingId : `-integration_mapping_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2Security required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Security", [], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/integration_mappings/slack/{integration_mapping_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists [Slack integration mappings](https://support.box.com/hc/en-us/articles/4415585987859-Box-as-the-Content-Layer-for-Slack) in a users\' enterprise.  You need Admin or Co-Admin role to use this endpoint.
         * @summary List Slack integration mappings
         * @param {string} [marker] Defines the position marker at which to begin returning results. This is used when paginating using marker-based pagination.  This requires &#x60;usemarker&#x60; to be set to &#x60;true&#x60;.
         * @param {number} [limit] The maximum number of items to return per page.
         * @param {'channel'} [partnerItemType] Mapped item type, for which the mapping should be returned
         * @param {string} [partnerItemId] ID of the mapped item, for which the mapping should be returned
         * @param {string} [boxItemId] Box item ID, for which the mappings should be returned
         * @param {'folder'} [boxItemType] Box item type, for which the mappings should be returned
         * @param {boolean} [isManuallyCreated] Whether the mapping has been manually created
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSlackMappings: async (marker?: string, limit?: number, partnerItemType?: 'channel', partnerItemId?: string, boxItemId?: string, boxItemType?: 'folder', isManuallyCreated?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/integration_mappings/slack`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2Security required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Security", [], configuration)
            if (marker !== undefined) {
                localVarQueryParameter['marker'] = marker;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (partnerItemType !== undefined) {
                localVarQueryParameter['partner_item_type'] = partnerItemType;
            }

            if (partnerItemId !== undefined) {
                localVarQueryParameter['partner_item_id'] = partnerItemId;
            }

            if (boxItemId !== undefined) {
                localVarQueryParameter['box_item_id'] = boxItemId;
            }

            if (boxItemType !== undefined) {
                localVarQueryParameter['box_item_type'] = boxItemType;
            }

            if (isManuallyCreated !== undefined) {
                localVarQueryParameter['is_manually_created'] = isManuallyCreated;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/integration_mappings/slack',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates a [Slack integration mapping](https://support.box.com/hc/en-us/articles/4415585987859-Box-as-the-Content-Layer-for-Slack). Supports updating the Box folder ID and options.  You need Admin or Co-Admin role to use this endpoint.
         * @summary Update Slack integration mapping
         * @param {string} integrationMappingId An ID of an integration mapping
         * @param {IntegrationMappingsUpdateSlackMappingRequest} [integrationMappingsUpdateSlackMappingRequest] At least one of &#x60;box_item&#x60; and &#x60;options&#x60; must be provided.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSlackMapping: async (integrationMappingId: string, integrationMappingsUpdateSlackMappingRequest?: IntegrationMappingsUpdateSlackMappingRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'integrationMappingId' is not null or undefined
            assertParamExists('updateSlackMapping', 'integrationMappingId', integrationMappingId)
            const localVarPath = `/integration_mappings/slack/{integration_mapping_id}`
                .replace(`{${"integration_mapping_id"}}`, encodeURIComponent(String(integrationMappingId !== undefined ? integrationMappingId : `-integration_mapping_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2Security required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Security", [], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: integrationMappingsUpdateSlackMappingRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/integration_mappings/slack/{integration_mapping_id}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(integrationMappingsUpdateSlackMappingRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * IntegrationMappingsApi - functional programming interface
 * @export
 */
export const IntegrationMappingsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = IntegrationMappingsApiAxiosParamCreator(configuration)
    return {
        /**
         * Creates a [Slack integration mapping](https://support.box.com/hc/en-us/articles/4415585987859-Box-as-the-Content-Layer-for-Slack) by mapping a Slack channel to a Box item.  You need Admin or Co-Admin role to use this endpoint.
         * @summary Create Slack integration mapping
         * @param {IntegrationMappingsApiCreateSlackMappingRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createSlackMapping(requestParameters: IntegrationMappingsApiCreateSlackMappingRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IntegrationMapping>> {
            const integrationMappingSlackCreateRequest: IntegrationMappingSlackCreateRequest = {
                partner_item: requestParameters.partner_item,
                box_item: requestParameters.box_item,
                options: requestParameters.options
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createSlackMapping(integrationMappingSlackCreateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Deletes a [Slack integration mapping](https://support.box.com/hc/en-us/articles/4415585987859-Box-as-the-Content-Layer-for-Slack).   You need Admin or Co-Admin role to use this endpoint.
         * @summary Delete Slack integration mapping
         * @param {IntegrationMappingsApiDeleteSlackMappingRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSlackMapping(requestParameters: IntegrationMappingsApiDeleteSlackMappingRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteSlackMapping(requestParameters.integrationMappingId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Lists [Slack integration mappings](https://support.box.com/hc/en-us/articles/4415585987859-Box-as-the-Content-Layer-for-Slack) in a users\' enterprise.  You need Admin or Co-Admin role to use this endpoint.
         * @summary List Slack integration mappings
         * @param {IntegrationMappingsApiListSlackMappingsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSlackMappings(requestParameters: IntegrationMappingsApiListSlackMappingsRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IntegrationMappings>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listSlackMappings(requestParameters.marker, requestParameters.limit, requestParameters.partnerItemType, requestParameters.partnerItemId, requestParameters.boxItemId, requestParameters.boxItemType, requestParameters.isManuallyCreated, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates a [Slack integration mapping](https://support.box.com/hc/en-us/articles/4415585987859-Box-as-the-Content-Layer-for-Slack). Supports updating the Box folder ID and options.  You need Admin or Co-Admin role to use this endpoint.
         * @summary Update Slack integration mapping
         * @param {IntegrationMappingsApiUpdateSlackMappingRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSlackMapping(requestParameters: IntegrationMappingsApiUpdateSlackMappingRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IntegrationMapping>> {
            const integrationMappingsUpdateSlackMappingRequest: IntegrationMappingsUpdateSlackMappingRequest = {
                box_item: requestParameters.box_item,
                options: requestParameters.options
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateSlackMapping(requestParameters.integrationMappingId, integrationMappingsUpdateSlackMappingRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * IntegrationMappingsApi - factory interface
 * @export
 */
export const IntegrationMappingsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = IntegrationMappingsApiFp(configuration)
    return {
        /**
         * Creates a [Slack integration mapping](https://support.box.com/hc/en-us/articles/4415585987859-Box-as-the-Content-Layer-for-Slack) by mapping a Slack channel to a Box item.  You need Admin or Co-Admin role to use this endpoint.
         * @summary Create Slack integration mapping
         * @param {IntegrationMappingsApiCreateSlackMappingRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSlackMapping(requestParameters: IntegrationMappingsApiCreateSlackMappingRequest, options?: AxiosRequestConfig): AxiosPromise<IntegrationMapping> {
            return localVarFp.createSlackMapping(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes a [Slack integration mapping](https://support.box.com/hc/en-us/articles/4415585987859-Box-as-the-Content-Layer-for-Slack).   You need Admin or Co-Admin role to use this endpoint.
         * @summary Delete Slack integration mapping
         * @param {IntegrationMappingsApiDeleteSlackMappingRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSlackMapping(requestParameters: IntegrationMappingsApiDeleteSlackMappingRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteSlackMapping(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Lists [Slack integration mappings](https://support.box.com/hc/en-us/articles/4415585987859-Box-as-the-Content-Layer-for-Slack) in a users\' enterprise.  You need Admin or Co-Admin role to use this endpoint.
         * @summary List Slack integration mappings
         * @param {IntegrationMappingsApiListSlackMappingsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSlackMappings(requestParameters: IntegrationMappingsApiListSlackMappingsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<IntegrationMappings> {
            return localVarFp.listSlackMappings(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates a [Slack integration mapping](https://support.box.com/hc/en-us/articles/4415585987859-Box-as-the-Content-Layer-for-Slack). Supports updating the Box folder ID and options.  You need Admin or Co-Admin role to use this endpoint.
         * @summary Update Slack integration mapping
         * @param {IntegrationMappingsApiUpdateSlackMappingRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSlackMapping(requestParameters: IntegrationMappingsApiUpdateSlackMappingRequest, options?: AxiosRequestConfig): AxiosPromise<IntegrationMapping> {
            return localVarFp.updateSlackMapping(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createSlackMapping operation in IntegrationMappingsApi.
 * @export
 * @interface IntegrationMappingsApiCreateSlackMappingRequest
 */
export type IntegrationMappingsApiCreateSlackMappingRequest = {
    
} & IntegrationMappingSlackCreateRequest

/**
 * Request parameters for deleteSlackMapping operation in IntegrationMappingsApi.
 * @export
 * @interface IntegrationMappingsApiDeleteSlackMappingRequest
 */
export type IntegrationMappingsApiDeleteSlackMappingRequest = {
    
    /**
    * An ID of an integration mapping
    * @type {string}
    * @memberof IntegrationMappingsApiDeleteSlackMapping
    */
    readonly integrationMappingId: string
    
}

/**
 * Request parameters for listSlackMappings operation in IntegrationMappingsApi.
 * @export
 * @interface IntegrationMappingsApiListSlackMappingsRequest
 */
export type IntegrationMappingsApiListSlackMappingsRequest = {
    
    /**
    * Defines the position marker at which to begin returning results. This is used when paginating using marker-based pagination.  This requires `usemarker` to be set to `true`.
    * @type {string}
    * @memberof IntegrationMappingsApiListSlackMappings
    */
    readonly marker?: string
    
    /**
    * The maximum number of items to return per page.
    * @type {number}
    * @memberof IntegrationMappingsApiListSlackMappings
    */
    readonly limit?: number
    
    /**
    * Mapped item type, for which the mapping should be returned
    * @type {'channel'}
    * @memberof IntegrationMappingsApiListSlackMappings
    */
    readonly partnerItemType?: 'channel'
    
    /**
    * ID of the mapped item, for which the mapping should be returned
    * @type {string}
    * @memberof IntegrationMappingsApiListSlackMappings
    */
    readonly partnerItemId?: string
    
    /**
    * Box item ID, for which the mappings should be returned
    * @type {string}
    * @memberof IntegrationMappingsApiListSlackMappings
    */
    readonly boxItemId?: string
    
    /**
    * Box item type, for which the mappings should be returned
    * @type {'folder'}
    * @memberof IntegrationMappingsApiListSlackMappings
    */
    readonly boxItemType?: 'folder'
    
    /**
    * Whether the mapping has been manually created
    * @type {boolean}
    * @memberof IntegrationMappingsApiListSlackMappings
    */
    readonly isManuallyCreated?: boolean
    
}

/**
 * Request parameters for updateSlackMapping operation in IntegrationMappingsApi.
 * @export
 * @interface IntegrationMappingsApiUpdateSlackMappingRequest
 */
export type IntegrationMappingsApiUpdateSlackMappingRequest = {
    
    /**
    * An ID of an integration mapping
    * @type {string}
    * @memberof IntegrationMappingsApiUpdateSlackMapping
    */
    readonly integrationMappingId: string
    
} & IntegrationMappingsUpdateSlackMappingRequest

/**
 * IntegrationMappingsApiGenerated - object-oriented interface
 * @export
 * @class IntegrationMappingsApiGenerated
 * @extends {BaseAPI}
 */
export class IntegrationMappingsApiGenerated extends BaseAPI {
    /**
     * Creates a [Slack integration mapping](https://support.box.com/hc/en-us/articles/4415585987859-Box-as-the-Content-Layer-for-Slack) by mapping a Slack channel to a Box item.  You need Admin or Co-Admin role to use this endpoint.
     * @summary Create Slack integration mapping
     * @param {IntegrationMappingsApiCreateSlackMappingRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IntegrationMappingsApiGenerated
     */
    public createSlackMapping(requestParameters: IntegrationMappingsApiCreateSlackMappingRequest, options?: AxiosRequestConfig) {
        return IntegrationMappingsApiFp(this.configuration).createSlackMapping(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes a [Slack integration mapping](https://support.box.com/hc/en-us/articles/4415585987859-Box-as-the-Content-Layer-for-Slack).   You need Admin or Co-Admin role to use this endpoint.
     * @summary Delete Slack integration mapping
     * @param {IntegrationMappingsApiDeleteSlackMappingRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IntegrationMappingsApiGenerated
     */
    public deleteSlackMapping(requestParameters: IntegrationMappingsApiDeleteSlackMappingRequest, options?: AxiosRequestConfig) {
        return IntegrationMappingsApiFp(this.configuration).deleteSlackMapping(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Lists [Slack integration mappings](https://support.box.com/hc/en-us/articles/4415585987859-Box-as-the-Content-Layer-for-Slack) in a users\' enterprise.  You need Admin or Co-Admin role to use this endpoint.
     * @summary List Slack integration mappings
     * @param {IntegrationMappingsApiListSlackMappingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IntegrationMappingsApiGenerated
     */
    public listSlackMappings(requestParameters: IntegrationMappingsApiListSlackMappingsRequest = {}, options?: AxiosRequestConfig) {
        return IntegrationMappingsApiFp(this.configuration).listSlackMappings(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates a [Slack integration mapping](https://support.box.com/hc/en-us/articles/4415585987859-Box-as-the-Content-Layer-for-Slack). Supports updating the Box folder ID and options.  You need Admin or Co-Admin role to use this endpoint.
     * @summary Update Slack integration mapping
     * @param {IntegrationMappingsApiUpdateSlackMappingRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IntegrationMappingsApiGenerated
     */
    public updateSlackMapping(requestParameters: IntegrationMappingsApiUpdateSlackMappingRequest, options?: AxiosRequestConfig) {
        return IntegrationMappingsApiFp(this.configuration).updateSlackMapping(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
