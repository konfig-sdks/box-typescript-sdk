/* tslint:disable */
/* eslint-disable */
/*
Box Platform API

[Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.

The version of the OpenAPI document: 2.0.0
Contact: devrel@box.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ClientError } from '../models';
// @ts-ignore
import { ZipDownload } from '../models';
// @ts-ignore
import { ZipDownloadRequest } from '../models';
// @ts-ignore
import { ZipDownloadRequestItemsInner } from '../models';
// @ts-ignore
import { ZipDownloadStatus } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * ZipDownloadsApi - axios parameter creator
 * @export
 */
export const ZipDownloadsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a request to download multiple files and folders as a single `zip` archive file. This API does not return the archive but instead performs all the checks to ensure that the user has access to all the items, and then returns a `download_url` and a `status_url` that can be used to download the archive.  The limit for an archive is either the Account\'s upload limit or 10,000 files, whichever is met first.  **Note**: Downloading a large file can be affected by various factors such as distance, network latency, bandwidth, and congestion, as well as packet loss ratio and current server load. For these reasons we recommend that a maximum ZIP archive total size does not exceed 25GB.
         * @summary Create zip download
         * @param {ZipDownloadRequest} [zipDownloadRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRequest: async (zipDownloadRequest?: ZipDownloadRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/zip_downloads`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2Security required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Security", [], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: zipDownloadRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/zip_downloads',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(zipDownloadRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the contents of a `zip` archive in binary format. This URL does not require any form of authentication and could be used in a user\'s browser to download the archive to a user\'s device.  By default, this URL is only valid for a few seconds from the creation of the request for this archive. Once a download has started it can not be stopped and resumed, instead a new request for a zip archive would need to be created.  The URL of this endpoint should not be considered as fixed. Instead, use the [Create zip download](e://post_zip_downloads) API to request to create a `zip` archive, and then follow the `download_url` field in the response to this endpoint.
         * @summary Download zip archive
         * @param {string} zipDownloadId The unique identifier that represent this &#x60;zip&#x60; archive.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContentById: async (zipDownloadId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'zipDownloadId' is not null or undefined
            assertParamExists('getContentById', 'zipDownloadId', zipDownloadId)
            const localVarPath = `/zip_downloads/{zip_download_id}/content`
                .replace(`{${"zip_download_id"}}`, encodeURIComponent(String(zipDownloadId !== undefined ? zipDownloadId : `-zip_download_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/zip_downloads/{zip_download_id}/content',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the download status of a `zip` archive, allowing an application to inspect the progress of the download as well as the number of items that might have been skipped.  This endpoint can only be accessed once the download has started. Subsequently this endpoint is valid for 12 hours from the start of the download.  The URL of this endpoint should not be considered as fixed. Instead, use the [Create zip download](e://post_zip_downloads) API to request to create a `zip` archive, and then follow the `status_url` field in the response to this endpoint.
         * @summary Get zip download status
         * @param {string} zipDownloadId The unique identifier that represent this &#x60;zip&#x60; archive.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStatus: async (zipDownloadId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'zipDownloadId' is not null or undefined
            assertParamExists('getStatus', 'zipDownloadId', zipDownloadId)
            const localVarPath = `/zip_downloads/{zip_download_id}/status`
                .replace(`{${"zip_download_id"}}`, encodeURIComponent(String(zipDownloadId !== undefined ? zipDownloadId : `-zip_download_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2Security required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Security", [], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/zip_downloads/{zip_download_id}/status',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ZipDownloadsApi - functional programming interface
 * @export
 */
export const ZipDownloadsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ZipDownloadsApiAxiosParamCreator(configuration)
    return {
        /**
         * Creates a request to download multiple files and folders as a single `zip` archive file. This API does not return the archive but instead performs all the checks to ensure that the user has access to all the items, and then returns a `download_url` and a `status_url` that can be used to download the archive.  The limit for an archive is either the Account\'s upload limit or 10,000 files, whichever is met first.  **Note**: Downloading a large file can be affected by various factors such as distance, network latency, bandwidth, and congestion, as well as packet loss ratio and current server load. For these reasons we recommend that a maximum ZIP archive total size does not exceed 25GB.
         * @summary Create zip download
         * @param {ZipDownloadsApiCreateRequestRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createRequest(requestParameters: ZipDownloadsApiCreateRequestRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ZipDownload>> {
            const zipDownloadRequest: ZipDownloadRequest = {
                items: requestParameters.items,
                download_file_name: requestParameters.download_file_name
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createRequest(zipDownloadRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns the contents of a `zip` archive in binary format. This URL does not require any form of authentication and could be used in a user\'s browser to download the archive to a user\'s device.  By default, this URL is only valid for a few seconds from the creation of the request for this archive. Once a download has started it can not be stopped and resumed, instead a new request for a zip archive would need to be created.  The URL of this endpoint should not be considered as fixed. Instead, use the [Create zip download](e://post_zip_downloads) API to request to create a `zip` archive, and then follow the `download_url` field in the response to this endpoint.
         * @summary Download zip archive
         * @param {ZipDownloadsApiGetContentByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getContentById(requestParameters: ZipDownloadsApiGetContentByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Uint8Array | File | buffer.File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getContentById(requestParameters.zipDownloadId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns the download status of a `zip` archive, allowing an application to inspect the progress of the download as well as the number of items that might have been skipped.  This endpoint can only be accessed once the download has started. Subsequently this endpoint is valid for 12 hours from the start of the download.  The URL of this endpoint should not be considered as fixed. Instead, use the [Create zip download](e://post_zip_downloads) API to request to create a `zip` archive, and then follow the `status_url` field in the response to this endpoint.
         * @summary Get zip download status
         * @param {ZipDownloadsApiGetStatusRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStatus(requestParameters: ZipDownloadsApiGetStatusRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ZipDownloadStatus>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getStatus(requestParameters.zipDownloadId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ZipDownloadsApi - factory interface
 * @export
 */
export const ZipDownloadsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ZipDownloadsApiFp(configuration)
    return {
        /**
         * Creates a request to download multiple files and folders as a single `zip` archive file. This API does not return the archive but instead performs all the checks to ensure that the user has access to all the items, and then returns a `download_url` and a `status_url` that can be used to download the archive.  The limit for an archive is either the Account\'s upload limit or 10,000 files, whichever is met first.  **Note**: Downloading a large file can be affected by various factors such as distance, network latency, bandwidth, and congestion, as well as packet loss ratio and current server load. For these reasons we recommend that a maximum ZIP archive total size does not exceed 25GB.
         * @summary Create zip download
         * @param {ZipDownloadsApiCreateRequestRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRequest(requestParameters: ZipDownloadsApiCreateRequestRequest, options?: AxiosRequestConfig): AxiosPromise<ZipDownload> {
            return localVarFp.createRequest(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the contents of a `zip` archive in binary format. This URL does not require any form of authentication and could be used in a user\'s browser to download the archive to a user\'s device.  By default, this URL is only valid for a few seconds from the creation of the request for this archive. Once a download has started it can not be stopped and resumed, instead a new request for a zip archive would need to be created.  The URL of this endpoint should not be considered as fixed. Instead, use the [Create zip download](e://post_zip_downloads) API to request to create a `zip` archive, and then follow the `download_url` field in the response to this endpoint.
         * @summary Download zip archive
         * @param {ZipDownloadsApiGetContentByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContentById(requestParameters: ZipDownloadsApiGetContentByIdRequest, options?: AxiosRequestConfig): AxiosPromise<Uint8Array | File | buffer.File> {
            return localVarFp.getContentById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the download status of a `zip` archive, allowing an application to inspect the progress of the download as well as the number of items that might have been skipped.  This endpoint can only be accessed once the download has started. Subsequently this endpoint is valid for 12 hours from the start of the download.  The URL of this endpoint should not be considered as fixed. Instead, use the [Create zip download](e://post_zip_downloads) API to request to create a `zip` archive, and then follow the `status_url` field in the response to this endpoint.
         * @summary Get zip download status
         * @param {ZipDownloadsApiGetStatusRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStatus(requestParameters: ZipDownloadsApiGetStatusRequest, options?: AxiosRequestConfig): AxiosPromise<ZipDownloadStatus> {
            return localVarFp.getStatus(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createRequest operation in ZipDownloadsApi.
 * @export
 * @interface ZipDownloadsApiCreateRequestRequest
 */
export type ZipDownloadsApiCreateRequestRequest = {
    
} & ZipDownloadRequest

/**
 * Request parameters for getContentById operation in ZipDownloadsApi.
 * @export
 * @interface ZipDownloadsApiGetContentByIdRequest
 */
export type ZipDownloadsApiGetContentByIdRequest = {
    
    /**
    * The unique identifier that represent this `zip` archive.
    * @type {string}
    * @memberof ZipDownloadsApiGetContentById
    */
    readonly zipDownloadId: string
    
}

/**
 * Request parameters for getStatus operation in ZipDownloadsApi.
 * @export
 * @interface ZipDownloadsApiGetStatusRequest
 */
export type ZipDownloadsApiGetStatusRequest = {
    
    /**
    * The unique identifier that represent this `zip` archive.
    * @type {string}
    * @memberof ZipDownloadsApiGetStatus
    */
    readonly zipDownloadId: string
    
}

/**
 * ZipDownloadsApiGenerated - object-oriented interface
 * @export
 * @class ZipDownloadsApiGenerated
 * @extends {BaseAPI}
 */
export class ZipDownloadsApiGenerated extends BaseAPI {
    /**
     * Creates a request to download multiple files and folders as a single `zip` archive file. This API does not return the archive but instead performs all the checks to ensure that the user has access to all the items, and then returns a `download_url` and a `status_url` that can be used to download the archive.  The limit for an archive is either the Account\'s upload limit or 10,000 files, whichever is met first.  **Note**: Downloading a large file can be affected by various factors such as distance, network latency, bandwidth, and congestion, as well as packet loss ratio and current server load. For these reasons we recommend that a maximum ZIP archive total size does not exceed 25GB.
     * @summary Create zip download
     * @param {ZipDownloadsApiCreateRequestRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZipDownloadsApiGenerated
     */
    public createRequest(requestParameters: ZipDownloadsApiCreateRequestRequest, options?: AxiosRequestConfig) {
        return ZipDownloadsApiFp(this.configuration).createRequest(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the contents of a `zip` archive in binary format. This URL does not require any form of authentication and could be used in a user\'s browser to download the archive to a user\'s device.  By default, this URL is only valid for a few seconds from the creation of the request for this archive. Once a download has started it can not be stopped and resumed, instead a new request for a zip archive would need to be created.  The URL of this endpoint should not be considered as fixed. Instead, use the [Create zip download](e://post_zip_downloads) API to request to create a `zip` archive, and then follow the `download_url` field in the response to this endpoint.
     * @summary Download zip archive
     * @param {ZipDownloadsApiGetContentByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZipDownloadsApiGenerated
     */
    public getContentById(requestParameters: ZipDownloadsApiGetContentByIdRequest, options?: AxiosRequestConfig) {
        return ZipDownloadsApiFp(this.configuration).getContentById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the download status of a `zip` archive, allowing an application to inspect the progress of the download as well as the number of items that might have been skipped.  This endpoint can only be accessed once the download has started. Subsequently this endpoint is valid for 12 hours from the start of the download.  The URL of this endpoint should not be considered as fixed. Instead, use the [Create zip download](e://post_zip_downloads) API to request to create a `zip` archive, and then follow the `status_url` field in the response to this endpoint.
     * @summary Get zip download status
     * @param {ZipDownloadsApiGetStatusRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZipDownloadsApiGenerated
     */
    public getStatus(requestParameters: ZipDownloadsApiGetStatusRequest, options?: AxiosRequestConfig) {
        return ZipDownloadsApiFp(this.configuration).getStatus(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
