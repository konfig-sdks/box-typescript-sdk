/* tslint:disable */
/* eslint-disable */
/*
Box Platform API

[Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.

The version of the OpenAPI document: 2.0.0
Contact: devrel@box.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ClientError } from '../models';
// @ts-ignore
import { UserAvatar } from '../models';
// @ts-ignore
import { UserAvatarsAddOrUpdateImageRequest } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * UserAvatarsApi - axios parameter creator
 * @export
 */
export const UserAvatarsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Adds or updates a user avatar.
         * @summary Add or update user avatar
         * @param {string} userId The ID of the user.
         * @param {Uint8Array | File | buffer.File} pic The image file to be uploaded to Box. Accepted file extensions are &#x60;.jpg&#x60; or &#x60;.png&#x60;. The maximum file size is 1MB.
         * @param {UserAvatarsAddOrUpdateImageRequest} [userAvatarsAddOrUpdateImageRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addOrUpdateImage: async (userId: string, pic: Uint8Array | File | buffer.File, userAvatarsAddOrUpdateImageRequest?: UserAvatarsAddOrUpdateImageRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('addOrUpdateImage', 'userId', userId)
            // verify required parameter 'pic' is not null or undefined
            assertParamExists('addOrUpdateImage', 'pic', pic)
            const localVarPath = `/users/{user_id}/avatar`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-user_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();
            const addFormParam = async (name: string, data: any, isBinary: boolean, isPrimitiveType: boolean) => {
                if (isBinary) {
                    if (data instanceof Uint8Array) {
                        // Handle Buffer data
                        const filetype = await fromBuffer(data)
                        const filename = filetype === undefined ? name : `${name}.${filetype.ext}`
                        localVarFormParams.append(name, data as any, filename);
                    } else if ("name" in data) {
                        // File instances in browsers and Node.js have the
                        // "name" property "Duck typing" files to handle browser
                        // File class or Node.js File class
                        // Web: https://developer.mozilla.org/en-US/docs/Web/API/File
                        // Node.js: https://nodejs.org/api/buffer.html#new-bufferfilesources-filename-options
                        if (isBrowser()) {
                            // FormData in browser can accept File/Blob directly
                            localVarFormParams.append(name, data, data.name);
                        } else {
                            // FormData in Node.js can only accept raw Buffer so convert before passing
                            const bytes = await data.arrayBuffer()
                            const buffer = Buffer.from(bytes)
                            localVarFormParams.append(name, buffer, data.name);
                        }
                    }
                } else {
                    if (isPrimitiveType) {
                        /**
                         * FormData can only accept string or Blob so we need to convert
                         * non-string primitives to string. We also need to convert
                         */
                        if (typeof data === "object") {
                          localVarFormParams.append(name, JSON.stringify(data));
                        } else {
                          localVarFormParams.append(name, data);
                        }
                    } else {
                        if (isBrowser()) {
                            localVarFormParams.append(name, new Blob([JSON.stringify(data)], { type: "application/json" }))
                        } else {
                            localVarFormParams.append(name, JSON.stringify(data), { type: "application/json", filename: "data.json" });
                        }
                    }
                }
            }
            if (!isBrowser()) Object.assign(localVarHeaderParameter, localVarFormParams.getHeaders());

            // authentication OAuth2Security required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Security", [], configuration)

            if (pic !== undefined) {
                await addFormParam('pic', pic, true, true)
            }
    
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;
            requestBeforeHook({
                requestBody: userAvatarsAddOrUpdateImageRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/users/{user_id}/avatar',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves an image of a the user\'s avatar.
         * @summary Get user avatar
         * @param {string} userId The ID of the user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getImage: async (userId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getImage', 'userId', userId)
            const localVarPath = `/users/{user_id}/avatar`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-user_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2Security required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Security", [], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/users/{user_id}/avatar',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Removes an existing user avatar. You cannot reverse this operation.
         * @summary Delete user avatar
         * @param {string} userId The ID of the user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeExisting: async (userId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('removeExisting', 'userId', userId)
            const localVarPath = `/users/{user_id}/avatar`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-user_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2Security required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Security", [], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/users/{user_id}/avatar',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserAvatarsApi - functional programming interface
 * @export
 */
export const UserAvatarsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserAvatarsApiAxiosParamCreator(configuration)
    return {
        /**
         * Adds or updates a user avatar.
         * @summary Add or update user avatar
         * @param {UserAvatarsApiAddOrUpdateImageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addOrUpdateImage(requestParameters: UserAvatarsApiAddOrUpdateImageRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserAvatar>> {
            const userAvatarsAddOrUpdateImageRequest: UserAvatarsAddOrUpdateImageRequest = {
                pic: requestParameters.pic
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addOrUpdateImage(requestParameters.userId, requestParameters.pic, userAvatarsAddOrUpdateImageRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves an image of a the user\'s avatar.
         * @summary Get user avatar
         * @param {UserAvatarsApiGetImageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getImage(requestParameters: UserAvatarsApiGetImageRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Uint8Array | File | buffer.File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getImage(requestParameters.userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Removes an existing user avatar. You cannot reverse this operation.
         * @summary Delete user avatar
         * @param {UserAvatarsApiRemoveExistingRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeExisting(requestParameters: UserAvatarsApiRemoveExistingRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeExisting(requestParameters.userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UserAvatarsApi - factory interface
 * @export
 */
export const UserAvatarsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserAvatarsApiFp(configuration)
    return {
        /**
         * Adds or updates a user avatar.
         * @summary Add or update user avatar
         * @param {UserAvatarsApiAddOrUpdateImageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addOrUpdateImage(requestParameters: UserAvatarsApiAddOrUpdateImageRequest, options?: AxiosRequestConfig): AxiosPromise<UserAvatar> {
            return localVarFp.addOrUpdateImage(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves an image of a the user\'s avatar.
         * @summary Get user avatar
         * @param {UserAvatarsApiGetImageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getImage(requestParameters: UserAvatarsApiGetImageRequest, options?: AxiosRequestConfig): AxiosPromise<Uint8Array | File | buffer.File> {
            return localVarFp.getImage(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Removes an existing user avatar. You cannot reverse this operation.
         * @summary Delete user avatar
         * @param {UserAvatarsApiRemoveExistingRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeExisting(requestParameters: UserAvatarsApiRemoveExistingRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.removeExisting(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addOrUpdateImage operation in UserAvatarsApi.
 * @export
 * @interface UserAvatarsApiAddOrUpdateImageRequest
 */
export type UserAvatarsApiAddOrUpdateImageRequest = {
    
    /**
    * The ID of the user.
    * @type {string}
    * @memberof UserAvatarsApiAddOrUpdateImage
    */
    readonly userId: string
    
    /**
    * The image file to be uploaded to Box. Accepted file extensions are `.jpg` or `.png`. The maximum file size is 1MB.
    * @type {Uint8Array | File | buffer.File}
    * @memberof UserAvatarsApiAddOrUpdateImage
    */
    readonly pic: Uint8Array | File | buffer.File
    
} & UserAvatarsAddOrUpdateImageRequest

/**
 * Request parameters for getImage operation in UserAvatarsApi.
 * @export
 * @interface UserAvatarsApiGetImageRequest
 */
export type UserAvatarsApiGetImageRequest = {
    
    /**
    * The ID of the user.
    * @type {string}
    * @memberof UserAvatarsApiGetImage
    */
    readonly userId: string
    
}

/**
 * Request parameters for removeExisting operation in UserAvatarsApi.
 * @export
 * @interface UserAvatarsApiRemoveExistingRequest
 */
export type UserAvatarsApiRemoveExistingRequest = {
    
    /**
    * The ID of the user.
    * @type {string}
    * @memberof UserAvatarsApiRemoveExisting
    */
    readonly userId: string
    
}

/**
 * UserAvatarsApiGenerated - object-oriented interface
 * @export
 * @class UserAvatarsApiGenerated
 * @extends {BaseAPI}
 */
export class UserAvatarsApiGenerated extends BaseAPI {
    /**
     * Adds or updates a user avatar.
     * @summary Add or update user avatar
     * @param {UserAvatarsApiAddOrUpdateImageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserAvatarsApiGenerated
     */
    public addOrUpdateImage(requestParameters: UserAvatarsApiAddOrUpdateImageRequest, options?: AxiosRequestConfig) {
        return UserAvatarsApiFp(this.configuration).addOrUpdateImage(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves an image of a the user\'s avatar.
     * @summary Get user avatar
     * @param {UserAvatarsApiGetImageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserAvatarsApiGenerated
     */
    public getImage(requestParameters: UserAvatarsApiGetImageRequest, options?: AxiosRequestConfig) {
        return UserAvatarsApiFp(this.configuration).getImage(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Removes an existing user avatar. You cannot reverse this operation.
     * @summary Delete user avatar
     * @param {UserAvatarsApiRemoveExistingRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserAvatarsApiGenerated
     */
    public removeExisting(requestParameters: UserAvatarsApiRemoveExistingRequest, options?: AxiosRequestConfig) {
        return UserAvatarsApiFp(this.configuration).removeExisting(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
