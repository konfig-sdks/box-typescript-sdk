/* tslint:disable */
/* eslint-disable */
/*
Box Platform API

[Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.

The version of the OpenAPI document: 2.0.0
Contact: devrel@box.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ClientError } from '../models';
// @ts-ignore
import { EmailAlias } from '../models';
// @ts-ignore
import { EmailAliases } from '../models';
// @ts-ignore
import { EmailAliasesCreateNewAliasRequest } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * EmailAliasesApi - axios parameter creator
 * @export
 */
export const EmailAliasesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Adds a new email alias to a user account..
         * @summary Create email alias
         * @param {string} userId The ID of the user.
         * @param {EmailAliasesCreateNewAliasRequest} [emailAliasesCreateNewAliasRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewAlias: async (userId: string, emailAliasesCreateNewAliasRequest?: EmailAliasesCreateNewAliasRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('createNewAlias', 'userId', userId)
            const localVarPath = `/users/{user_id}/email_aliases`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-user_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2Security required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Security", [], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: emailAliasesCreateNewAliasRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/users/{user_id}/email_aliases',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(emailAliasesCreateNewAliasRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves all email aliases for a user. The collection does not include the primary login for the user.
         * @summary List user\'s email aliases
         * @param {string} userId The ID of the user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserEmailAliases: async (userId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('listUserEmailAliases', 'userId', userId)
            const localVarPath = `/users/{user_id}/email_aliases`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-user_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2Security required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Security", [], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/users/{user_id}/email_aliases',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Removes an email alias from a user.
         * @summary Remove email alias
         * @param {string} userId The ID of the user.
         * @param {string} emailAliasId The ID of the email alias.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAlias: async (userId: string, emailAliasId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('removeAlias', 'userId', userId)
            // verify required parameter 'emailAliasId' is not null or undefined
            assertParamExists('removeAlias', 'emailAliasId', emailAliasId)
            const localVarPath = `/users/{user_id}/email_aliases/{email_alias_id}`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-user_id-`)))
                .replace(`{${"email_alias_id"}}`, encodeURIComponent(String(emailAliasId !== undefined ? emailAliasId : `-email_alias_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2Security required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Security", [], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/users/{user_id}/email_aliases/{email_alias_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EmailAliasesApi - functional programming interface
 * @export
 */
export const EmailAliasesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EmailAliasesApiAxiosParamCreator(configuration)
    return {
        /**
         * Adds a new email alias to a user account..
         * @summary Create email alias
         * @param {EmailAliasesApiCreateNewAliasRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNewAlias(requestParameters: EmailAliasesApiCreateNewAliasRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmailAlias>> {
            const emailAliasesCreateNewAliasRequest: EmailAliasesCreateNewAliasRequest = {
                email: requestParameters.email
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNewAlias(requestParameters.userId, emailAliasesCreateNewAliasRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves all email aliases for a user. The collection does not include the primary login for the user.
         * @summary List user\'s email aliases
         * @param {EmailAliasesApiListUserEmailAliasesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listUserEmailAliases(requestParameters: EmailAliasesApiListUserEmailAliasesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmailAliases>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listUserEmailAliases(requestParameters.userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Removes an email alias from a user.
         * @summary Remove email alias
         * @param {EmailAliasesApiRemoveAliasRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeAlias(requestParameters: EmailAliasesApiRemoveAliasRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeAlias(requestParameters.userId, requestParameters.emailAliasId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * EmailAliasesApi - factory interface
 * @export
 */
export const EmailAliasesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EmailAliasesApiFp(configuration)
    return {
        /**
         * Adds a new email alias to a user account..
         * @summary Create email alias
         * @param {EmailAliasesApiCreateNewAliasRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewAlias(requestParameters: EmailAliasesApiCreateNewAliasRequest, options?: AxiosRequestConfig): AxiosPromise<EmailAlias> {
            return localVarFp.createNewAlias(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves all email aliases for a user. The collection does not include the primary login for the user.
         * @summary List user\'s email aliases
         * @param {EmailAliasesApiListUserEmailAliasesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserEmailAliases(requestParameters: EmailAliasesApiListUserEmailAliasesRequest, options?: AxiosRequestConfig): AxiosPromise<EmailAliases> {
            return localVarFp.listUserEmailAliases(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Removes an email alias from a user.
         * @summary Remove email alias
         * @param {EmailAliasesApiRemoveAliasRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAlias(requestParameters: EmailAliasesApiRemoveAliasRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.removeAlias(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createNewAlias operation in EmailAliasesApi.
 * @export
 * @interface EmailAliasesApiCreateNewAliasRequest
 */
export type EmailAliasesApiCreateNewAliasRequest = {
    
    /**
    * The ID of the user.
    * @type {string}
    * @memberof EmailAliasesApiCreateNewAlias
    */
    readonly userId: string
    
} & EmailAliasesCreateNewAliasRequest

/**
 * Request parameters for listUserEmailAliases operation in EmailAliasesApi.
 * @export
 * @interface EmailAliasesApiListUserEmailAliasesRequest
 */
export type EmailAliasesApiListUserEmailAliasesRequest = {
    
    /**
    * The ID of the user.
    * @type {string}
    * @memberof EmailAliasesApiListUserEmailAliases
    */
    readonly userId: string
    
}

/**
 * Request parameters for removeAlias operation in EmailAliasesApi.
 * @export
 * @interface EmailAliasesApiRemoveAliasRequest
 */
export type EmailAliasesApiRemoveAliasRequest = {
    
    /**
    * The ID of the user.
    * @type {string}
    * @memberof EmailAliasesApiRemoveAlias
    */
    readonly userId: string
    
    /**
    * The ID of the email alias.
    * @type {string}
    * @memberof EmailAliasesApiRemoveAlias
    */
    readonly emailAliasId: string
    
}

/**
 * EmailAliasesApiGenerated - object-oriented interface
 * @export
 * @class EmailAliasesApiGenerated
 * @extends {BaseAPI}
 */
export class EmailAliasesApiGenerated extends BaseAPI {
    /**
     * Adds a new email alias to a user account..
     * @summary Create email alias
     * @param {EmailAliasesApiCreateNewAliasRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmailAliasesApiGenerated
     */
    public createNewAlias(requestParameters: EmailAliasesApiCreateNewAliasRequest, options?: AxiosRequestConfig) {
        return EmailAliasesApiFp(this.configuration).createNewAlias(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves all email aliases for a user. The collection does not include the primary login for the user.
     * @summary List user\'s email aliases
     * @param {EmailAliasesApiListUserEmailAliasesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmailAliasesApiGenerated
     */
    public listUserEmailAliases(requestParameters: EmailAliasesApiListUserEmailAliasesRequest, options?: AxiosRequestConfig) {
        return EmailAliasesApiFp(this.configuration).listUserEmailAliases(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Removes an email alias from a user.
     * @summary Remove email alias
     * @param {EmailAliasesApiRemoveAliasRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmailAliasesApiGenerated
     */
    public removeAlias(requestParameters: EmailAliasesApiRemoveAliasRequest, options?: AxiosRequestConfig) {
        return EmailAliasesApiFp(this.configuration).removeAlias(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
