/* tslint:disable */
/* eslint-disable */
/*
Box Platform API

[Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.

The version of the OpenAPI document: 2.0.0
Contact: devrel@box.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ClientError } from '../models';
// @ts-ignore
import { Outcome } from '../models';
// @ts-ignore
import { Workflows } from '../models';
// @ts-ignore
import { WorkflowsStartBasedOnRequestRequest } from '../models';
// @ts-ignore
import { WorkflowsStartBasedOnRequestRequestFilesInner } from '../models';
// @ts-ignore
import { WorkflowsStartBasedOnRequestRequestFlow } from '../models';
// @ts-ignore
import { WorkflowsStartBasedOnRequestRequestFolder } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * WorkflowsApi - axios parameter creator
 * @export
 */
export const WorkflowsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Initiates a flow with a trigger type of `WORKFLOW_MANUAL_START`.  You application must be authorized to use the `Manage Box Relay` application scope within the developer console.
         * @summary Starts workflow based on request body
         * @param {string} workflowId The ID of the workflow.
         * @param {WorkflowsStartBasedOnRequestRequest} [workflowsStartBasedOnRequestRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startBasedOnRequest: async (workflowId: string, workflowsStartBasedOnRequestRequest?: WorkflowsStartBasedOnRequestRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workflowId' is not null or undefined
            assertParamExists('startBasedOnRequest', 'workflowId', workflowId)
            const localVarPath = `/workflows/{workflow_id}/start`
                .replace(`{${"workflow_id"}}`, encodeURIComponent(String(workflowId !== undefined ? workflowId : `-workflow_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2Security required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Security", [], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: workflowsStartBasedOnRequestRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/workflows/{workflow_id}/start',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(workflowsStartBasedOnRequestRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns list of workflows that act on a given `folder ID`, and have a flow with a trigger type of `WORKFLOW_MANUAL_START`.  You application must be authorized to use the `Manage Box Relay` application scope within the developer console in to use this endpoint.
         * @summary List workflows
         * @param {string} folderId The unique identifier that represent a folder.  The ID for any folder can be determined by visiting this folder in the web application and copying the ID from the URL. For example, for the URL &#x60;https://_*.app.box.com/folder/123&#x60; the &#x60;folder_id&#x60; is &#x60;123&#x60;.  The root folder of a Box account is always represented by the ID &#x60;0&#x60;.
         * @param {string} [triggerType] Type of trigger to search for.
         * @param {number} [limit] The maximum number of items to return per page.
         * @param {string} [marker] Defines the position marker at which to begin returning results. This is used when paginating using marker-based pagination.  This requires &#x60;usemarker&#x60; to be set to &#x60;true&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflows: async (folderId: string, triggerType?: string, limit?: number, marker?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'folderId' is not null or undefined
            assertParamExists('workflows', 'folderId', folderId)
            const localVarPath = `/workflows`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2Security required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Security", [], configuration)
            if (folderId !== undefined) {
                localVarQueryParameter['folder_id'] = folderId;
            }

            if (triggerType !== undefined) {
                localVarQueryParameter['trigger_type'] = triggerType;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (marker !== undefined) {
                localVarQueryParameter['marker'] = marker;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/workflows',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WorkflowsApi - functional programming interface
 * @export
 */
export const WorkflowsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WorkflowsApiAxiosParamCreator(configuration)
    return {
        /**
         * Initiates a flow with a trigger type of `WORKFLOW_MANUAL_START`.  You application must be authorized to use the `Manage Box Relay` application scope within the developer console.
         * @summary Starts workflow based on request body
         * @param {WorkflowsApiStartBasedOnRequestRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async startBasedOnRequest(requestParameters: WorkflowsApiStartBasedOnRequestRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const workflowsStartBasedOnRequestRequest: WorkflowsStartBasedOnRequestRequest = {
                type: requestParameters.type,
                flow: requestParameters.flow,
                files: requestParameters.files,
                folder: requestParameters.folder,
                outcomes: requestParameters.outcomes
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.startBasedOnRequest(requestParameters.workflowId, workflowsStartBasedOnRequestRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns list of workflows that act on a given `folder ID`, and have a flow with a trigger type of `WORKFLOW_MANUAL_START`.  You application must be authorized to use the `Manage Box Relay` application scope within the developer console in to use this endpoint.
         * @summary List workflows
         * @param {WorkflowsApiWorkflowsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async workflows(requestParameters: WorkflowsApiWorkflowsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Workflows>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.workflows(requestParameters.folderId, requestParameters.triggerType, requestParameters.limit, requestParameters.marker, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * WorkflowsApi - factory interface
 * @export
 */
export const WorkflowsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WorkflowsApiFp(configuration)
    return {
        /**
         * Initiates a flow with a trigger type of `WORKFLOW_MANUAL_START`.  You application must be authorized to use the `Manage Box Relay` application scope within the developer console.
         * @summary Starts workflow based on request body
         * @param {WorkflowsApiStartBasedOnRequestRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startBasedOnRequest(requestParameters: WorkflowsApiStartBasedOnRequestRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.startBasedOnRequest(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns list of workflows that act on a given `folder ID`, and have a flow with a trigger type of `WORKFLOW_MANUAL_START`.  You application must be authorized to use the `Manage Box Relay` application scope within the developer console in to use this endpoint.
         * @summary List workflows
         * @param {WorkflowsApiWorkflowsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflows(requestParameters: WorkflowsApiWorkflowsRequest, options?: AxiosRequestConfig): AxiosPromise<Workflows> {
            return localVarFp.workflows(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for startBasedOnRequest operation in WorkflowsApi.
 * @export
 * @interface WorkflowsApiStartBasedOnRequestRequest
 */
export type WorkflowsApiStartBasedOnRequestRequest = {
    
    /**
    * The ID of the workflow.
    * @type {string}
    * @memberof WorkflowsApiStartBasedOnRequest
    */
    readonly workflowId: string
    
} & WorkflowsStartBasedOnRequestRequest

/**
 * Request parameters for workflows operation in WorkflowsApi.
 * @export
 * @interface WorkflowsApiWorkflowsRequest
 */
export type WorkflowsApiWorkflowsRequest = {
    
    /**
    * The unique identifier that represent a folder.  The ID for any folder can be determined by visiting this folder in the web application and copying the ID from the URL. For example, for the URL `https://_*.app.box.com/folder/123` the `folder_id` is `123`.  The root folder of a Box account is always represented by the ID `0`.
    * @type {string}
    * @memberof WorkflowsApiWorkflows
    */
    readonly folderId: string
    
    /**
    * Type of trigger to search for.
    * @type {string}
    * @memberof WorkflowsApiWorkflows
    */
    readonly triggerType?: string
    
    /**
    * The maximum number of items to return per page.
    * @type {number}
    * @memberof WorkflowsApiWorkflows
    */
    readonly limit?: number
    
    /**
    * Defines the position marker at which to begin returning results. This is used when paginating using marker-based pagination.  This requires `usemarker` to be set to `true`.
    * @type {string}
    * @memberof WorkflowsApiWorkflows
    */
    readonly marker?: string
    
}

/**
 * WorkflowsApiGenerated - object-oriented interface
 * @export
 * @class WorkflowsApiGenerated
 * @extends {BaseAPI}
 */
export class WorkflowsApiGenerated extends BaseAPI {
    /**
     * Initiates a flow with a trigger type of `WORKFLOW_MANUAL_START`.  You application must be authorized to use the `Manage Box Relay` application scope within the developer console.
     * @summary Starts workflow based on request body
     * @param {WorkflowsApiStartBasedOnRequestRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowsApiGenerated
     */
    public startBasedOnRequest(requestParameters: WorkflowsApiStartBasedOnRequestRequest, options?: AxiosRequestConfig) {
        return WorkflowsApiFp(this.configuration).startBasedOnRequest(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns list of workflows that act on a given `folder ID`, and have a flow with a trigger type of `WORKFLOW_MANUAL_START`.  You application must be authorized to use the `Manage Box Relay` application scope within the developer console in to use this endpoint.
     * @summary List workflows
     * @param {WorkflowsApiWorkflowsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowsApiGenerated
     */
    public workflows(requestParameters: WorkflowsApiWorkflowsRequest, options?: AxiosRequestConfig) {
        return WorkflowsApiFp(this.configuration).workflows(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
