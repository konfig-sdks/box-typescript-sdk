/* tslint:disable */
/* eslint-disable */
/*
Box Platform API

[Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.

The version of the OpenAPI document: 2.0.0
Contact: devrel@box.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ClientError } from '../models';
// @ts-ignore
import { FilesUnderRetention } from '../models';
// @ts-ignore
import { RetentionPolicyAssignment } from '../models';
// @ts-ignore
import { RetentionPolicyAssignments } from '../models';
// @ts-ignore
import { RetentionPolicyAssignmentsCreateRetentionAssignmentRequest } from '../models';
// @ts-ignore
import { RetentionPolicyAssignmentsCreateRetentionAssignmentRequestAssignTo } from '../models';
// @ts-ignore
import { RetentionPolicyAssignmentsCreateRetentionAssignmentRequestFilterFieldsInner } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * RetentionPolicyAssignmentsApi - axios parameter creator
 * @export
 */
export const RetentionPolicyAssignmentsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Assigns a retention policy to an item.
         * @summary Assign retention policy
         * @param {RetentionPolicyAssignmentsCreateRetentionAssignmentRequest} [retentionPolicyAssignmentsCreateRetentionAssignmentRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRetentionAssignment: async (retentionPolicyAssignmentsCreateRetentionAssignmentRequest?: RetentionPolicyAssignmentsCreateRetentionAssignmentRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/retention_policy_assignments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2Security required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Security", [], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: retentionPolicyAssignmentsCreateRetentionAssignmentRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/retention_policy_assignments',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(retentionPolicyAssignmentsCreateRetentionAssignmentRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a retention policy assignment
         * @summary Get retention policy assignment
         * @param {string} retentionPolicyAssignmentId The ID of the retention policy assignment.
         * @param {Array<string>} [fields] A comma-separated list of attributes to include in the response. This can be used to request fields that are not normally returned in a standard response.  Be aware that specifying this parameter will have the effect that none of the standard fields are returned in the response unless explicitly specified, instead only fields for the mini representation are returned, additional to the fields requested.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssignment: async (retentionPolicyAssignmentId: string, fields?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'retentionPolicyAssignmentId' is not null or undefined
            assertParamExists('getAssignment', 'retentionPolicyAssignmentId', retentionPolicyAssignmentId)
            const localVarPath = `/retention_policy_assignments/{retention_policy_assignment_id}`
                .replace(`{${"retention_policy_assignment_id"}}`, encodeURIComponent(String(retentionPolicyAssignmentId !== undefined ? retentionPolicyAssignmentId : `-retention_policy_assignment_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2Security required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Security", [], configuration)
            if (fields) {
                localVarQueryParameter['fields'] = fields.join(COLLECTION_FORMATS.csv);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/retention_policy_assignments/{retention_policy_assignment_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of all retention policy assignments associated with a specified retention policy.
         * @summary List retention policy assignments
         * @param {string} retentionPolicyId The ID of the retention policy.
         * @param {'folder' | 'enterprise' | 'metadata_template'} [type] The type of the retention policy assignment to retrieve.
         * @param {Array<string>} [fields] A comma-separated list of attributes to include in the response. This can be used to request fields that are not normally returned in a standard response.  Be aware that specifying this parameter will have the effect that none of the standard fields are returned in the response unless explicitly specified, instead only fields for the mini representation are returned, additional to the fields requested.
         * @param {string} [marker] Defines the position marker at which to begin returning results. This is used when paginating using marker-based pagination.
         * @param {number} [limit] The maximum number of items to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllAssignments: async (retentionPolicyId: string, type?: 'folder' | 'enterprise' | 'metadata_template', fields?: Array<string>, marker?: string, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'retentionPolicyId' is not null or undefined
            assertParamExists('listAllAssignments', 'retentionPolicyId', retentionPolicyId)
            const localVarPath = `/retention_policies/{retention_policy_id}/assignments`
                .replace(`{${"retention_policy_id"}}`, encodeURIComponent(String(retentionPolicyId !== undefined ? retentionPolicyId : `-retention_policy_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2Security required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Security", [], configuration)
            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (fields) {
                localVarQueryParameter['fields'] = fields.join(COLLECTION_FORMATS.csv);
            }

            if (marker !== undefined) {
                localVarQueryParameter['marker'] = marker;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/retention_policies/{retention_policy_id}/assignments',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of file versions under retention for a retention policy assignment.
         * @summary Get file versions under retention
         * @param {string} retentionPolicyAssignmentId The ID of the retention policy assignment.
         * @param {string} [marker] Defines the position marker at which to begin returning results. This is used when paginating using marker-based pagination.  This requires &#x60;usemarker&#x60; to be set to &#x60;true&#x60;.
         * @param {number} [limit] The maximum number of items to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFileVersionsUnderRetention: async (retentionPolicyAssignmentId: string, marker?: string, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'retentionPolicyAssignmentId' is not null or undefined
            assertParamExists('listFileVersionsUnderRetention', 'retentionPolicyAssignmentId', retentionPolicyAssignmentId)
            const localVarPath = `/retention_policy_assignments/{retention_policy_assignment_id}/file_versions_under_retention`
                .replace(`{${"retention_policy_assignment_id"}}`, encodeURIComponent(String(retentionPolicyAssignmentId !== undefined ? retentionPolicyAssignmentId : `-retention_policy_assignment_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2Security required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Security", [], configuration)
            if (marker !== undefined) {
                localVarQueryParameter['marker'] = marker;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/retention_policy_assignments/{retention_policy_assignment_id}/file_versions_under_retention',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of files under retention for a retention policy assignment.
         * @summary Get files under retention
         * @param {string} retentionPolicyAssignmentId The ID of the retention policy assignment.
         * @param {string} [marker] Defines the position marker at which to begin returning results. This is used when paginating using marker-based pagination.  This requires &#x60;usemarker&#x60; to be set to &#x60;true&#x60;.
         * @param {number} [limit] The maximum number of items to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFilesUnderRetention: async (retentionPolicyAssignmentId: string, marker?: string, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'retentionPolicyAssignmentId' is not null or undefined
            assertParamExists('listFilesUnderRetention', 'retentionPolicyAssignmentId', retentionPolicyAssignmentId)
            const localVarPath = `/retention_policy_assignments/{retention_policy_assignment_id}/files_under_retention`
                .replace(`{${"retention_policy_assignment_id"}}`, encodeURIComponent(String(retentionPolicyAssignmentId !== undefined ? retentionPolicyAssignmentId : `-retention_policy_assignment_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2Security required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Security", [], configuration)
            if (marker !== undefined) {
                localVarQueryParameter['marker'] = marker;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/retention_policy_assignments/{retention_policy_assignment_id}/files_under_retention',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Removes a retention policy assignment applied to content.
         * @summary Remove retention policy assignment
         * @param {string} retentionPolicyAssignmentId The ID of the retention policy assignment.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAssignment: async (retentionPolicyAssignmentId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'retentionPolicyAssignmentId' is not null or undefined
            assertParamExists('removeAssignment', 'retentionPolicyAssignmentId', retentionPolicyAssignmentId)
            const localVarPath = `/retention_policy_assignments/{retention_policy_assignment_id}`
                .replace(`{${"retention_policy_assignment_id"}}`, encodeURIComponent(String(retentionPolicyAssignmentId !== undefined ? retentionPolicyAssignmentId : `-retention_policy_assignment_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2Security required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Security", [], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/retention_policy_assignments/{retention_policy_assignment_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RetentionPolicyAssignmentsApi - functional programming interface
 * @export
 */
export const RetentionPolicyAssignmentsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RetentionPolicyAssignmentsApiAxiosParamCreator(configuration)
    return {
        /**
         * Assigns a retention policy to an item.
         * @summary Assign retention policy
         * @param {RetentionPolicyAssignmentsApiCreateRetentionAssignmentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createRetentionAssignment(requestParameters: RetentionPolicyAssignmentsApiCreateRetentionAssignmentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RetentionPolicyAssignment>> {
            const retentionPolicyAssignmentsCreateRetentionAssignmentRequest: RetentionPolicyAssignmentsCreateRetentionAssignmentRequest = {
                policy_id: requestParameters.policy_id,
                assign_to: requestParameters.assign_to,
                filter_fields: requestParameters.filter_fields,
                start_date_field: requestParameters.start_date_field
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createRetentionAssignment(retentionPolicyAssignmentsCreateRetentionAssignmentRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a retention policy assignment
         * @summary Get retention policy assignment
         * @param {RetentionPolicyAssignmentsApiGetAssignmentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAssignment(requestParameters: RetentionPolicyAssignmentsApiGetAssignmentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RetentionPolicyAssignment>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAssignment(requestParameters.retentionPolicyAssignmentId, requestParameters.fields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a list of all retention policy assignments associated with a specified retention policy.
         * @summary List retention policy assignments
         * @param {RetentionPolicyAssignmentsApiListAllAssignmentsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAllAssignments(requestParameters: RetentionPolicyAssignmentsApiListAllAssignmentsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RetentionPolicyAssignments>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAllAssignments(requestParameters.retentionPolicyId, requestParameters.type, requestParameters.fields, requestParameters.marker, requestParameters.limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a list of file versions under retention for a retention policy assignment.
         * @summary Get file versions under retention
         * @param {RetentionPolicyAssignmentsApiListFileVersionsUnderRetentionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listFileVersionsUnderRetention(requestParameters: RetentionPolicyAssignmentsApiListFileVersionsUnderRetentionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FilesUnderRetention>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listFileVersionsUnderRetention(requestParameters.retentionPolicyAssignmentId, requestParameters.marker, requestParameters.limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a list of files under retention for a retention policy assignment.
         * @summary Get files under retention
         * @param {RetentionPolicyAssignmentsApiListFilesUnderRetentionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listFilesUnderRetention(requestParameters: RetentionPolicyAssignmentsApiListFilesUnderRetentionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FilesUnderRetention>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listFilesUnderRetention(requestParameters.retentionPolicyAssignmentId, requestParameters.marker, requestParameters.limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Removes a retention policy assignment applied to content.
         * @summary Remove retention policy assignment
         * @param {RetentionPolicyAssignmentsApiRemoveAssignmentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeAssignment(requestParameters: RetentionPolicyAssignmentsApiRemoveAssignmentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeAssignment(requestParameters.retentionPolicyAssignmentId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * RetentionPolicyAssignmentsApi - factory interface
 * @export
 */
export const RetentionPolicyAssignmentsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RetentionPolicyAssignmentsApiFp(configuration)
    return {
        /**
         * Assigns a retention policy to an item.
         * @summary Assign retention policy
         * @param {RetentionPolicyAssignmentsApiCreateRetentionAssignmentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRetentionAssignment(requestParameters: RetentionPolicyAssignmentsApiCreateRetentionAssignmentRequest, options?: AxiosRequestConfig): AxiosPromise<RetentionPolicyAssignment> {
            return localVarFp.createRetentionAssignment(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a retention policy assignment
         * @summary Get retention policy assignment
         * @param {RetentionPolicyAssignmentsApiGetAssignmentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssignment(requestParameters: RetentionPolicyAssignmentsApiGetAssignmentRequest, options?: AxiosRequestConfig): AxiosPromise<RetentionPolicyAssignment> {
            return localVarFp.getAssignment(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of all retention policy assignments associated with a specified retention policy.
         * @summary List retention policy assignments
         * @param {RetentionPolicyAssignmentsApiListAllAssignmentsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllAssignments(requestParameters: RetentionPolicyAssignmentsApiListAllAssignmentsRequest, options?: AxiosRequestConfig): AxiosPromise<RetentionPolicyAssignments> {
            return localVarFp.listAllAssignments(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of file versions under retention for a retention policy assignment.
         * @summary Get file versions under retention
         * @param {RetentionPolicyAssignmentsApiListFileVersionsUnderRetentionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFileVersionsUnderRetention(requestParameters: RetentionPolicyAssignmentsApiListFileVersionsUnderRetentionRequest, options?: AxiosRequestConfig): AxiosPromise<FilesUnderRetention> {
            return localVarFp.listFileVersionsUnderRetention(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of files under retention for a retention policy assignment.
         * @summary Get files under retention
         * @param {RetentionPolicyAssignmentsApiListFilesUnderRetentionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFilesUnderRetention(requestParameters: RetentionPolicyAssignmentsApiListFilesUnderRetentionRequest, options?: AxiosRequestConfig): AxiosPromise<FilesUnderRetention> {
            return localVarFp.listFilesUnderRetention(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Removes a retention policy assignment applied to content.
         * @summary Remove retention policy assignment
         * @param {RetentionPolicyAssignmentsApiRemoveAssignmentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAssignment(requestParameters: RetentionPolicyAssignmentsApiRemoveAssignmentRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.removeAssignment(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createRetentionAssignment operation in RetentionPolicyAssignmentsApi.
 * @export
 * @interface RetentionPolicyAssignmentsApiCreateRetentionAssignmentRequest
 */
export type RetentionPolicyAssignmentsApiCreateRetentionAssignmentRequest = {
    
} & RetentionPolicyAssignmentsCreateRetentionAssignmentRequest

/**
 * Request parameters for getAssignment operation in RetentionPolicyAssignmentsApi.
 * @export
 * @interface RetentionPolicyAssignmentsApiGetAssignmentRequest
 */
export type RetentionPolicyAssignmentsApiGetAssignmentRequest = {
    
    /**
    * The ID of the retention policy assignment.
    * @type {string}
    * @memberof RetentionPolicyAssignmentsApiGetAssignment
    */
    readonly retentionPolicyAssignmentId: string
    
    /**
    * A comma-separated list of attributes to include in the response. This can be used to request fields that are not normally returned in a standard response.  Be aware that specifying this parameter will have the effect that none of the standard fields are returned in the response unless explicitly specified, instead only fields for the mini representation are returned, additional to the fields requested.
    * @type {Array<string>}
    * @memberof RetentionPolicyAssignmentsApiGetAssignment
    */
    readonly fields?: Array<string>
    
}

/**
 * Request parameters for listAllAssignments operation in RetentionPolicyAssignmentsApi.
 * @export
 * @interface RetentionPolicyAssignmentsApiListAllAssignmentsRequest
 */
export type RetentionPolicyAssignmentsApiListAllAssignmentsRequest = {
    
    /**
    * The ID of the retention policy.
    * @type {string}
    * @memberof RetentionPolicyAssignmentsApiListAllAssignments
    */
    readonly retentionPolicyId: string
    
    /**
    * The type of the retention policy assignment to retrieve.
    * @type {'folder' | 'enterprise' | 'metadata_template'}
    * @memberof RetentionPolicyAssignmentsApiListAllAssignments
    */
    readonly type?: 'folder' | 'enterprise' | 'metadata_template'
    
    /**
    * A comma-separated list of attributes to include in the response. This can be used to request fields that are not normally returned in a standard response.  Be aware that specifying this parameter will have the effect that none of the standard fields are returned in the response unless explicitly specified, instead only fields for the mini representation are returned, additional to the fields requested.
    * @type {Array<string>}
    * @memberof RetentionPolicyAssignmentsApiListAllAssignments
    */
    readonly fields?: Array<string>
    
    /**
    * Defines the position marker at which to begin returning results. This is used when paginating using marker-based pagination.
    * @type {string}
    * @memberof RetentionPolicyAssignmentsApiListAllAssignments
    */
    readonly marker?: string
    
    /**
    * The maximum number of items to return per page.
    * @type {number}
    * @memberof RetentionPolicyAssignmentsApiListAllAssignments
    */
    readonly limit?: number
    
}

/**
 * Request parameters for listFileVersionsUnderRetention operation in RetentionPolicyAssignmentsApi.
 * @export
 * @interface RetentionPolicyAssignmentsApiListFileVersionsUnderRetentionRequest
 */
export type RetentionPolicyAssignmentsApiListFileVersionsUnderRetentionRequest = {
    
    /**
    * The ID of the retention policy assignment.
    * @type {string}
    * @memberof RetentionPolicyAssignmentsApiListFileVersionsUnderRetention
    */
    readonly retentionPolicyAssignmentId: string
    
    /**
    * Defines the position marker at which to begin returning results. This is used when paginating using marker-based pagination.  This requires `usemarker` to be set to `true`.
    * @type {string}
    * @memberof RetentionPolicyAssignmentsApiListFileVersionsUnderRetention
    */
    readonly marker?: string
    
    /**
    * The maximum number of items to return per page.
    * @type {number}
    * @memberof RetentionPolicyAssignmentsApiListFileVersionsUnderRetention
    */
    readonly limit?: number
    
}

/**
 * Request parameters for listFilesUnderRetention operation in RetentionPolicyAssignmentsApi.
 * @export
 * @interface RetentionPolicyAssignmentsApiListFilesUnderRetentionRequest
 */
export type RetentionPolicyAssignmentsApiListFilesUnderRetentionRequest = {
    
    /**
    * The ID of the retention policy assignment.
    * @type {string}
    * @memberof RetentionPolicyAssignmentsApiListFilesUnderRetention
    */
    readonly retentionPolicyAssignmentId: string
    
    /**
    * Defines the position marker at which to begin returning results. This is used when paginating using marker-based pagination.  This requires `usemarker` to be set to `true`.
    * @type {string}
    * @memberof RetentionPolicyAssignmentsApiListFilesUnderRetention
    */
    readonly marker?: string
    
    /**
    * The maximum number of items to return per page.
    * @type {number}
    * @memberof RetentionPolicyAssignmentsApiListFilesUnderRetention
    */
    readonly limit?: number
    
}

/**
 * Request parameters for removeAssignment operation in RetentionPolicyAssignmentsApi.
 * @export
 * @interface RetentionPolicyAssignmentsApiRemoveAssignmentRequest
 */
export type RetentionPolicyAssignmentsApiRemoveAssignmentRequest = {
    
    /**
    * The ID of the retention policy assignment.
    * @type {string}
    * @memberof RetentionPolicyAssignmentsApiRemoveAssignment
    */
    readonly retentionPolicyAssignmentId: string
    
}

/**
 * RetentionPolicyAssignmentsApiGenerated - object-oriented interface
 * @export
 * @class RetentionPolicyAssignmentsApiGenerated
 * @extends {BaseAPI}
 */
export class RetentionPolicyAssignmentsApiGenerated extends BaseAPI {
    /**
     * Assigns a retention policy to an item.
     * @summary Assign retention policy
     * @param {RetentionPolicyAssignmentsApiCreateRetentionAssignmentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RetentionPolicyAssignmentsApiGenerated
     */
    public createRetentionAssignment(requestParameters: RetentionPolicyAssignmentsApiCreateRetentionAssignmentRequest, options?: AxiosRequestConfig) {
        return RetentionPolicyAssignmentsApiFp(this.configuration).createRetentionAssignment(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a retention policy assignment
     * @summary Get retention policy assignment
     * @param {RetentionPolicyAssignmentsApiGetAssignmentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RetentionPolicyAssignmentsApiGenerated
     */
    public getAssignment(requestParameters: RetentionPolicyAssignmentsApiGetAssignmentRequest, options?: AxiosRequestConfig) {
        return RetentionPolicyAssignmentsApiFp(this.configuration).getAssignment(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of all retention policy assignments associated with a specified retention policy.
     * @summary List retention policy assignments
     * @param {RetentionPolicyAssignmentsApiListAllAssignmentsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RetentionPolicyAssignmentsApiGenerated
     */
    public listAllAssignments(requestParameters: RetentionPolicyAssignmentsApiListAllAssignmentsRequest, options?: AxiosRequestConfig) {
        return RetentionPolicyAssignmentsApiFp(this.configuration).listAllAssignments(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of file versions under retention for a retention policy assignment.
     * @summary Get file versions under retention
     * @param {RetentionPolicyAssignmentsApiListFileVersionsUnderRetentionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RetentionPolicyAssignmentsApiGenerated
     */
    public listFileVersionsUnderRetention(requestParameters: RetentionPolicyAssignmentsApiListFileVersionsUnderRetentionRequest, options?: AxiosRequestConfig) {
        return RetentionPolicyAssignmentsApiFp(this.configuration).listFileVersionsUnderRetention(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of files under retention for a retention policy assignment.
     * @summary Get files under retention
     * @param {RetentionPolicyAssignmentsApiListFilesUnderRetentionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RetentionPolicyAssignmentsApiGenerated
     */
    public listFilesUnderRetention(requestParameters: RetentionPolicyAssignmentsApiListFilesUnderRetentionRequest, options?: AxiosRequestConfig) {
        return RetentionPolicyAssignmentsApiFp(this.configuration).listFilesUnderRetention(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Removes a retention policy assignment applied to content.
     * @summary Remove retention policy assignment
     * @param {RetentionPolicyAssignmentsApiRemoveAssignmentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RetentionPolicyAssignmentsApiGenerated
     */
    public removeAssignment(requestParameters: RetentionPolicyAssignmentsApiRemoveAssignmentRequest, options?: AxiosRequestConfig) {
        return RetentionPolicyAssignmentsApiFp(this.configuration).removeAssignment(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
