/* tslint:disable */
/* eslint-disable */
/*
Box Platform API

[Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.

The version of the OpenAPI document: 2.0.0
Contact: devrel@box.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ClientError } from '../models';
// @ts-ignore
import { SkillCardsMetadata } from '../models';
// @ts-ignore
import { SkillCardsMetadataCardsInner } from '../models';
// @ts-ignore
import { SkillsApplyBoxSkillCardsRequest } from '../models';
// @ts-ignore
import { SkillsUpdateAllBoxSkillCardsRequest } from '../models';
// @ts-ignore
import { SkillsUpdateAllBoxSkillCardsRequestFile } from '../models';
// @ts-ignore
import { SkillsUpdateAllBoxSkillCardsRequestFileVersion } from '../models';
// @ts-ignore
import { SkillsUpdateAllBoxSkillCardsRequestMetadata } from '../models';
// @ts-ignore
import { SkillsUpdateAllBoxSkillCardsRequestUsage } from '../models';
// @ts-ignore
import { SkillsUpdateBoxSkillCardsOnFileRequestInner } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * SkillsApi - axios parameter creator
 * @export
 */
export const SkillsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Applies one or more Box Skills metadata cards to a file.
         * @summary Create Box Skill cards on file
         * @param {string} fileId The unique identifier that represents a file.  The ID for any file can be determined by visiting a file in the web application and copying the ID from the URL. For example, for the URL &#x60;https://_*.app.box.com/files/123&#x60; the &#x60;file_id&#x60; is &#x60;123&#x60;.
         * @param {SkillsApplyBoxSkillCardsRequest} [skillsApplyBoxSkillCardsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        applyBoxSkillCards: async (fileId: string, skillsApplyBoxSkillCardsRequest?: SkillsApplyBoxSkillCardsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fileId' is not null or undefined
            assertParamExists('applyBoxSkillCards', 'fileId', fileId)
            const localVarPath = `/files/{file_id}/metadata/global/boxSkillsCards`
                .replace(`{${"file_id"}}`, encodeURIComponent(String(fileId !== undefined ? fileId : `-file_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2Security required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Security", [], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: skillsApplyBoxSkillCardsRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/files/{file_id}/metadata/global/boxSkillsCards',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(skillsApplyBoxSkillCardsRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List the Box Skills metadata cards that are attached to a file.
         * @summary List Box Skill cards on file
         * @param {string} fileId The unique identifier that represents a file.  The ID for any file can be determined by visiting a file in the web application and copying the ID from the URL. For example, for the URL &#x60;https://_*.app.box.com/files/123&#x60; the &#x60;file_id&#x60; is &#x60;123&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listBoxSkillCards: async (fileId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fileId' is not null or undefined
            assertParamExists('listBoxSkillCards', 'fileId', fileId)
            const localVarPath = `/files/{file_id}/metadata/global/boxSkillsCards`
                .replace(`{${"file_id"}}`, encodeURIComponent(String(fileId !== undefined ? fileId : `-file_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2Security required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Security", [], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/files/{file_id}/metadata/global/boxSkillsCards',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Removes any Box Skills cards metadata from a file.
         * @summary Remove Box Skill cards from file
         * @param {string} fileId The unique identifier that represents a file.  The ID for any file can be determined by visiting a file in the web application and copying the ID from the URL. For example, for the URL &#x60;https://_*.app.box.com/files/123&#x60; the &#x60;file_id&#x60; is &#x60;123&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeBoxSkillCards: async (fileId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fileId' is not null or undefined
            assertParamExists('removeBoxSkillCards', 'fileId', fileId)
            const localVarPath = `/files/{file_id}/metadata/global/boxSkillsCards`
                .replace(`{${"file_id"}}`, encodeURIComponent(String(fileId !== undefined ? fileId : `-file_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2Security required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Security", [], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/files/{file_id}/metadata/global/boxSkillsCards',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * An alternative method that can be used to overwrite and update all Box Skill metadata cards on a file.
         * @summary Update all Box Skill cards on file
         * @param {string} skillId The ID of the skill to apply this metadata for.
         * @param {SkillsUpdateAllBoxSkillCardsRequest} [skillsUpdateAllBoxSkillCardsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAllBoxSkillCards: async (skillId: string, skillsUpdateAllBoxSkillCardsRequest?: SkillsUpdateAllBoxSkillCardsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'skillId' is not null or undefined
            assertParamExists('updateAllBoxSkillCards', 'skillId', skillId)
            const localVarPath = `/skill_invocations/{skill_id}`
                .replace(`{${"skill_id"}}`, encodeURIComponent(String(skillId !== undefined ? skillId : `-skill_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2Security required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Security", [], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: skillsUpdateAllBoxSkillCardsRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/skill_invocations/{skill_id}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(skillsUpdateAllBoxSkillCardsRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates one or more Box Skills metadata cards to a file.
         * @summary Update Box Skill cards on file
         * @param {string} fileId The unique identifier that represents a file.  The ID for any file can be determined by visiting a file in the web application and copying the ID from the URL. For example, for the URL &#x60;https://_*.app.box.com/files/123&#x60; the &#x60;file_id&#x60; is &#x60;123&#x60;.
         * @param {Array<SkillsUpdateBoxSkillCardsOnFileRequestInner>} [skillsUpdateBoxSkillCardsOnFileRequestInner] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBoxSkillCardsOnFile: async (fileId: string, skillsUpdateBoxSkillCardsOnFileRequestInner?: Array<SkillsUpdateBoxSkillCardsOnFileRequestInner>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fileId' is not null or undefined
            assertParamExists('updateBoxSkillCardsOnFile', 'fileId', fileId)
            const localVarPath = `/files/{file_id}/metadata/global/boxSkillsCards`
                .replace(`{${"file_id"}}`, encodeURIComponent(String(fileId !== undefined ? fileId : `-file_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2Security required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Security", [], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: skillsUpdateBoxSkillCardsOnFileRequestInner,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/files/{file_id}/metadata/global/boxSkillsCards',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(skillsUpdateBoxSkillCardsOnFileRequestInner, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SkillsApi - functional programming interface
 * @export
 */
export const SkillsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SkillsApiAxiosParamCreator(configuration)
    return {
        /**
         * Applies one or more Box Skills metadata cards to a file.
         * @summary Create Box Skill cards on file
         * @param {SkillsApiApplyBoxSkillCardsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async applyBoxSkillCards(requestParameters: SkillsApiApplyBoxSkillCardsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SkillCardsMetadata>> {
            const skillsApplyBoxSkillCardsRequest: SkillsApplyBoxSkillCardsRequest = {
                cards: requestParameters.cards
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.applyBoxSkillCards(requestParameters.fileId, skillsApplyBoxSkillCardsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List the Box Skills metadata cards that are attached to a file.
         * @summary List Box Skill cards on file
         * @param {SkillsApiListBoxSkillCardsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listBoxSkillCards(requestParameters: SkillsApiListBoxSkillCardsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SkillCardsMetadata>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listBoxSkillCards(requestParameters.fileId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Removes any Box Skills cards metadata from a file.
         * @summary Remove Box Skill cards from file
         * @param {SkillsApiRemoveBoxSkillCardsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeBoxSkillCards(requestParameters: SkillsApiRemoveBoxSkillCardsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeBoxSkillCards(requestParameters.fileId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * An alternative method that can be used to overwrite and update all Box Skill metadata cards on a file.
         * @summary Update all Box Skill cards on file
         * @param {SkillsApiUpdateAllBoxSkillCardsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateAllBoxSkillCards(requestParameters: SkillsApiUpdateAllBoxSkillCardsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const skillsUpdateAllBoxSkillCardsRequest: SkillsUpdateAllBoxSkillCardsRequest = {
                status: requestParameters.status,
                metadata: requestParameters.metadata,
                file: requestParameters.file,
                file_version: requestParameters.file_version,
                usage: requestParameters.usage
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateAllBoxSkillCards(requestParameters.skillId, skillsUpdateAllBoxSkillCardsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates one or more Box Skills metadata cards to a file.
         * @summary Update Box Skill cards on file
         * @param {SkillsApiUpdateBoxSkillCardsOnFileRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateBoxSkillCardsOnFile(requestParameters: SkillsApiUpdateBoxSkillCardsOnFileRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SkillCardsMetadata>> {
            const skillsUpdateBoxSkillCardsOnFileRequestInner: Array<SkillsUpdateBoxSkillCardsOnFileRequestInner> = requestParameters.requestBody;
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateBoxSkillCardsOnFile(requestParameters.fileId, skillsUpdateBoxSkillCardsOnFileRequestInner, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SkillsApi - factory interface
 * @export
 */
export const SkillsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SkillsApiFp(configuration)
    return {
        /**
         * Applies one or more Box Skills metadata cards to a file.
         * @summary Create Box Skill cards on file
         * @param {SkillsApiApplyBoxSkillCardsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        applyBoxSkillCards(requestParameters: SkillsApiApplyBoxSkillCardsRequest, options?: AxiosRequestConfig): AxiosPromise<SkillCardsMetadata> {
            return localVarFp.applyBoxSkillCards(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * List the Box Skills metadata cards that are attached to a file.
         * @summary List Box Skill cards on file
         * @param {SkillsApiListBoxSkillCardsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listBoxSkillCards(requestParameters: SkillsApiListBoxSkillCardsRequest, options?: AxiosRequestConfig): AxiosPromise<SkillCardsMetadata> {
            return localVarFp.listBoxSkillCards(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Removes any Box Skills cards metadata from a file.
         * @summary Remove Box Skill cards from file
         * @param {SkillsApiRemoveBoxSkillCardsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeBoxSkillCards(requestParameters: SkillsApiRemoveBoxSkillCardsRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.removeBoxSkillCards(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * An alternative method that can be used to overwrite and update all Box Skill metadata cards on a file.
         * @summary Update all Box Skill cards on file
         * @param {SkillsApiUpdateAllBoxSkillCardsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAllBoxSkillCards(requestParameters: SkillsApiUpdateAllBoxSkillCardsRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateAllBoxSkillCards(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates one or more Box Skills metadata cards to a file.
         * @summary Update Box Skill cards on file
         * @param {SkillsApiUpdateBoxSkillCardsOnFileRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBoxSkillCardsOnFile(requestParameters: SkillsApiUpdateBoxSkillCardsOnFileRequest, options?: AxiosRequestConfig): AxiosPromise<SkillCardsMetadata> {
            return localVarFp.updateBoxSkillCardsOnFile(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for applyBoxSkillCards operation in SkillsApi.
 * @export
 * @interface SkillsApiApplyBoxSkillCardsRequest
 */
export type SkillsApiApplyBoxSkillCardsRequest = {
    
    /**
    * The unique identifier that represents a file.  The ID for any file can be determined by visiting a file in the web application and copying the ID from the URL. For example, for the URL `https://_*.app.box.com/files/123` the `file_id` is `123`.
    * @type {string}
    * @memberof SkillsApiApplyBoxSkillCards
    */
    readonly fileId: string
    
} & SkillsApplyBoxSkillCardsRequest

/**
 * Request parameters for listBoxSkillCards operation in SkillsApi.
 * @export
 * @interface SkillsApiListBoxSkillCardsRequest
 */
export type SkillsApiListBoxSkillCardsRequest = {
    
    /**
    * The unique identifier that represents a file.  The ID for any file can be determined by visiting a file in the web application and copying the ID from the URL. For example, for the URL `https://_*.app.box.com/files/123` the `file_id` is `123`.
    * @type {string}
    * @memberof SkillsApiListBoxSkillCards
    */
    readonly fileId: string
    
}

/**
 * Request parameters for removeBoxSkillCards operation in SkillsApi.
 * @export
 * @interface SkillsApiRemoveBoxSkillCardsRequest
 */
export type SkillsApiRemoveBoxSkillCardsRequest = {
    
    /**
    * The unique identifier that represents a file.  The ID for any file can be determined by visiting a file in the web application and copying the ID from the URL. For example, for the URL `https://_*.app.box.com/files/123` the `file_id` is `123`.
    * @type {string}
    * @memberof SkillsApiRemoveBoxSkillCards
    */
    readonly fileId: string
    
}

/**
 * Request parameters for updateAllBoxSkillCards operation in SkillsApi.
 * @export
 * @interface SkillsApiUpdateAllBoxSkillCardsRequest
 */
export type SkillsApiUpdateAllBoxSkillCardsRequest = {
    
    /**
    * The ID of the skill to apply this metadata for.
    * @type {string}
    * @memberof SkillsApiUpdateAllBoxSkillCards
    */
    readonly skillId: string
    
} & SkillsUpdateAllBoxSkillCardsRequest

/**
 * Request parameters for updateBoxSkillCardsOnFile operation in SkillsApi.
 * @export
 * @interface SkillsApiUpdateBoxSkillCardsOnFileRequest
 */
export type SkillsApiUpdateBoxSkillCardsOnFileRequest = {
    /**
    * The unique identifier that represents a file.  The ID for any file can be determined by visiting a file in the web application and copying the ID from the URL. For example, for the URL `https://_*.app.box.com/files/123` the `file_id` is `123`.
    * @type {string}
    * @memberof SkillsApiUpdateBoxSkillCardsOnFile
    */
    readonly fileId: string
    /**
    * 
    * @type {Array<SkillsUpdateBoxSkillCardsOnFileRequestInner>}
    * @memberof SkillsApiUpdateBoxSkillCardsOnFile
    */
    readonly requestBody?: Array<SkillsUpdateBoxSkillCardsOnFileRequestInner>
}

/**
 * SkillsApiGenerated - object-oriented interface
 * @export
 * @class SkillsApiGenerated
 * @extends {BaseAPI}
 */
export class SkillsApiGenerated extends BaseAPI {
    /**
     * Applies one or more Box Skills metadata cards to a file.
     * @summary Create Box Skill cards on file
     * @param {SkillsApiApplyBoxSkillCardsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SkillsApiGenerated
     */
    public applyBoxSkillCards(requestParameters: SkillsApiApplyBoxSkillCardsRequest, options?: AxiosRequestConfig) {
        return SkillsApiFp(this.configuration).applyBoxSkillCards(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List the Box Skills metadata cards that are attached to a file.
     * @summary List Box Skill cards on file
     * @param {SkillsApiListBoxSkillCardsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SkillsApiGenerated
     */
    public listBoxSkillCards(requestParameters: SkillsApiListBoxSkillCardsRequest, options?: AxiosRequestConfig) {
        return SkillsApiFp(this.configuration).listBoxSkillCards(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Removes any Box Skills cards metadata from a file.
     * @summary Remove Box Skill cards from file
     * @param {SkillsApiRemoveBoxSkillCardsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SkillsApiGenerated
     */
    public removeBoxSkillCards(requestParameters: SkillsApiRemoveBoxSkillCardsRequest, options?: AxiosRequestConfig) {
        return SkillsApiFp(this.configuration).removeBoxSkillCards(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * An alternative method that can be used to overwrite and update all Box Skill metadata cards on a file.
     * @summary Update all Box Skill cards on file
     * @param {SkillsApiUpdateAllBoxSkillCardsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SkillsApiGenerated
     */
    public updateAllBoxSkillCards(requestParameters: SkillsApiUpdateAllBoxSkillCardsRequest, options?: AxiosRequestConfig) {
        return SkillsApiFp(this.configuration).updateAllBoxSkillCards(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates one or more Box Skills metadata cards to a file.
     * @summary Update Box Skill cards on file
     * @param {SkillsApiUpdateBoxSkillCardsOnFileRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SkillsApiGenerated
     */
    public updateBoxSkillCardsOnFile(requestParameters: SkillsApiUpdateBoxSkillCardsOnFileRequest, options?: AxiosRequestConfig) {
        return SkillsApiFp(this.configuration).updateBoxSkillCardsOnFile(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
