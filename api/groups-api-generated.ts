/* tslint:disable */
/* eslint-disable */
/*
Box Platform API

[Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.

The version of the OpenAPI document: 2.0.0
Contact: devrel@box.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ClientError } from '../models';
// @ts-ignore
import { GroupFull } from '../models';
// @ts-ignore
import { Groups } from '../models';
// @ts-ignore
import { GroupsUpdateGroupRequest } from '../models';
// @ts-ignore
import { PostGroupsRequest } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * GroupsApi - axios parameter creator
 * @export
 */
export const GroupsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieves information about a group. Only members of this group or users with admin-level permissions will be able to use this API.
         * @summary Get group
         * @param {string} groupId The ID of the group.
         * @param {Array<string>} [fields] A comma-separated list of attributes to include in the response. This can be used to request fields that are not normally returned in a standard response.  Be aware that specifying this parameter will have the effect that none of the standard fields are returned in the response unless explicitly specified, instead only fields for the mini representation are returned, additional to the fields requested.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInfo: async (groupId: string, fields?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('getInfo', 'groupId', groupId)
            const localVarPath = `/groups/{group_id}`
                .replace(`{${"group_id"}}`, encodeURIComponent(String(groupId !== undefined ? groupId : `-group_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2Security required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Security", [], configuration)
            if (fields) {
                localVarQueryParameter['fields'] = fields.join(COLLECTION_FORMATS.csv);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/groups/{group_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves all of the groups for a given enterprise. The user must have admin permissions to inspect enterprise\'s groups.
         * @summary List groups for enterprise
         * @param {string} [filterTerm] Limits the results to only groups whose &#x60;name&#x60; starts with the search term.
         * @param {Array<string>} [fields] A comma-separated list of attributes to include in the response. This can be used to request fields that are not normally returned in a standard response.  Be aware that specifying this parameter will have the effect that none of the standard fields are returned in the response unless explicitly specified, instead only fields for the mini representation are returned, additional to the fields requested.
         * @param {number} [limit] The maximum number of items to return per page.
         * @param {number} [offset] The offset of the item at which to begin the response.  Queries with offset parameter value exceeding 10000 will be rejected with a 400 response.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groups: async (filterTerm?: string, fields?: Array<string>, limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/groups`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2Security required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Security", [], configuration)
            if (filterTerm !== undefined) {
                localVarQueryParameter['filter_term'] = filterTerm;
            }

            if (fields) {
                localVarQueryParameter['fields'] = fields.join(COLLECTION_FORMATS.csv);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/groups',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a new group of users in an enterprise. Only users with admin permissions can create new groups.
         * @summary Create group
         * @param {Array<string>} [fields] A comma-separated list of attributes to include in the response. This can be used to request fields that are not normally returned in a standard response.  Be aware that specifying this parameter will have the effect that none of the standard fields are returned in the response unless explicitly specified, instead only fields for the mini representation are returned, additional to the fields requested.
         * @param {PostGroupsRequest} [postGroupsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groups_1: async (fields?: Array<string>, postGroupsRequest?: PostGroupsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/groups`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2Security required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Security", [], configuration)
            if (fields) {
                localVarQueryParameter['fields'] = fields.join(COLLECTION_FORMATS.csv);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: postGroupsRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/groups',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(postGroupsRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Permanently deletes a group. Only users with admin-level permissions will be able to use this API.
         * @summary Remove group
         * @param {string} groupId The ID of the group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        remove: async (groupId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('remove', 'groupId', groupId)
            const localVarPath = `/groups/{group_id}`
                .replace(`{${"group_id"}}`, encodeURIComponent(String(groupId !== undefined ? groupId : `-group_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2Security required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Security", [], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/groups/{group_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates a specific group. Only admins of this group or users with admin-level permissions will be able to use this API.
         * @summary Update group
         * @param {string} groupId The ID of the group.
         * @param {Array<string>} [fields] A comma-separated list of attributes to include in the response. This can be used to request fields that are not normally returned in a standard response.  Be aware that specifying this parameter will have the effect that none of the standard fields are returned in the response unless explicitly specified, instead only fields for the mini representation are returned, additional to the fields requested.
         * @param {GroupsUpdateGroupRequest} [groupsUpdateGroupRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateGroup: async (groupId: string, fields?: Array<string>, groupsUpdateGroupRequest?: GroupsUpdateGroupRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('updateGroup', 'groupId', groupId)
            const localVarPath = `/groups/{group_id}`
                .replace(`{${"group_id"}}`, encodeURIComponent(String(groupId !== undefined ? groupId : `-group_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2Security required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Security", [], configuration)
            if (fields) {
                localVarQueryParameter['fields'] = fields.join(COLLECTION_FORMATS.csv);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: groupsUpdateGroupRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/groups/{group_id}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(groupsUpdateGroupRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GroupsApi - functional programming interface
 * @export
 */
export const GroupsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GroupsApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieves information about a group. Only members of this group or users with admin-level permissions will be able to use this API.
         * @summary Get group
         * @param {GroupsApiGetInfoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInfo(requestParameters: GroupsApiGetInfoRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GroupFull>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getInfo(requestParameters.groupId, requestParameters.fields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves all of the groups for a given enterprise. The user must have admin permissions to inspect enterprise\'s groups.
         * @summary List groups for enterprise
         * @param {GroupsApiGroupsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groups(requestParameters: GroupsApiGroupsRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Groups>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.groups(requestParameters.filterTerm, requestParameters.fields, requestParameters.limit, requestParameters.offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates a new group of users in an enterprise. Only users with admin permissions can create new groups.
         * @summary Create group
         * @param {GroupsApiGroups0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groups_1(requestParameters: GroupsApiGroups0Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GroupFull>> {
            const postGroupsRequest: PostGroupsRequest = {
                description: requestParameters.description,
                name: requestParameters.name,
                provenance: requestParameters.provenance,
                external_sync_identifier: requestParameters.external_sync_identifier,
                invitability_level: requestParameters.invitability_level,
                member_viewability_level: requestParameters.member_viewability_level
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.groups_1(requestParameters.fields, postGroupsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Permanently deletes a group. Only users with admin-level permissions will be able to use this API.
         * @summary Remove group
         * @param {GroupsApiRemoveRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async remove(requestParameters: GroupsApiRemoveRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.remove(requestParameters.groupId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates a specific group. Only admins of this group or users with admin-level permissions will be able to use this API.
         * @summary Update group
         * @param {GroupsApiUpdateGroupRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateGroup(requestParameters: GroupsApiUpdateGroupRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GroupFull>> {
            const groupsUpdateGroupRequest: GroupsUpdateGroupRequest = {
                description: requestParameters.description,
                name: requestParameters.name,
                provenance: requestParameters.provenance,
                external_sync_identifier: requestParameters.external_sync_identifier,
                invitability_level: requestParameters.invitability_level,
                member_viewability_level: requestParameters.member_viewability_level
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateGroup(requestParameters.groupId, requestParameters.fields, groupsUpdateGroupRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * GroupsApi - factory interface
 * @export
 */
export const GroupsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GroupsApiFp(configuration)
    return {
        /**
         * Retrieves information about a group. Only members of this group or users with admin-level permissions will be able to use this API.
         * @summary Get group
         * @param {GroupsApiGetInfoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInfo(requestParameters: GroupsApiGetInfoRequest, options?: AxiosRequestConfig): AxiosPromise<GroupFull> {
            return localVarFp.getInfo(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves all of the groups for a given enterprise. The user must have admin permissions to inspect enterprise\'s groups.
         * @summary List groups for enterprise
         * @param {GroupsApiGroupsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groups(requestParameters: GroupsApiGroupsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<Groups> {
            return localVarFp.groups(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a new group of users in an enterprise. Only users with admin permissions can create new groups.
         * @summary Create group
         * @param {GroupsApiGroups0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groups_1(requestParameters: GroupsApiGroups0Request, options?: AxiosRequestConfig): AxiosPromise<GroupFull> {
            return localVarFp.groups_1(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Permanently deletes a group. Only users with admin-level permissions will be able to use this API.
         * @summary Remove group
         * @param {GroupsApiRemoveRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        remove(requestParameters: GroupsApiRemoveRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.remove(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates a specific group. Only admins of this group or users with admin-level permissions will be able to use this API.
         * @summary Update group
         * @param {GroupsApiUpdateGroupRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateGroup(requestParameters: GroupsApiUpdateGroupRequest, options?: AxiosRequestConfig): AxiosPromise<GroupFull> {
            return localVarFp.updateGroup(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getInfo operation in GroupsApi.
 * @export
 * @interface GroupsApiGetInfoRequest
 */
export type GroupsApiGetInfoRequest = {
    
    /**
    * The ID of the group.
    * @type {string}
    * @memberof GroupsApiGetInfo
    */
    readonly groupId: string
    
    /**
    * A comma-separated list of attributes to include in the response. This can be used to request fields that are not normally returned in a standard response.  Be aware that specifying this parameter will have the effect that none of the standard fields are returned in the response unless explicitly specified, instead only fields for the mini representation are returned, additional to the fields requested.
    * @type {Array<string>}
    * @memberof GroupsApiGetInfo
    */
    readonly fields?: Array<string>
    
}

/**
 * Request parameters for groups operation in GroupsApi.
 * @export
 * @interface GroupsApiGroupsRequest
 */
export type GroupsApiGroupsRequest = {
    
    /**
    * Limits the results to only groups whose `name` starts with the search term.
    * @type {string}
    * @memberof GroupsApiGroups
    */
    readonly filterTerm?: string
    
    /**
    * A comma-separated list of attributes to include in the response. This can be used to request fields that are not normally returned in a standard response.  Be aware that specifying this parameter will have the effect that none of the standard fields are returned in the response unless explicitly specified, instead only fields for the mini representation are returned, additional to the fields requested.
    * @type {Array<string>}
    * @memberof GroupsApiGroups
    */
    readonly fields?: Array<string>
    
    /**
    * The maximum number of items to return per page.
    * @type {number}
    * @memberof GroupsApiGroups
    */
    readonly limit?: number
    
    /**
    * The offset of the item at which to begin the response.  Queries with offset parameter value exceeding 10000 will be rejected with a 400 response.
    * @type {number}
    * @memberof GroupsApiGroups
    */
    readonly offset?: number
    
}

/**
 * Request parameters for groups_1 operation in GroupsApi.
 * @export
 * @interface GroupsApiGroups0Request
 */
export type GroupsApiGroups0Request = {
    
    /**
    * A comma-separated list of attributes to include in the response. This can be used to request fields that are not normally returned in a standard response.  Be aware that specifying this parameter will have the effect that none of the standard fields are returned in the response unless explicitly specified, instead only fields for the mini representation are returned, additional to the fields requested.
    * @type {Array<string>}
    * @memberof GroupsApiGroups0
    */
    readonly fields?: Array<string>
    
} & PostGroupsRequest

/**
 * Request parameters for remove operation in GroupsApi.
 * @export
 * @interface GroupsApiRemoveRequest
 */
export type GroupsApiRemoveRequest = {
    
    /**
    * The ID of the group.
    * @type {string}
    * @memberof GroupsApiRemove
    */
    readonly groupId: string
    
}

/**
 * Request parameters for updateGroup operation in GroupsApi.
 * @export
 * @interface GroupsApiUpdateGroupRequest
 */
export type GroupsApiUpdateGroupRequest = {
    
    /**
    * The ID of the group.
    * @type {string}
    * @memberof GroupsApiUpdateGroup
    */
    readonly groupId: string
    
    /**
    * A comma-separated list of attributes to include in the response. This can be used to request fields that are not normally returned in a standard response.  Be aware that specifying this parameter will have the effect that none of the standard fields are returned in the response unless explicitly specified, instead only fields for the mini representation are returned, additional to the fields requested.
    * @type {Array<string>}
    * @memberof GroupsApiUpdateGroup
    */
    readonly fields?: Array<string>
    
} & GroupsUpdateGroupRequest

/**
 * GroupsApiGenerated - object-oriented interface
 * @export
 * @class GroupsApiGenerated
 * @extends {BaseAPI}
 */
export class GroupsApiGenerated extends BaseAPI {
    /**
     * Retrieves information about a group. Only members of this group or users with admin-level permissions will be able to use this API.
     * @summary Get group
     * @param {GroupsApiGetInfoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApiGenerated
     */
    public getInfo(requestParameters: GroupsApiGetInfoRequest, options?: AxiosRequestConfig) {
        return GroupsApiFp(this.configuration).getInfo(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves all of the groups for a given enterprise. The user must have admin permissions to inspect enterprise\'s groups.
     * @summary List groups for enterprise
     * @param {GroupsApiGroupsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApiGenerated
     */
    public groups(requestParameters: GroupsApiGroupsRequest = {}, options?: AxiosRequestConfig) {
        return GroupsApiFp(this.configuration).groups(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a new group of users in an enterprise. Only users with admin permissions can create new groups.
     * @summary Create group
     * @param {GroupsApiGroups0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApiGenerated
     */
    public groups_1(requestParameters: GroupsApiGroups0Request, options?: AxiosRequestConfig) {
        return GroupsApiFp(this.configuration).groups_1(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Permanently deletes a group. Only users with admin-level permissions will be able to use this API.
     * @summary Remove group
     * @param {GroupsApiRemoveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApiGenerated
     */
    public remove(requestParameters: GroupsApiRemoveRequest, options?: AxiosRequestConfig) {
        return GroupsApiFp(this.configuration).remove(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates a specific group. Only admins of this group or users with admin-level permissions will be able to use this API.
     * @summary Update group
     * @param {GroupsApiUpdateGroupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApiGenerated
     */
    public updateGroup(requestParameters: GroupsApiUpdateGroupRequest, options?: AxiosRequestConfig) {
        return GroupsApiFp(this.configuration).updateGroup(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
