/* tslint:disable */
/* eslint-disable */
/*
Box Platform API

[Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.

The version of the OpenAPI document: 2.0.0
Contact: devrel@box.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ClientError } from '../models';
// @ts-ignore
import { FolderFull } from '../models';
// @ts-ignore
import { FoldersCreateCopyRequest } from '../models';
// @ts-ignore
import { FoldersCreateCopyRequestParent } from '../models';
// @ts-ignore
import { FoldersUpdateFolderRequest } from '../models';
// @ts-ignore
import { FoldersUpdateFolderRequestFolderUploadEmail } from '../models';
// @ts-ignore
import { FoldersUpdateFolderRequestParent } from '../models';
// @ts-ignore
import { FoldersUpdateFolderRequestSharedLink } from '../models';
// @ts-ignore
import { Items } from '../models';
// @ts-ignore
import { PostFoldersRequest } from '../models';
// @ts-ignore
import { PostFoldersRequestFolderUploadEmail } from '../models';
// @ts-ignore
import { PostFoldersRequestParent } from '../models';
// @ts-ignore
import { Reference2 } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * FoldersApi - axios parameter creator
 * @export
 */
export const FoldersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a copy of a folder within a destination folder.  The original folder will not be changed.
         * @summary Copy folder
         * @param {string} folderId The unique identifier of the folder to copy.  The ID for any folder can be determined by visiting this folder in the web application and copying the ID from the URL. For example, for the URL &#x60;https://_*.app.box.com/folder/123&#x60; the &#x60;folder_id&#x60; is &#x60;123&#x60;.  The root folder with the ID &#x60;0&#x60; can not be copied.
         * @param {Array<string>} [fields] A comma-separated list of attributes to include in the response. This can be used to request fields that are not normally returned in a standard response.  Be aware that specifying this parameter will have the effect that none of the standard fields are returned in the response unless explicitly specified, instead only fields for the mini representation are returned, additional to the fields requested.
         * @param {FoldersCreateCopyRequest} [foldersCreateCopyRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCopy: async (folderId: string, fields?: Array<string>, foldersCreateCopyRequest?: FoldersCreateCopyRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'folderId' is not null or undefined
            assertParamExists('createCopy', 'folderId', folderId)
            const localVarPath = `/folders/{folder_id}/copy`
                .replace(`{${"folder_id"}}`, encodeURIComponent(String(folderId !== undefined ? folderId : `-folder_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2Security required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Security", [], configuration)
            if (fields) {
                localVarQueryParameter['fields'] = fields.join(COLLECTION_FORMATS.csv);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: foldersCreateCopyRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/folders/{folder_id}/copy',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(foldersCreateCopyRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a folder, either permanently or by moving it to the trash.
         * @summary Delete folder
         * @param {string} folderId The unique identifier that represent a folder.  The ID for any folder can be determined by visiting this folder in the web application and copying the ID from the URL. For example, for the URL &#x60;https://_*.app.box.com/folder/123&#x60; the &#x60;folder_id&#x60; is &#x60;123&#x60;.  The root folder of a Box account is always represented by the ID &#x60;0&#x60;.
         * @param {string} [ifMatch] Ensures this item hasn\&#39;t recently changed before making changes.  Pass in the item\&#39;s last observed &#x60;etag&#x60; value into this header and the endpoint will fail with a &#x60;412 Precondition Failed&#x60; if it has changed since.
         * @param {boolean} [recursive] Delete a folder that is not empty by recursively deleting the folder and all of its content.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteById: async (folderId: string, ifMatch?: string, recursive?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'folderId' is not null or undefined
            assertParamExists('deleteById', 'folderId', folderId)
            const localVarPath = `/folders/{folder_id}`
                .replace(`{${"folder_id"}}`, encodeURIComponent(String(folderId !== undefined ? folderId : `-folder_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2Security required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Security", [], configuration)
            if (recursive !== undefined) {
                localVarQueryParameter['recursive'] = recursive;
            }

            if (ifMatch != null) {
                localVarHeaderParameter['if-match'] = String(ifMatch);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/folders/{folder_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a new empty folder within the specified parent folder.
         * @summary Create folder
         * @param {Array<string>} [fields] A comma-separated list of attributes to include in the response. This can be used to request fields that are not normally returned in a standard response.  Be aware that specifying this parameter will have the effect that none of the standard fields are returned in the response unless explicitly specified, instead only fields for the mini representation are returned, additional to the fields requested.
         * @param {PostFoldersRequest} [postFoldersRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        folders: async (fields?: Array<string>, postFoldersRequest?: PostFoldersRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/folders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2Security required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Security", [], configuration)
            if (fields) {
                localVarQueryParameter['fields'] = fields.join(COLLECTION_FORMATS.csv);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: postFoldersRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/folders',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(postFoldersRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves details for a folder, including the first 100 entries in the folder.  Passing `sort`, `direction`, `offset`, and `limit` parameters in query allows you to manage the list of returned [folder items](r://folder--full#param-item-collection).  To fetch more items within the folder, use the [Get items in a folder](e://get-folders-id-items) endpoint.
         * @summary Get folder information
         * @param {string} folderId The unique identifier that represent a folder.  The ID for any folder can be determined by visiting this folder in the web application and copying the ID from the URL. For example, for the URL &#x60;https://_*.app.box.com/folder/123&#x60; the &#x60;folder_id&#x60; is &#x60;123&#x60;.  The root folder of a Box account is always represented by the ID &#x60;0&#x60;.
         * @param {Array<string>} [fields] A comma-separated list of attributes to include in the response. This can be used to request fields that are not normally returned in a standard response.  Be aware that specifying this parameter will have the effect that none of the standard fields are returned in the response unless explicitly specified, instead only fields for the mini representation are returned, additional to the fields requested.  Additionally this field can be used to query any metadata applied to the file by specifying the &#x60;metadata&#x60; field as well as the scope and key of the template to retrieve, for example &#x60;?field&#x3D;metadata.enterprise_12345.contractTemplate&#x60;.
         * @param {string} [ifNoneMatch] Ensures an item is only returned if it has changed.  Pass in the item\&#39;s last observed &#x60;etag&#x60; value into this header and the endpoint will fail with a &#x60;304 Not Modified&#x60; if the item has not changed since.
         * @param {string} [boxapi] The URL, and optional password, for the shared link of this item.  This header can be used to access items that have not been explicitly shared with a user.  Use the format &#x60;shared_link&#x3D;[link]&#x60; or if a password is required then use &#x60;shared_link&#x3D;[link]&amp;shared_link_password&#x3D;[password]&#x60;.  This header can be used on the file or folder shared, as well as on any files or folders nested within the item.
         * @param {'id' | 'name' | 'date' | 'size'} [sort] Defines the **second** attribute by which items are sorted.  The folder type affects the way the items are sorted:    * **Standard folder**:   Items are always sorted by   their &#x60;type&#x60; first, with   folders listed before files,   and files listed   before web links.    * **Root folder**:   This parameter is not supported   for marker-based pagination   on the root folder    (the folder with an &#x60;id&#x60; of &#x60;0&#x60;).    * **Shared folder with parent path   to the associated folder visible to   the collaborator**:   Items are always sorted by   their &#x60;type&#x60; first, with   folders listed before files,   and files listed   before web links.
         * @param {'ASC' | 'DESC'} [direction] The direction to sort results in. This can be either in alphabetical ascending (&#x60;ASC&#x60;) or descending (&#x60;DESC&#x60;) order.
         * @param {number} [offset] The offset of the item at which to begin the response.  Queries with offset parameter value exceeding 10000 will be rejected with a 400 response.
         * @param {number} [limit] The maximum number of items to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFolderDetails: async (folderId: string, fields?: Array<string>, ifNoneMatch?: string, boxapi?: string, sort?: 'id' | 'name' | 'date' | 'size', direction?: 'ASC' | 'DESC', offset?: number, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'folderId' is not null or undefined
            assertParamExists('getFolderDetails', 'folderId', folderId)
            const localVarPath = `/folders/{folder_id}`
                .replace(`{${"folder_id"}}`, encodeURIComponent(String(folderId !== undefined ? folderId : `-folder_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2Security required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Security", [], configuration)
            if (fields) {
                localVarQueryParameter['fields'] = fields.join(COLLECTION_FORMATS.csv);
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (direction !== undefined) {
                localVarQueryParameter['direction'] = direction;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (ifNoneMatch != null) {
                localVarHeaderParameter['if-none-match'] = String(ifNoneMatch);
            }

            if (boxapi != null) {
                localVarHeaderParameter['boxapi'] = String(boxapi);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/folders/{folder_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a page of items in a folder. These items can be files, folders, and web links.  To request more information about the folder itself, like its size, use the [Get a folder](https://raw.githubusercontent.com) endpoint instead.
         * @summary List items in folder
         * @param {string} folderId The unique identifier that represent a folder.  The ID for any folder can be determined by visiting this folder in the web application and copying the ID from the URL. For example, for the URL &#x60;https://_*.app.box.com/folder/123&#x60; the &#x60;folder_id&#x60; is &#x60;123&#x60;.  The root folder of a Box account is always represented by the ID &#x60;0&#x60;.
         * @param {Array<string>} [fields] A comma-separated list of attributes to include in the response. This can be used to request fields that are not normally returned in a standard response.  Be aware that specifying this parameter will have the effect that none of the standard fields are returned in the response unless explicitly specified, instead only fields for the mini representation are returned, additional to the fields requested.  Additionally this field can be used to query any metadata applied to the file by specifying the &#x60;metadata&#x60; field as well as the scope and key of the template to retrieve, for example &#x60;?field&#x3D;metadata.enterprise_12345.contractTemplate&#x60;.
         * @param {boolean} [usemarker] Specifies whether to use marker-based pagination instead of offset-based pagination. Only one pagination method can be used at a time.  By setting this value to true, the API will return a &#x60;marker&#x60; field that can be passed as a parameter to this endpoint to get the next page of the response.
         * @param {string} [marker] Defines the position marker at which to begin returning results. This is used when paginating using marker-based pagination.  This requires &#x60;usemarker&#x60; to be set to &#x60;true&#x60;.
         * @param {number} [offset] The offset of the item at which to begin the response.  Queries with offset parameter value exceeding 10000 will be rejected with a 400 response.
         * @param {number} [limit] The maximum number of items to return per page.
         * @param {string} [boxapi] The URL, and optional password, for the shared link of this item.  This header can be used to access items that have not been explicitly shared with a user.  Use the format &#x60;shared_link&#x3D;[link]&#x60; or if a password is required then use &#x60;shared_link&#x3D;[link]&amp;shared_link_password&#x3D;[password]&#x60;.  This header can be used on the file or folder shared, as well as on any files or folders nested within the item.
         * @param {'id' | 'name' | 'date' | 'size'} [sort] Defines the **second** attribute by which items are sorted.  The folder type affects the way the items are sorted:    * **Standard folder**:   Items are always sorted by   their &#x60;type&#x60; first, with   folders listed before files,   and files listed   before web links.    * **Root folder**:   This parameter is not supported   for marker-based pagination   on the root folder    (the folder with an &#x60;id&#x60; of &#x60;0&#x60;).    * **Shared folder with parent path   to the associated folder visible to   the collaborator**:   Items are always sorted by   their &#x60;type&#x60; first, with   folders listed before files,   and files listed   before web links.
         * @param {'ASC' | 'DESC'} [direction] The direction to sort results in. This can be either in alphabetical ascending (&#x60;ASC&#x60;) or descending (&#x60;DESC&#x60;) order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listItemsInFolder: async (folderId: string, fields?: Array<string>, usemarker?: boolean, marker?: string, offset?: number, limit?: number, boxapi?: string, sort?: 'id' | 'name' | 'date' | 'size', direction?: 'ASC' | 'DESC', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'folderId' is not null or undefined
            assertParamExists('listItemsInFolder', 'folderId', folderId)
            const localVarPath = `/folders/{folder_id}/items`
                .replace(`{${"folder_id"}}`, encodeURIComponent(String(folderId !== undefined ? folderId : `-folder_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2Security required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Security", [], configuration)
            if (fields) {
                localVarQueryParameter['fields'] = fields.join(COLLECTION_FORMATS.csv);
            }

            if (usemarker !== undefined) {
                localVarQueryParameter['usemarker'] = usemarker;
            }

            if (marker !== undefined) {
                localVarQueryParameter['marker'] = marker;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (direction !== undefined) {
                localVarQueryParameter['direction'] = direction;
            }

            if (boxapi != null) {
                localVarHeaderParameter['boxapi'] = String(boxapi);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/folders/{folder_id}/items',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates a folder. This can be also be used to move the folder, create shared links, update collaborations, and more.
         * @summary Update folder
         * @param {string} folderId The unique identifier that represent a folder.  The ID for any folder can be determined by visiting this folder in the web application and copying the ID from the URL. For example, for the URL &#x60;https://_*.app.box.com/folder/123&#x60; the &#x60;folder_id&#x60; is &#x60;123&#x60;.  The root folder of a Box account is always represented by the ID &#x60;0&#x60;.
         * @param {Array<string>} [fields] A comma-separated list of attributes to include in the response. This can be used to request fields that are not normally returned in a standard response.  Be aware that specifying this parameter will have the effect that none of the standard fields are returned in the response unless explicitly specified, instead only fields for the mini representation are returned, additional to the fields requested.
         * @param {string} [ifMatch] Ensures this item hasn\&#39;t recently changed before making changes.  Pass in the item\&#39;s last observed &#x60;etag&#x60; value into this header and the endpoint will fail with a &#x60;412 Precondition Failed&#x60; if it has changed since.
         * @param {FoldersUpdateFolderRequest} [foldersUpdateFolderRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateFolder: async (folderId: string, fields?: Array<string>, ifMatch?: string, foldersUpdateFolderRequest?: FoldersUpdateFolderRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'folderId' is not null or undefined
            assertParamExists('updateFolder', 'folderId', folderId)
            const localVarPath = `/folders/{folder_id}`
                .replace(`{${"folder_id"}}`, encodeURIComponent(String(folderId !== undefined ? folderId : `-folder_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2Security required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Security", [], configuration)
            if (fields) {
                localVarQueryParameter['fields'] = fields.join(COLLECTION_FORMATS.csv);
            }

            if (ifMatch != null) {
                localVarHeaderParameter['if-match'] = String(ifMatch);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: foldersUpdateFolderRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/folders/{folder_id}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(foldersUpdateFolderRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FoldersApi - functional programming interface
 * @export
 */
export const FoldersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FoldersApiAxiosParamCreator(configuration)
    return {
        /**
         * Creates a copy of a folder within a destination folder.  The original folder will not be changed.
         * @summary Copy folder
         * @param {FoldersApiCreateCopyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createCopy(requestParameters: FoldersApiCreateCopyRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FolderFull>> {
            const foldersCreateCopyRequest: FoldersCreateCopyRequest = {
                name: requestParameters.name,
                parent: requestParameters.parent
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createCopy(requestParameters.folderId, requestParameters.fields, foldersCreateCopyRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Deletes a folder, either permanently or by moving it to the trash.
         * @summary Delete folder
         * @param {FoldersApiDeleteByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteById(requestParameters: FoldersApiDeleteByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteById(requestParameters.folderId, requestParameters.ifMatch, requestParameters.recursive, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates a new empty folder within the specified parent folder.
         * @summary Create folder
         * @param {FoldersApiFoldersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async folders(requestParameters: FoldersApiFoldersRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FolderFull>> {
            const postFoldersRequest: PostFoldersRequest = {
                name: requestParameters.name,
                parent: requestParameters.parent,
                folder_upload_email: requestParameters.folder_upload_email,
                sync_state: requestParameters.sync_state
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.folders(requestParameters.fields, postFoldersRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves details for a folder, including the first 100 entries in the folder.  Passing `sort`, `direction`, `offset`, and `limit` parameters in query allows you to manage the list of returned [folder items](r://folder--full#param-item-collection).  To fetch more items within the folder, use the [Get items in a folder](e://get-folders-id-items) endpoint.
         * @summary Get folder information
         * @param {FoldersApiGetFolderDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFolderDetails(requestParameters: FoldersApiGetFolderDetailsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FolderFull>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFolderDetails(requestParameters.folderId, requestParameters.fields, requestParameters.ifNoneMatch, requestParameters.boxapi, requestParameters.sort, requestParameters.direction, requestParameters.offset, requestParameters.limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a page of items in a folder. These items can be files, folders, and web links.  To request more information about the folder itself, like its size, use the [Get a folder](https://raw.githubusercontent.com) endpoint instead.
         * @summary List items in folder
         * @param {FoldersApiListItemsInFolderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listItemsInFolder(requestParameters: FoldersApiListItemsInFolderRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Items>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listItemsInFolder(requestParameters.folderId, requestParameters.fields, requestParameters.usemarker, requestParameters.marker, requestParameters.offset, requestParameters.limit, requestParameters.boxapi, requestParameters.sort, requestParameters.direction, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates a folder. This can be also be used to move the folder, create shared links, update collaborations, and more.
         * @summary Update folder
         * @param {FoldersApiUpdateFolderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateFolder(requestParameters: FoldersApiUpdateFolderRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FolderFull>> {
            const foldersUpdateFolderRequest: FoldersUpdateFolderRequest = {
                tags: requestParameters.tags,
                description: requestParameters.description,
                name: requestParameters.name,
                sync_state: requestParameters.sync_state,
                can_non_owners_invite: requestParameters.can_non_owners_invite,
                parent: requestParameters.parent,
                shared_link: requestParameters.shared_link,
                folder_upload_email: requestParameters.folder_upload_email,
                is_collaboration_restricted_to_enterprise: requestParameters.is_collaboration_restricted_to_enterprise,
                collections: requestParameters.collections,
                can_non_owners_view_collaborators: requestParameters.can_non_owners_view_collaborators
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateFolder(requestParameters.folderId, requestParameters.fields, requestParameters.ifMatch, foldersUpdateFolderRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * FoldersApi - factory interface
 * @export
 */
export const FoldersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FoldersApiFp(configuration)
    return {
        /**
         * Creates a copy of a folder within a destination folder.  The original folder will not be changed.
         * @summary Copy folder
         * @param {FoldersApiCreateCopyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCopy(requestParameters: FoldersApiCreateCopyRequest, options?: AxiosRequestConfig): AxiosPromise<FolderFull> {
            return localVarFp.createCopy(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes a folder, either permanently or by moving it to the trash.
         * @summary Delete folder
         * @param {FoldersApiDeleteByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteById(requestParameters: FoldersApiDeleteByIdRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a new empty folder within the specified parent folder.
         * @summary Create folder
         * @param {FoldersApiFoldersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        folders(requestParameters: FoldersApiFoldersRequest, options?: AxiosRequestConfig): AxiosPromise<FolderFull> {
            return localVarFp.folders(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves details for a folder, including the first 100 entries in the folder.  Passing `sort`, `direction`, `offset`, and `limit` parameters in query allows you to manage the list of returned [folder items](r://folder--full#param-item-collection).  To fetch more items within the folder, use the [Get items in a folder](e://get-folders-id-items) endpoint.
         * @summary Get folder information
         * @param {FoldersApiGetFolderDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFolderDetails(requestParameters: FoldersApiGetFolderDetailsRequest, options?: AxiosRequestConfig): AxiosPromise<FolderFull> {
            return localVarFp.getFolderDetails(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a page of items in a folder. These items can be files, folders, and web links.  To request more information about the folder itself, like its size, use the [Get a folder](https://raw.githubusercontent.com) endpoint instead.
         * @summary List items in folder
         * @param {FoldersApiListItemsInFolderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listItemsInFolder(requestParameters: FoldersApiListItemsInFolderRequest, options?: AxiosRequestConfig): AxiosPromise<Items> {
            return localVarFp.listItemsInFolder(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates a folder. This can be also be used to move the folder, create shared links, update collaborations, and more.
         * @summary Update folder
         * @param {FoldersApiUpdateFolderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateFolder(requestParameters: FoldersApiUpdateFolderRequest, options?: AxiosRequestConfig): AxiosPromise<FolderFull> {
            return localVarFp.updateFolder(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createCopy operation in FoldersApi.
 * @export
 * @interface FoldersApiCreateCopyRequest
 */
export type FoldersApiCreateCopyRequest = {
    
    /**
    * The unique identifier of the folder to copy.  The ID for any folder can be determined by visiting this folder in the web application and copying the ID from the URL. For example, for the URL `https://_*.app.box.com/folder/123` the `folder_id` is `123`.  The root folder with the ID `0` can not be copied.
    * @type {string}
    * @memberof FoldersApiCreateCopy
    */
    readonly folderId: string
    
    /**
    * A comma-separated list of attributes to include in the response. This can be used to request fields that are not normally returned in a standard response.  Be aware that specifying this parameter will have the effect that none of the standard fields are returned in the response unless explicitly specified, instead only fields for the mini representation are returned, additional to the fields requested.
    * @type {Array<string>}
    * @memberof FoldersApiCreateCopy
    */
    readonly fields?: Array<string>
    
} & FoldersCreateCopyRequest

/**
 * Request parameters for deleteById operation in FoldersApi.
 * @export
 * @interface FoldersApiDeleteByIdRequest
 */
export type FoldersApiDeleteByIdRequest = {
    
    /**
    * The unique identifier that represent a folder.  The ID for any folder can be determined by visiting this folder in the web application and copying the ID from the URL. For example, for the URL `https://_*.app.box.com/folder/123` the `folder_id` is `123`.  The root folder of a Box account is always represented by the ID `0`.
    * @type {string}
    * @memberof FoldersApiDeleteById
    */
    readonly folderId: string
    
    /**
    * Ensures this item hasn\'t recently changed before making changes.  Pass in the item\'s last observed `etag` value into this header and the endpoint will fail with a `412 Precondition Failed` if it has changed since.
    * @type {string}
    * @memberof FoldersApiDeleteById
    */
    readonly ifMatch?: string
    
    /**
    * Delete a folder that is not empty by recursively deleting the folder and all of its content.
    * @type {boolean}
    * @memberof FoldersApiDeleteById
    */
    readonly recursive?: boolean
    
}

/**
 * Request parameters for folders operation in FoldersApi.
 * @export
 * @interface FoldersApiFoldersRequest
 */
export type FoldersApiFoldersRequest = {
    
    /**
    * A comma-separated list of attributes to include in the response. This can be used to request fields that are not normally returned in a standard response.  Be aware that specifying this parameter will have the effect that none of the standard fields are returned in the response unless explicitly specified, instead only fields for the mini representation are returned, additional to the fields requested.
    * @type {Array<string>}
    * @memberof FoldersApiFolders
    */
    readonly fields?: Array<string>
    
} & PostFoldersRequest

/**
 * Request parameters for getFolderDetails operation in FoldersApi.
 * @export
 * @interface FoldersApiGetFolderDetailsRequest
 */
export type FoldersApiGetFolderDetailsRequest = {
    
    /**
    * The unique identifier that represent a folder.  The ID for any folder can be determined by visiting this folder in the web application and copying the ID from the URL. For example, for the URL `https://_*.app.box.com/folder/123` the `folder_id` is `123`.  The root folder of a Box account is always represented by the ID `0`.
    * @type {string}
    * @memberof FoldersApiGetFolderDetails
    */
    readonly folderId: string
    
    /**
    * A comma-separated list of attributes to include in the response. This can be used to request fields that are not normally returned in a standard response.  Be aware that specifying this parameter will have the effect that none of the standard fields are returned in the response unless explicitly specified, instead only fields for the mini representation are returned, additional to the fields requested.  Additionally this field can be used to query any metadata applied to the file by specifying the `metadata` field as well as the scope and key of the template to retrieve, for example `?field=metadata.enterprise_12345.contractTemplate`.
    * @type {Array<string>}
    * @memberof FoldersApiGetFolderDetails
    */
    readonly fields?: Array<string>
    
    /**
    * Ensures an item is only returned if it has changed.  Pass in the item\'s last observed `etag` value into this header and the endpoint will fail with a `304 Not Modified` if the item has not changed since.
    * @type {string}
    * @memberof FoldersApiGetFolderDetails
    */
    readonly ifNoneMatch?: string
    
    /**
    * The URL, and optional password, for the shared link of this item.  This header can be used to access items that have not been explicitly shared with a user.  Use the format `shared_link=[link]` or if a password is required then use `shared_link=[link]&shared_link_password=[password]`.  This header can be used on the file or folder shared, as well as on any files or folders nested within the item.
    * @type {string}
    * @memberof FoldersApiGetFolderDetails
    */
    readonly boxapi?: string
    
    /**
    * Defines the **second** attribute by which items are sorted.  The folder type affects the way the items are sorted:    * **Standard folder**:   Items are always sorted by   their `type` first, with   folders listed before files,   and files listed   before web links.    * **Root folder**:   This parameter is not supported   for marker-based pagination   on the root folder    (the folder with an `id` of `0`).    * **Shared folder with parent path   to the associated folder visible to   the collaborator**:   Items are always sorted by   their `type` first, with   folders listed before files,   and files listed   before web links.
    * @type {'id' | 'name' | 'date' | 'size'}
    * @memberof FoldersApiGetFolderDetails
    */
    readonly sort?: 'id' | 'name' | 'date' | 'size'
    
    /**
    * The direction to sort results in. This can be either in alphabetical ascending (`ASC`) or descending (`DESC`) order.
    * @type {'ASC' | 'DESC'}
    * @memberof FoldersApiGetFolderDetails
    */
    readonly direction?: 'ASC' | 'DESC'
    
    /**
    * The offset of the item at which to begin the response.  Queries with offset parameter value exceeding 10000 will be rejected with a 400 response.
    * @type {number}
    * @memberof FoldersApiGetFolderDetails
    */
    readonly offset?: number
    
    /**
    * The maximum number of items to return per page.
    * @type {number}
    * @memberof FoldersApiGetFolderDetails
    */
    readonly limit?: number
    
}

/**
 * Request parameters for listItemsInFolder operation in FoldersApi.
 * @export
 * @interface FoldersApiListItemsInFolderRequest
 */
export type FoldersApiListItemsInFolderRequest = {
    
    /**
    * The unique identifier that represent a folder.  The ID for any folder can be determined by visiting this folder in the web application and copying the ID from the URL. For example, for the URL `https://_*.app.box.com/folder/123` the `folder_id` is `123`.  The root folder of a Box account is always represented by the ID `0`.
    * @type {string}
    * @memberof FoldersApiListItemsInFolder
    */
    readonly folderId: string
    
    /**
    * A comma-separated list of attributes to include in the response. This can be used to request fields that are not normally returned in a standard response.  Be aware that specifying this parameter will have the effect that none of the standard fields are returned in the response unless explicitly specified, instead only fields for the mini representation are returned, additional to the fields requested.  Additionally this field can be used to query any metadata applied to the file by specifying the `metadata` field as well as the scope and key of the template to retrieve, for example `?field=metadata.enterprise_12345.contractTemplate`.
    * @type {Array<string>}
    * @memberof FoldersApiListItemsInFolder
    */
    readonly fields?: Array<string>
    
    /**
    * Specifies whether to use marker-based pagination instead of offset-based pagination. Only one pagination method can be used at a time.  By setting this value to true, the API will return a `marker` field that can be passed as a parameter to this endpoint to get the next page of the response.
    * @type {boolean}
    * @memberof FoldersApiListItemsInFolder
    */
    readonly usemarker?: boolean
    
    /**
    * Defines the position marker at which to begin returning results. This is used when paginating using marker-based pagination.  This requires `usemarker` to be set to `true`.
    * @type {string}
    * @memberof FoldersApiListItemsInFolder
    */
    readonly marker?: string
    
    /**
    * The offset of the item at which to begin the response.  Queries with offset parameter value exceeding 10000 will be rejected with a 400 response.
    * @type {number}
    * @memberof FoldersApiListItemsInFolder
    */
    readonly offset?: number
    
    /**
    * The maximum number of items to return per page.
    * @type {number}
    * @memberof FoldersApiListItemsInFolder
    */
    readonly limit?: number
    
    /**
    * The URL, and optional password, for the shared link of this item.  This header can be used to access items that have not been explicitly shared with a user.  Use the format `shared_link=[link]` or if a password is required then use `shared_link=[link]&shared_link_password=[password]`.  This header can be used on the file or folder shared, as well as on any files or folders nested within the item.
    * @type {string}
    * @memberof FoldersApiListItemsInFolder
    */
    readonly boxapi?: string
    
    /**
    * Defines the **second** attribute by which items are sorted.  The folder type affects the way the items are sorted:    * **Standard folder**:   Items are always sorted by   their `type` first, with   folders listed before files,   and files listed   before web links.    * **Root folder**:   This parameter is not supported   for marker-based pagination   on the root folder    (the folder with an `id` of `0`).    * **Shared folder with parent path   to the associated folder visible to   the collaborator**:   Items are always sorted by   their `type` first, with   folders listed before files,   and files listed   before web links.
    * @type {'id' | 'name' | 'date' | 'size'}
    * @memberof FoldersApiListItemsInFolder
    */
    readonly sort?: 'id' | 'name' | 'date' | 'size'
    
    /**
    * The direction to sort results in. This can be either in alphabetical ascending (`ASC`) or descending (`DESC`) order.
    * @type {'ASC' | 'DESC'}
    * @memberof FoldersApiListItemsInFolder
    */
    readonly direction?: 'ASC' | 'DESC'
    
}

/**
 * Request parameters for updateFolder operation in FoldersApi.
 * @export
 * @interface FoldersApiUpdateFolderRequest
 */
export type FoldersApiUpdateFolderRequest = {
    
    /**
    * The unique identifier that represent a folder.  The ID for any folder can be determined by visiting this folder in the web application and copying the ID from the URL. For example, for the URL `https://_*.app.box.com/folder/123` the `folder_id` is `123`.  The root folder of a Box account is always represented by the ID `0`.
    * @type {string}
    * @memberof FoldersApiUpdateFolder
    */
    readonly folderId: string
    
    /**
    * A comma-separated list of attributes to include in the response. This can be used to request fields that are not normally returned in a standard response.  Be aware that specifying this parameter will have the effect that none of the standard fields are returned in the response unless explicitly specified, instead only fields for the mini representation are returned, additional to the fields requested.
    * @type {Array<string>}
    * @memberof FoldersApiUpdateFolder
    */
    readonly fields?: Array<string>
    
    /**
    * Ensures this item hasn\'t recently changed before making changes.  Pass in the item\'s last observed `etag` value into this header and the endpoint will fail with a `412 Precondition Failed` if it has changed since.
    * @type {string}
    * @memberof FoldersApiUpdateFolder
    */
    readonly ifMatch?: string
    
} & FoldersUpdateFolderRequest

/**
 * FoldersApiGenerated - object-oriented interface
 * @export
 * @class FoldersApiGenerated
 * @extends {BaseAPI}
 */
export class FoldersApiGenerated extends BaseAPI {
    /**
     * Creates a copy of a folder within a destination folder.  The original folder will not be changed.
     * @summary Copy folder
     * @param {FoldersApiCreateCopyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FoldersApiGenerated
     */
    public createCopy(requestParameters: FoldersApiCreateCopyRequest, options?: AxiosRequestConfig) {
        return FoldersApiFp(this.configuration).createCopy(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes a folder, either permanently or by moving it to the trash.
     * @summary Delete folder
     * @param {FoldersApiDeleteByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FoldersApiGenerated
     */
    public deleteById(requestParameters: FoldersApiDeleteByIdRequest, options?: AxiosRequestConfig) {
        return FoldersApiFp(this.configuration).deleteById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a new empty folder within the specified parent folder.
     * @summary Create folder
     * @param {FoldersApiFoldersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FoldersApiGenerated
     */
    public folders(requestParameters: FoldersApiFoldersRequest, options?: AxiosRequestConfig) {
        return FoldersApiFp(this.configuration).folders(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves details for a folder, including the first 100 entries in the folder.  Passing `sort`, `direction`, `offset`, and `limit` parameters in query allows you to manage the list of returned [folder items](r://folder--full#param-item-collection).  To fetch more items within the folder, use the [Get items in a folder](e://get-folders-id-items) endpoint.
     * @summary Get folder information
     * @param {FoldersApiGetFolderDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FoldersApiGenerated
     */
    public getFolderDetails(requestParameters: FoldersApiGetFolderDetailsRequest, options?: AxiosRequestConfig) {
        return FoldersApiFp(this.configuration).getFolderDetails(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a page of items in a folder. These items can be files, folders, and web links.  To request more information about the folder itself, like its size, use the [Get a folder](https://raw.githubusercontent.com) endpoint instead.
     * @summary List items in folder
     * @param {FoldersApiListItemsInFolderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FoldersApiGenerated
     */
    public listItemsInFolder(requestParameters: FoldersApiListItemsInFolderRequest, options?: AxiosRequestConfig) {
        return FoldersApiFp(this.configuration).listItemsInFolder(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates a folder. This can be also be used to move the folder, create shared links, update collaborations, and more.
     * @summary Update folder
     * @param {FoldersApiUpdateFolderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FoldersApiGenerated
     */
    public updateFolder(requestParameters: FoldersApiUpdateFolderRequest, options?: AxiosRequestConfig) {
        return FoldersApiFp(this.configuration).updateFolder(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
