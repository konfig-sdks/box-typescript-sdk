/* tslint:disable */
/* eslint-disable */
/*
Box Platform API

[Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.

The version of the OpenAPI document: 2.0.0
Contact: devrel@box.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ClientError } from '../models';
// @ts-ignore
import { FileVersionLegalHolds } from '../models';
// @ts-ignore
import { LegalHoldPolicyAssignment } from '../models';
// @ts-ignore
import { LegalHoldPolicyAssignments } from '../models';
// @ts-ignore
import { LegalHoldPolicyAssignmentsAssignFileLegalHoldRequest } from '../models';
// @ts-ignore
import { LegalHoldPolicyAssignmentsAssignFileLegalHoldRequestAssignTo } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * LegalHoldPolicyAssignmentsApi - axios parameter creator
 * @export
 */
export const LegalHoldPolicyAssignmentsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Assign a legal hold to a file, file version, folder, or user.
         * @summary Assign legal hold policy
         * @param {LegalHoldPolicyAssignmentsAssignFileLegalHoldRequest} [legalHoldPolicyAssignmentsAssignFileLegalHoldRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assignFileLegalHold: async (legalHoldPolicyAssignmentsAssignFileLegalHoldRequest?: LegalHoldPolicyAssignmentsAssignFileLegalHoldRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/legal_hold_policy_assignments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2Security required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Security", [], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: legalHoldPolicyAssignmentsAssignFileLegalHoldRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/legal_hold_policy_assignments',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(legalHoldPolicyAssignmentsAssignFileLegalHoldRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a legal hold policy assignment.
         * @summary Get legal hold policy assignment
         * @param {string} legalHoldPolicyAssignmentId The ID of the legal hold policy assignment
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssignment: async (legalHoldPolicyAssignmentId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'legalHoldPolicyAssignmentId' is not null or undefined
            assertParamExists('getAssignment', 'legalHoldPolicyAssignmentId', legalHoldPolicyAssignmentId)
            const localVarPath = `/legal_hold_policy_assignments/{legal_hold_policy_assignment_id}`
                .replace(`{${"legal_hold_policy_assignment_id"}}`, encodeURIComponent(String(legalHoldPolicyAssignmentId !== undefined ? legalHoldPolicyAssignmentId : `-legal_hold_policy_assignment_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2Security required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Security", [], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/legal_hold_policy_assignments/{legal_hold_policy_assignment_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a list of items a legal hold policy has been assigned to.
         * @summary List legal hold policy assignments
         * @param {string} policyId The ID of the legal hold policy
         * @param {'file' | 'file_version' | 'folder' | 'user'} [assignToType] Filters the results by the type of item the policy was applied to.
         * @param {string} [assignToId] Filters the results by the ID of item the policy was applied to.
         * @param {string} [marker] Defines the position marker at which to begin returning results. This is used when paginating using marker-based pagination.  This requires &#x60;usemarker&#x60; to be set to &#x60;true&#x60;.
         * @param {number} [limit] The maximum number of items to return per page.
         * @param {Array<string>} [fields] A comma-separated list of attributes to include in the response. This can be used to request fields that are not normally returned in a standard response.  Be aware that specifying this parameter will have the effect that none of the standard fields are returned in the response unless explicitly specified, instead only fields for the mini representation are returned, additional to the fields requested.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getListItems: async (policyId: string, assignToType?: 'file' | 'file_version' | 'folder' | 'user', assignToId?: string, marker?: string, limit?: number, fields?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'policyId' is not null or undefined
            assertParamExists('getListItems', 'policyId', policyId)
            const localVarPath = `/legal_hold_policy_assignments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2Security required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Security", [], configuration)
            if (policyId !== undefined) {
                localVarQueryParameter['policy_id'] = policyId;
            }

            if (assignToType !== undefined) {
                localVarQueryParameter['assign_to_type'] = assignToType;
            }

            if (assignToId !== undefined) {
                localVarQueryParameter['assign_to_id'] = assignToId;
            }

            if (marker !== undefined) {
                localVarQueryParameter['marker'] = marker;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (fields) {
                localVarQueryParameter['fields'] = fields.join(COLLECTION_FORMATS.csv);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/legal_hold_policy_assignments',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of current file versions for a legal hold assignment.  In some cases you may want to get previous file versions instead. In these cases, use the `GET  /legal_hold_policy_assignments/:id/file_versions_on_hold` API instead to return any previous versions of a file for this legal hold policy assignment.  Due to ongoing re-architecture efforts this API might not return all file versions held for this policy ID. Instead, this API will only return the latest file version held in the newly developed architecture. The `GET /file_version_legal_holds` API can be used to fetch current and past versions of files held within the legacy architecture.  The `GET /legal_hold_policy_assignments?policy_id={id}` API can be used to find a list of policy assignments for a given policy ID.
         * @summary List current file versions for legal hold policy assignment
         * @param {string} legalHoldPolicyAssignmentId The ID of the legal hold policy assignment
         * @param {string} [marker] Defines the position marker at which to begin returning results. This is used when paginating using marker-based pagination.  This requires &#x60;usemarker&#x60; to be set to &#x60;true&#x60;.
         * @param {number} [limit] The maximum number of items to return per page.
         * @param {Array<string>} [fields] A comma-separated list of attributes to include in the response. This can be used to request fields that are not normally returned in a standard response.  Be aware that specifying this parameter will have the effect that none of the standard fields are returned in the response unless explicitly specified, instead only fields for the mini representation are returned, additional to the fields requested.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFileVersions: async (legalHoldPolicyAssignmentId: string, marker?: string, limit?: number, fields?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'legalHoldPolicyAssignmentId' is not null or undefined
            assertParamExists('listFileVersions', 'legalHoldPolicyAssignmentId', legalHoldPolicyAssignmentId)
            const localVarPath = `/legal_hold_policy_assignments/{legal_hold_policy_assignment_id}/files_on_hold`
                .replace(`{${"legal_hold_policy_assignment_id"}}`, encodeURIComponent(String(legalHoldPolicyAssignmentId !== undefined ? legalHoldPolicyAssignmentId : `-legal_hold_policy_assignment_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2Security required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Security", [], configuration)
            if (marker !== undefined) {
                localVarQueryParameter['marker'] = marker;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (fields) {
                localVarQueryParameter['fields'] = fields.join(COLLECTION_FORMATS.csv);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/legal_hold_policy_assignments/{legal_hold_policy_assignment_id}/files_on_hold',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of previous file versions for a legal hold assignment.  In some cases you may only need the latest file versions instead. In these cases, use the `GET  /legal_hold_policy_assignments/:id/files_on_hold` API instead to return any current (latest) versions of a file for this legal hold policy assignment.  Due to ongoing re-architecture efforts this API might not return all files held for this policy ID. Instead, this API will only return past file versions held in the newly developed architecture. The `GET /file_version_legal_holds` API can be used to fetch current and past versions of files held within the legacy architecture.  The `GET /legal_hold_policy_assignments?policy_id={id}` API can be used to find a list of policy assignments for a given policy ID.
         * @summary List previous file versions for legal hold policy assignment
         * @param {string} legalHoldPolicyAssignmentId The ID of the legal hold policy assignment
         * @param {string} [marker] Defines the position marker at which to begin returning results. This is used when paginating using marker-based pagination.  This requires &#x60;usemarker&#x60; to be set to &#x60;true&#x60;.
         * @param {number} [limit] The maximum number of items to return per page.
         * @param {Array<string>} [fields] A comma-separated list of attributes to include in the response. This can be used to request fields that are not normally returned in a standard response.  Be aware that specifying this parameter will have the effect that none of the standard fields are returned in the response unless explicitly specified, instead only fields for the mini representation are returned, additional to the fields requested.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPreviousFileVersions: async (legalHoldPolicyAssignmentId: string, marker?: string, limit?: number, fields?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'legalHoldPolicyAssignmentId' is not null or undefined
            assertParamExists('listPreviousFileVersions', 'legalHoldPolicyAssignmentId', legalHoldPolicyAssignmentId)
            const localVarPath = `/legal_hold_policy_assignments/{legal_hold_policy_assignment_id}/file_versions_on_hold`
                .replace(`{${"legal_hold_policy_assignment_id"}}`, encodeURIComponent(String(legalHoldPolicyAssignmentId !== undefined ? legalHoldPolicyAssignmentId : `-legal_hold_policy_assignment_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2Security required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Security", [], configuration)
            if (marker !== undefined) {
                localVarQueryParameter['marker'] = marker;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (fields) {
                localVarQueryParameter['fields'] = fields.join(COLLECTION_FORMATS.csv);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/legal_hold_policy_assignments/{legal_hold_policy_assignment_id}/file_versions_on_hold',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove a legal hold from an item.  This is an asynchronous process. The policy will not be fully removed yet when the response returns.
         * @summary Unassign legal hold policy
         * @param {string} legalHoldPolicyAssignmentId The ID of the legal hold policy assignment
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unassignPolicy: async (legalHoldPolicyAssignmentId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'legalHoldPolicyAssignmentId' is not null or undefined
            assertParamExists('unassignPolicy', 'legalHoldPolicyAssignmentId', legalHoldPolicyAssignmentId)
            const localVarPath = `/legal_hold_policy_assignments/{legal_hold_policy_assignment_id}`
                .replace(`{${"legal_hold_policy_assignment_id"}}`, encodeURIComponent(String(legalHoldPolicyAssignmentId !== undefined ? legalHoldPolicyAssignmentId : `-legal_hold_policy_assignment_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2Security required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Security", [], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/legal_hold_policy_assignments/{legal_hold_policy_assignment_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LegalHoldPolicyAssignmentsApi - functional programming interface
 * @export
 */
export const LegalHoldPolicyAssignmentsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LegalHoldPolicyAssignmentsApiAxiosParamCreator(configuration)
    return {
        /**
         * Assign a legal hold to a file, file version, folder, or user.
         * @summary Assign legal hold policy
         * @param {LegalHoldPolicyAssignmentsApiAssignFileLegalHoldRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async assignFileLegalHold(requestParameters: LegalHoldPolicyAssignmentsApiAssignFileLegalHoldRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LegalHoldPolicyAssignment>> {
            const legalHoldPolicyAssignmentsAssignFileLegalHoldRequest: LegalHoldPolicyAssignmentsAssignFileLegalHoldRequest = {
                policy_id: requestParameters.policy_id,
                assign_to: requestParameters.assign_to
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.assignFileLegalHold(legalHoldPolicyAssignmentsAssignFileLegalHoldRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve a legal hold policy assignment.
         * @summary Get legal hold policy assignment
         * @param {LegalHoldPolicyAssignmentsApiGetAssignmentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAssignment(requestParameters: LegalHoldPolicyAssignmentsApiGetAssignmentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LegalHoldPolicyAssignment>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAssignment(requestParameters.legalHoldPolicyAssignmentId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a list of items a legal hold policy has been assigned to.
         * @summary List legal hold policy assignments
         * @param {LegalHoldPolicyAssignmentsApiGetListItemsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getListItems(requestParameters: LegalHoldPolicyAssignmentsApiGetListItemsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LegalHoldPolicyAssignments>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getListItems(requestParameters.policyId, requestParameters.assignToType, requestParameters.assignToId, requestParameters.marker, requestParameters.limit, requestParameters.fields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a list of current file versions for a legal hold assignment.  In some cases you may want to get previous file versions instead. In these cases, use the `GET  /legal_hold_policy_assignments/:id/file_versions_on_hold` API instead to return any previous versions of a file for this legal hold policy assignment.  Due to ongoing re-architecture efforts this API might not return all file versions held for this policy ID. Instead, this API will only return the latest file version held in the newly developed architecture. The `GET /file_version_legal_holds` API can be used to fetch current and past versions of files held within the legacy architecture.  The `GET /legal_hold_policy_assignments?policy_id={id}` API can be used to find a list of policy assignments for a given policy ID.
         * @summary List current file versions for legal hold policy assignment
         * @param {LegalHoldPolicyAssignmentsApiListFileVersionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listFileVersions(requestParameters: LegalHoldPolicyAssignmentsApiListFileVersionsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FileVersionLegalHolds>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listFileVersions(requestParameters.legalHoldPolicyAssignmentId, requestParameters.marker, requestParameters.limit, requestParameters.fields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a list of previous file versions for a legal hold assignment.  In some cases you may only need the latest file versions instead. In these cases, use the `GET  /legal_hold_policy_assignments/:id/files_on_hold` API instead to return any current (latest) versions of a file for this legal hold policy assignment.  Due to ongoing re-architecture efforts this API might not return all files held for this policy ID. Instead, this API will only return past file versions held in the newly developed architecture. The `GET /file_version_legal_holds` API can be used to fetch current and past versions of files held within the legacy architecture.  The `GET /legal_hold_policy_assignments?policy_id={id}` API can be used to find a list of policy assignments for a given policy ID.
         * @summary List previous file versions for legal hold policy assignment
         * @param {LegalHoldPolicyAssignmentsApiListPreviousFileVersionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listPreviousFileVersions(requestParameters: LegalHoldPolicyAssignmentsApiListPreviousFileVersionsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FileVersionLegalHolds>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listPreviousFileVersions(requestParameters.legalHoldPolicyAssignmentId, requestParameters.marker, requestParameters.limit, requestParameters.fields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Remove a legal hold from an item.  This is an asynchronous process. The policy will not be fully removed yet when the response returns.
         * @summary Unassign legal hold policy
         * @param {LegalHoldPolicyAssignmentsApiUnassignPolicyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async unassignPolicy(requestParameters: LegalHoldPolicyAssignmentsApiUnassignPolicyRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.unassignPolicy(requestParameters.legalHoldPolicyAssignmentId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * LegalHoldPolicyAssignmentsApi - factory interface
 * @export
 */
export const LegalHoldPolicyAssignmentsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LegalHoldPolicyAssignmentsApiFp(configuration)
    return {
        /**
         * Assign a legal hold to a file, file version, folder, or user.
         * @summary Assign legal hold policy
         * @param {LegalHoldPolicyAssignmentsApiAssignFileLegalHoldRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assignFileLegalHold(requestParameters: LegalHoldPolicyAssignmentsApiAssignFileLegalHoldRequest, options?: AxiosRequestConfig): AxiosPromise<LegalHoldPolicyAssignment> {
            return localVarFp.assignFileLegalHold(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a legal hold policy assignment.
         * @summary Get legal hold policy assignment
         * @param {LegalHoldPolicyAssignmentsApiGetAssignmentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssignment(requestParameters: LegalHoldPolicyAssignmentsApiGetAssignmentRequest, options?: AxiosRequestConfig): AxiosPromise<LegalHoldPolicyAssignment> {
            return localVarFp.getAssignment(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a list of items a legal hold policy has been assigned to.
         * @summary List legal hold policy assignments
         * @param {LegalHoldPolicyAssignmentsApiGetListItemsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getListItems(requestParameters: LegalHoldPolicyAssignmentsApiGetListItemsRequest, options?: AxiosRequestConfig): AxiosPromise<LegalHoldPolicyAssignments> {
            return localVarFp.getListItems(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of current file versions for a legal hold assignment.  In some cases you may want to get previous file versions instead. In these cases, use the `GET  /legal_hold_policy_assignments/:id/file_versions_on_hold` API instead to return any previous versions of a file for this legal hold policy assignment.  Due to ongoing re-architecture efforts this API might not return all file versions held for this policy ID. Instead, this API will only return the latest file version held in the newly developed architecture. The `GET /file_version_legal_holds` API can be used to fetch current and past versions of files held within the legacy architecture.  The `GET /legal_hold_policy_assignments?policy_id={id}` API can be used to find a list of policy assignments for a given policy ID.
         * @summary List current file versions for legal hold policy assignment
         * @param {LegalHoldPolicyAssignmentsApiListFileVersionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFileVersions(requestParameters: LegalHoldPolicyAssignmentsApiListFileVersionsRequest, options?: AxiosRequestConfig): AxiosPromise<FileVersionLegalHolds> {
            return localVarFp.listFileVersions(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of previous file versions for a legal hold assignment.  In some cases you may only need the latest file versions instead. In these cases, use the `GET  /legal_hold_policy_assignments/:id/files_on_hold` API instead to return any current (latest) versions of a file for this legal hold policy assignment.  Due to ongoing re-architecture efforts this API might not return all files held for this policy ID. Instead, this API will only return past file versions held in the newly developed architecture. The `GET /file_version_legal_holds` API can be used to fetch current and past versions of files held within the legacy architecture.  The `GET /legal_hold_policy_assignments?policy_id={id}` API can be used to find a list of policy assignments for a given policy ID.
         * @summary List previous file versions for legal hold policy assignment
         * @param {LegalHoldPolicyAssignmentsApiListPreviousFileVersionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPreviousFileVersions(requestParameters: LegalHoldPolicyAssignmentsApiListPreviousFileVersionsRequest, options?: AxiosRequestConfig): AxiosPromise<FileVersionLegalHolds> {
            return localVarFp.listPreviousFileVersions(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove a legal hold from an item.  This is an asynchronous process. The policy will not be fully removed yet when the response returns.
         * @summary Unassign legal hold policy
         * @param {LegalHoldPolicyAssignmentsApiUnassignPolicyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unassignPolicy(requestParameters: LegalHoldPolicyAssignmentsApiUnassignPolicyRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.unassignPolicy(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for assignFileLegalHold operation in LegalHoldPolicyAssignmentsApi.
 * @export
 * @interface LegalHoldPolicyAssignmentsApiAssignFileLegalHoldRequest
 */
export type LegalHoldPolicyAssignmentsApiAssignFileLegalHoldRequest = {
    
} & LegalHoldPolicyAssignmentsAssignFileLegalHoldRequest

/**
 * Request parameters for getAssignment operation in LegalHoldPolicyAssignmentsApi.
 * @export
 * @interface LegalHoldPolicyAssignmentsApiGetAssignmentRequest
 */
export type LegalHoldPolicyAssignmentsApiGetAssignmentRequest = {
    
    /**
    * The ID of the legal hold policy assignment
    * @type {string}
    * @memberof LegalHoldPolicyAssignmentsApiGetAssignment
    */
    readonly legalHoldPolicyAssignmentId: string
    
}

/**
 * Request parameters for getListItems operation in LegalHoldPolicyAssignmentsApi.
 * @export
 * @interface LegalHoldPolicyAssignmentsApiGetListItemsRequest
 */
export type LegalHoldPolicyAssignmentsApiGetListItemsRequest = {
    
    /**
    * The ID of the legal hold policy
    * @type {string}
    * @memberof LegalHoldPolicyAssignmentsApiGetListItems
    */
    readonly policyId: string
    
    /**
    * Filters the results by the type of item the policy was applied to.
    * @type {'file' | 'file_version' | 'folder' | 'user'}
    * @memberof LegalHoldPolicyAssignmentsApiGetListItems
    */
    readonly assignToType?: 'file' | 'file_version' | 'folder' | 'user'
    
    /**
    * Filters the results by the ID of item the policy was applied to.
    * @type {string}
    * @memberof LegalHoldPolicyAssignmentsApiGetListItems
    */
    readonly assignToId?: string
    
    /**
    * Defines the position marker at which to begin returning results. This is used when paginating using marker-based pagination.  This requires `usemarker` to be set to `true`.
    * @type {string}
    * @memberof LegalHoldPolicyAssignmentsApiGetListItems
    */
    readonly marker?: string
    
    /**
    * The maximum number of items to return per page.
    * @type {number}
    * @memberof LegalHoldPolicyAssignmentsApiGetListItems
    */
    readonly limit?: number
    
    /**
    * A comma-separated list of attributes to include in the response. This can be used to request fields that are not normally returned in a standard response.  Be aware that specifying this parameter will have the effect that none of the standard fields are returned in the response unless explicitly specified, instead only fields for the mini representation are returned, additional to the fields requested.
    * @type {Array<string>}
    * @memberof LegalHoldPolicyAssignmentsApiGetListItems
    */
    readonly fields?: Array<string>
    
}

/**
 * Request parameters for listFileVersions operation in LegalHoldPolicyAssignmentsApi.
 * @export
 * @interface LegalHoldPolicyAssignmentsApiListFileVersionsRequest
 */
export type LegalHoldPolicyAssignmentsApiListFileVersionsRequest = {
    
    /**
    * The ID of the legal hold policy assignment
    * @type {string}
    * @memberof LegalHoldPolicyAssignmentsApiListFileVersions
    */
    readonly legalHoldPolicyAssignmentId: string
    
    /**
    * Defines the position marker at which to begin returning results. This is used when paginating using marker-based pagination.  This requires `usemarker` to be set to `true`.
    * @type {string}
    * @memberof LegalHoldPolicyAssignmentsApiListFileVersions
    */
    readonly marker?: string
    
    /**
    * The maximum number of items to return per page.
    * @type {number}
    * @memberof LegalHoldPolicyAssignmentsApiListFileVersions
    */
    readonly limit?: number
    
    /**
    * A comma-separated list of attributes to include in the response. This can be used to request fields that are not normally returned in a standard response.  Be aware that specifying this parameter will have the effect that none of the standard fields are returned in the response unless explicitly specified, instead only fields for the mini representation are returned, additional to the fields requested.
    * @type {Array<string>}
    * @memberof LegalHoldPolicyAssignmentsApiListFileVersions
    */
    readonly fields?: Array<string>
    
}

/**
 * Request parameters for listPreviousFileVersions operation in LegalHoldPolicyAssignmentsApi.
 * @export
 * @interface LegalHoldPolicyAssignmentsApiListPreviousFileVersionsRequest
 */
export type LegalHoldPolicyAssignmentsApiListPreviousFileVersionsRequest = {
    
    /**
    * The ID of the legal hold policy assignment
    * @type {string}
    * @memberof LegalHoldPolicyAssignmentsApiListPreviousFileVersions
    */
    readonly legalHoldPolicyAssignmentId: string
    
    /**
    * Defines the position marker at which to begin returning results. This is used when paginating using marker-based pagination.  This requires `usemarker` to be set to `true`.
    * @type {string}
    * @memberof LegalHoldPolicyAssignmentsApiListPreviousFileVersions
    */
    readonly marker?: string
    
    /**
    * The maximum number of items to return per page.
    * @type {number}
    * @memberof LegalHoldPolicyAssignmentsApiListPreviousFileVersions
    */
    readonly limit?: number
    
    /**
    * A comma-separated list of attributes to include in the response. This can be used to request fields that are not normally returned in a standard response.  Be aware that specifying this parameter will have the effect that none of the standard fields are returned in the response unless explicitly specified, instead only fields for the mini representation are returned, additional to the fields requested.
    * @type {Array<string>}
    * @memberof LegalHoldPolicyAssignmentsApiListPreviousFileVersions
    */
    readonly fields?: Array<string>
    
}

/**
 * Request parameters for unassignPolicy operation in LegalHoldPolicyAssignmentsApi.
 * @export
 * @interface LegalHoldPolicyAssignmentsApiUnassignPolicyRequest
 */
export type LegalHoldPolicyAssignmentsApiUnassignPolicyRequest = {
    
    /**
    * The ID of the legal hold policy assignment
    * @type {string}
    * @memberof LegalHoldPolicyAssignmentsApiUnassignPolicy
    */
    readonly legalHoldPolicyAssignmentId: string
    
}

/**
 * LegalHoldPolicyAssignmentsApiGenerated - object-oriented interface
 * @export
 * @class LegalHoldPolicyAssignmentsApiGenerated
 * @extends {BaseAPI}
 */
export class LegalHoldPolicyAssignmentsApiGenerated extends BaseAPI {
    /**
     * Assign a legal hold to a file, file version, folder, or user.
     * @summary Assign legal hold policy
     * @param {LegalHoldPolicyAssignmentsApiAssignFileLegalHoldRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LegalHoldPolicyAssignmentsApiGenerated
     */
    public assignFileLegalHold(requestParameters: LegalHoldPolicyAssignmentsApiAssignFileLegalHoldRequest, options?: AxiosRequestConfig) {
        return LegalHoldPolicyAssignmentsApiFp(this.configuration).assignFileLegalHold(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a legal hold policy assignment.
     * @summary Get legal hold policy assignment
     * @param {LegalHoldPolicyAssignmentsApiGetAssignmentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LegalHoldPolicyAssignmentsApiGenerated
     */
    public getAssignment(requestParameters: LegalHoldPolicyAssignmentsApiGetAssignmentRequest, options?: AxiosRequestConfig) {
        return LegalHoldPolicyAssignmentsApiFp(this.configuration).getAssignment(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a list of items a legal hold policy has been assigned to.
     * @summary List legal hold policy assignments
     * @param {LegalHoldPolicyAssignmentsApiGetListItemsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LegalHoldPolicyAssignmentsApiGenerated
     */
    public getListItems(requestParameters: LegalHoldPolicyAssignmentsApiGetListItemsRequest, options?: AxiosRequestConfig) {
        return LegalHoldPolicyAssignmentsApiFp(this.configuration).getListItems(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a list of current file versions for a legal hold assignment.  In some cases you may want to get previous file versions instead. In these cases, use the `GET  /legal_hold_policy_assignments/:id/file_versions_on_hold` API instead to return any previous versions of a file for this legal hold policy assignment.  Due to ongoing re-architecture efforts this API might not return all file versions held for this policy ID. Instead, this API will only return the latest file version held in the newly developed architecture. The `GET /file_version_legal_holds` API can be used to fetch current and past versions of files held within the legacy architecture.  The `GET /legal_hold_policy_assignments?policy_id={id}` API can be used to find a list of policy assignments for a given policy ID.
     * @summary List current file versions for legal hold policy assignment
     * @param {LegalHoldPolicyAssignmentsApiListFileVersionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LegalHoldPolicyAssignmentsApiGenerated
     */
    public listFileVersions(requestParameters: LegalHoldPolicyAssignmentsApiListFileVersionsRequest, options?: AxiosRequestConfig) {
        return LegalHoldPolicyAssignmentsApiFp(this.configuration).listFileVersions(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a list of previous file versions for a legal hold assignment.  In some cases you may only need the latest file versions instead. In these cases, use the `GET  /legal_hold_policy_assignments/:id/files_on_hold` API instead to return any current (latest) versions of a file for this legal hold policy assignment.  Due to ongoing re-architecture efforts this API might not return all files held for this policy ID. Instead, this API will only return past file versions held in the newly developed architecture. The `GET /file_version_legal_holds` API can be used to fetch current and past versions of files held within the legacy architecture.  The `GET /legal_hold_policy_assignments?policy_id={id}` API can be used to find a list of policy assignments for a given policy ID.
     * @summary List previous file versions for legal hold policy assignment
     * @param {LegalHoldPolicyAssignmentsApiListPreviousFileVersionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LegalHoldPolicyAssignmentsApiGenerated
     */
    public listPreviousFileVersions(requestParameters: LegalHoldPolicyAssignmentsApiListPreviousFileVersionsRequest, options?: AxiosRequestConfig) {
        return LegalHoldPolicyAssignmentsApiFp(this.configuration).listPreviousFileVersions(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Remove a legal hold from an item.  This is an asynchronous process. The policy will not be fully removed yet when the response returns.
     * @summary Unassign legal hold policy
     * @param {LegalHoldPolicyAssignmentsApiUnassignPolicyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LegalHoldPolicyAssignmentsApiGenerated
     */
    public unassignPolicy(requestParameters: LegalHoldPolicyAssignmentsApiUnassignPolicyRequest, options?: AxiosRequestConfig) {
        return LegalHoldPolicyAssignmentsApiFp(this.configuration).unassignPolicy(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
