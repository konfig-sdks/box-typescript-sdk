/* tslint:disable */
/* eslint-disable */
/*
Box Platform API

[Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.

The version of the OpenAPI document: 2.0.0
Contact: devrel@box.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ClientError } from '../models';
// @ts-ignore
import { CollaborationAllowlistExemptTarget } from '../models';
// @ts-ignore
import { CollaborationAllowlistExemptTargets } from '../models';
// @ts-ignore
import { DomainRestrictionsUserExemptionsCreateUserExemptionFromCollaborationDomainRestrictionsRequest } from '../models';
// @ts-ignore
import { DomainRestrictionsUserExemptionsCreateUserExemptionFromCollaborationDomainRestrictionsRequestUser } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * DomainRestrictionsUserExemptionsApi - axios parameter creator
 * @export
 */
export const DomainRestrictionsUserExemptionsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Exempts a user from the restrictions set out by the allowed list of domains for collaborations.
         * @summary Create user exemption from collaboration domain restrictions
         * @param {DomainRestrictionsUserExemptionsCreateUserExemptionFromCollaborationDomainRestrictionsRequest} [domainRestrictionsUserExemptionsCreateUserExemptionFromCollaborationDomainRestrictionsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUserExemptionFromCollaborationDomainRestrictions: async (domainRestrictionsUserExemptionsCreateUserExemptionFromCollaborationDomainRestrictionsRequest?: DomainRestrictionsUserExemptionsCreateUserExemptionFromCollaborationDomainRestrictionsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/collaboration_whitelist_exempt_targets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2Security required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Security", [], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: domainRestrictionsUserExemptionsCreateUserExemptionFromCollaborationDomainRestrictionsRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/collaboration_whitelist_exempt_targets',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(domainRestrictionsUserExemptionsCreateUserExemptionFromCollaborationDomainRestrictionsRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a users who has been exempt from the collaboration domain restrictions.
         * @summary Get user exempt from collaboration domain restrictions
         * @param {string} collaborationWhitelistExemptTargetId The ID of the exemption to the list.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserExemption: async (collaborationWhitelistExemptTargetId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'collaborationWhitelistExemptTargetId' is not null or undefined
            assertParamExists('getUserExemption', 'collaborationWhitelistExemptTargetId', collaborationWhitelistExemptTargetId)
            const localVarPath = `/collaboration_whitelist_exempt_targets/{collaboration_whitelist_exempt_target_id}`
                .replace(`{${"collaboration_whitelist_exempt_target_id"}}`, encodeURIComponent(String(collaborationWhitelistExemptTargetId !== undefined ? collaborationWhitelistExemptTargetId : `-collaboration_whitelist_exempt_target_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2Security required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Security", [], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/collaboration_whitelist_exempt_targets/{collaboration_whitelist_exempt_target_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of users who have been exempt from the collaboration domain restrictions.
         * @summary List users exempt from collaboration domain restrictions
         * @param {string} [marker] Defines the position marker at which to begin returning results. This is used when paginating using marker-based pagination.  This requires &#x60;usemarker&#x60; to be set to &#x60;true&#x60;.
         * @param {number} [limit] The maximum number of items to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listExemptUsers: async (marker?: string, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/collaboration_whitelist_exempt_targets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2Security required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Security", [], configuration)
            if (marker !== undefined) {
                localVarQueryParameter['marker'] = marker;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/collaboration_whitelist_exempt_targets',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Removes a user\'s exemption from the restrictions set out by the allowed list of domains for collaborations.
         * @summary Remove user from list of users exempt from domain restrictions
         * @param {string} collaborationWhitelistExemptTargetId The ID of the exemption to the list.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeExemption: async (collaborationWhitelistExemptTargetId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'collaborationWhitelistExemptTargetId' is not null or undefined
            assertParamExists('removeExemption', 'collaborationWhitelistExemptTargetId', collaborationWhitelistExemptTargetId)
            const localVarPath = `/collaboration_whitelist_exempt_targets/{collaboration_whitelist_exempt_target_id}`
                .replace(`{${"collaboration_whitelist_exempt_target_id"}}`, encodeURIComponent(String(collaborationWhitelistExemptTargetId !== undefined ? collaborationWhitelistExemptTargetId : `-collaboration_whitelist_exempt_target_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2Security required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Security", [], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/collaboration_whitelist_exempt_targets/{collaboration_whitelist_exempt_target_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DomainRestrictionsUserExemptionsApi - functional programming interface
 * @export
 */
export const DomainRestrictionsUserExemptionsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DomainRestrictionsUserExemptionsApiAxiosParamCreator(configuration)
    return {
        /**
         * Exempts a user from the restrictions set out by the allowed list of domains for collaborations.
         * @summary Create user exemption from collaboration domain restrictions
         * @param {DomainRestrictionsUserExemptionsApiCreateUserExemptionFromCollaborationDomainRestrictionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createUserExemptionFromCollaborationDomainRestrictions(requestParameters: DomainRestrictionsUserExemptionsApiCreateUserExemptionFromCollaborationDomainRestrictionsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CollaborationAllowlistExemptTarget>> {
            const domainRestrictionsUserExemptionsCreateUserExemptionFromCollaborationDomainRestrictionsRequest: DomainRestrictionsUserExemptionsCreateUserExemptionFromCollaborationDomainRestrictionsRequest = {
                user: requestParameters.user
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createUserExemptionFromCollaborationDomainRestrictions(domainRestrictionsUserExemptionsCreateUserExemptionFromCollaborationDomainRestrictionsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a users who has been exempt from the collaboration domain restrictions.
         * @summary Get user exempt from collaboration domain restrictions
         * @param {DomainRestrictionsUserExemptionsApiGetUserExemptionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserExemption(requestParameters: DomainRestrictionsUserExemptionsApiGetUserExemptionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CollaborationAllowlistExemptTarget>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserExemption(requestParameters.collaborationWhitelistExemptTargetId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a list of users who have been exempt from the collaboration domain restrictions.
         * @summary List users exempt from collaboration domain restrictions
         * @param {DomainRestrictionsUserExemptionsApiListExemptUsersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listExemptUsers(requestParameters: DomainRestrictionsUserExemptionsApiListExemptUsersRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CollaborationAllowlistExemptTargets>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listExemptUsers(requestParameters.marker, requestParameters.limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Removes a user\'s exemption from the restrictions set out by the allowed list of domains for collaborations.
         * @summary Remove user from list of users exempt from domain restrictions
         * @param {DomainRestrictionsUserExemptionsApiRemoveExemptionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeExemption(requestParameters: DomainRestrictionsUserExemptionsApiRemoveExemptionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeExemption(requestParameters.collaborationWhitelistExemptTargetId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DomainRestrictionsUserExemptionsApi - factory interface
 * @export
 */
export const DomainRestrictionsUserExemptionsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DomainRestrictionsUserExemptionsApiFp(configuration)
    return {
        /**
         * Exempts a user from the restrictions set out by the allowed list of domains for collaborations.
         * @summary Create user exemption from collaboration domain restrictions
         * @param {DomainRestrictionsUserExemptionsApiCreateUserExemptionFromCollaborationDomainRestrictionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUserExemptionFromCollaborationDomainRestrictions(requestParameters: DomainRestrictionsUserExemptionsApiCreateUserExemptionFromCollaborationDomainRestrictionsRequest, options?: AxiosRequestConfig): AxiosPromise<CollaborationAllowlistExemptTarget> {
            return localVarFp.createUserExemptionFromCollaborationDomainRestrictions(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a users who has been exempt from the collaboration domain restrictions.
         * @summary Get user exempt from collaboration domain restrictions
         * @param {DomainRestrictionsUserExemptionsApiGetUserExemptionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserExemption(requestParameters: DomainRestrictionsUserExemptionsApiGetUserExemptionRequest, options?: AxiosRequestConfig): AxiosPromise<CollaborationAllowlistExemptTarget> {
            return localVarFp.getUserExemption(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of users who have been exempt from the collaboration domain restrictions.
         * @summary List users exempt from collaboration domain restrictions
         * @param {DomainRestrictionsUserExemptionsApiListExemptUsersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listExemptUsers(requestParameters: DomainRestrictionsUserExemptionsApiListExemptUsersRequest = {}, options?: AxiosRequestConfig): AxiosPromise<CollaborationAllowlistExemptTargets> {
            return localVarFp.listExemptUsers(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Removes a user\'s exemption from the restrictions set out by the allowed list of domains for collaborations.
         * @summary Remove user from list of users exempt from domain restrictions
         * @param {DomainRestrictionsUserExemptionsApiRemoveExemptionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeExemption(requestParameters: DomainRestrictionsUserExemptionsApiRemoveExemptionRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.removeExemption(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createUserExemptionFromCollaborationDomainRestrictions operation in DomainRestrictionsUserExemptionsApi.
 * @export
 * @interface DomainRestrictionsUserExemptionsApiCreateUserExemptionFromCollaborationDomainRestrictionsRequest
 */
export type DomainRestrictionsUserExemptionsApiCreateUserExemptionFromCollaborationDomainRestrictionsRequest = {
    
} & DomainRestrictionsUserExemptionsCreateUserExemptionFromCollaborationDomainRestrictionsRequest

/**
 * Request parameters for getUserExemption operation in DomainRestrictionsUserExemptionsApi.
 * @export
 * @interface DomainRestrictionsUserExemptionsApiGetUserExemptionRequest
 */
export type DomainRestrictionsUserExemptionsApiGetUserExemptionRequest = {
    
    /**
    * The ID of the exemption to the list.
    * @type {string}
    * @memberof DomainRestrictionsUserExemptionsApiGetUserExemption
    */
    readonly collaborationWhitelistExemptTargetId: string
    
}

/**
 * Request parameters for listExemptUsers operation in DomainRestrictionsUserExemptionsApi.
 * @export
 * @interface DomainRestrictionsUserExemptionsApiListExemptUsersRequest
 */
export type DomainRestrictionsUserExemptionsApiListExemptUsersRequest = {
    
    /**
    * Defines the position marker at which to begin returning results. This is used when paginating using marker-based pagination.  This requires `usemarker` to be set to `true`.
    * @type {string}
    * @memberof DomainRestrictionsUserExemptionsApiListExemptUsers
    */
    readonly marker?: string
    
    /**
    * The maximum number of items to return per page.
    * @type {number}
    * @memberof DomainRestrictionsUserExemptionsApiListExemptUsers
    */
    readonly limit?: number
    
}

/**
 * Request parameters for removeExemption operation in DomainRestrictionsUserExemptionsApi.
 * @export
 * @interface DomainRestrictionsUserExemptionsApiRemoveExemptionRequest
 */
export type DomainRestrictionsUserExemptionsApiRemoveExemptionRequest = {
    
    /**
    * The ID of the exemption to the list.
    * @type {string}
    * @memberof DomainRestrictionsUserExemptionsApiRemoveExemption
    */
    readonly collaborationWhitelistExemptTargetId: string
    
}

/**
 * DomainRestrictionsUserExemptionsApiGenerated - object-oriented interface
 * @export
 * @class DomainRestrictionsUserExemptionsApiGenerated
 * @extends {BaseAPI}
 */
export class DomainRestrictionsUserExemptionsApiGenerated extends BaseAPI {
    /**
     * Exempts a user from the restrictions set out by the allowed list of domains for collaborations.
     * @summary Create user exemption from collaboration domain restrictions
     * @param {DomainRestrictionsUserExemptionsApiCreateUserExemptionFromCollaborationDomainRestrictionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DomainRestrictionsUserExemptionsApiGenerated
     */
    public createUserExemptionFromCollaborationDomainRestrictions(requestParameters: DomainRestrictionsUserExemptionsApiCreateUserExemptionFromCollaborationDomainRestrictionsRequest, options?: AxiosRequestConfig) {
        return DomainRestrictionsUserExemptionsApiFp(this.configuration).createUserExemptionFromCollaborationDomainRestrictions(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a users who has been exempt from the collaboration domain restrictions.
     * @summary Get user exempt from collaboration domain restrictions
     * @param {DomainRestrictionsUserExemptionsApiGetUserExemptionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DomainRestrictionsUserExemptionsApiGenerated
     */
    public getUserExemption(requestParameters: DomainRestrictionsUserExemptionsApiGetUserExemptionRequest, options?: AxiosRequestConfig) {
        return DomainRestrictionsUserExemptionsApiFp(this.configuration).getUserExemption(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of users who have been exempt from the collaboration domain restrictions.
     * @summary List users exempt from collaboration domain restrictions
     * @param {DomainRestrictionsUserExemptionsApiListExemptUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DomainRestrictionsUserExemptionsApiGenerated
     */
    public listExemptUsers(requestParameters: DomainRestrictionsUserExemptionsApiListExemptUsersRequest = {}, options?: AxiosRequestConfig) {
        return DomainRestrictionsUserExemptionsApiFp(this.configuration).listExemptUsers(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Removes a user\'s exemption from the restrictions set out by the allowed list of domains for collaborations.
     * @summary Remove user from list of users exempt from domain restrictions
     * @param {DomainRestrictionsUserExemptionsApiRemoveExemptionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DomainRestrictionsUserExemptionsApiGenerated
     */
    public removeExemption(requestParameters: DomainRestrictionsUserExemptionsApiRemoveExemptionRequest, options?: AxiosRequestConfig) {
        return DomainRestrictionsUserExemptionsApiFp(this.configuration).removeExemption(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
