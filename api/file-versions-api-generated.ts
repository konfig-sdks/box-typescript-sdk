/* tslint:disable */
/* eslint-disable */
/*
Box Platform API

[Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.

The version of the OpenAPI document: 2.0.0
Contact: devrel@box.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ClientError } from '../models';
// @ts-ignore
import { FileVersionFull } from '../models';
// @ts-ignore
import { FileVersions } from '../models';
// @ts-ignore
import { FileVersionsPromoteFileVersionRequest } from '../models';
// @ts-ignore
import { FileVersionsRestoreVersionRequest } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * FileVersionsApi - axios parameter creator
 * @export
 */
export const FileVersionsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieve a specific version of a file.  Versions are only tracked for Box users with premium accounts.
         * @summary Get file version
         * @param {string} fileId The unique identifier that represents a file.  The ID for any file can be determined by visiting a file in the web application and copying the ID from the URL. For example, for the URL &#x60;https://_*.app.box.com/files/123&#x60; the &#x60;file_id&#x60; is &#x60;123&#x60;.
         * @param {string} fileVersionId The ID of the file version
         * @param {Array<string>} [fields] A comma-separated list of attributes to include in the response. This can be used to request fields that are not normally returned in a standard response.  Be aware that specifying this parameter will have the effect that none of the standard fields are returned in the response unless explicitly specified, instead only fields for the mini representation are returned, additional to the fields requested.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpecificVersion: async (fileId: string, fileVersionId: string, fields?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fileId' is not null or undefined
            assertParamExists('getSpecificVersion', 'fileId', fileId)
            // verify required parameter 'fileVersionId' is not null or undefined
            assertParamExists('getSpecificVersion', 'fileVersionId', fileVersionId)
            const localVarPath = `/files/{file_id}/versions/{file_version_id}`
                .replace(`{${"file_id"}}`, encodeURIComponent(String(fileId !== undefined ? fileId : `-file_id-`)))
                .replace(`{${"file_version_id"}}`, encodeURIComponent(String(fileVersionId !== undefined ? fileVersionId : `-file_version_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2Security required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Security", [], configuration)
            if (fields) {
                localVarQueryParameter['fields'] = fields.join(COLLECTION_FORMATS.csv);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/files/{file_id}/versions/{file_version_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a list of the past versions for a file.  Versions are only tracked by Box users with premium accounts. To fetch the ID of the current version of a file, use the `GET /file/:id` API.
         * @summary List all file versions
         * @param {string} fileId The unique identifier that represents a file.  The ID for any file can be determined by visiting a file in the web application and copying the ID from the URL. For example, for the URL &#x60;https://_*.app.box.com/files/123&#x60; the &#x60;file_id&#x60; is &#x60;123&#x60;.
         * @param {Array<string>} [fields] A comma-separated list of attributes to include in the response. This can be used to request fields that are not normally returned in a standard response.  Be aware that specifying this parameter will have the effect that none of the standard fields are returned in the response unless explicitly specified, instead only fields for the mini representation are returned, additional to the fields requested.
         * @param {number} [limit] The maximum number of items to return per page.
         * @param {number} [offset] The offset of the item at which to begin the response.  Queries with offset parameter value exceeding 10000 will be rejected with a 400 response.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllVersions: async (fileId: string, fields?: Array<string>, limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fileId' is not null or undefined
            assertParamExists('listAllVersions', 'fileId', fileId)
            const localVarPath = `/files/{file_id}/versions`
                .replace(`{${"file_id"}}`, encodeURIComponent(String(fileId !== undefined ? fileId : `-file_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2Security required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Security", [], configuration)
            if (fields) {
                localVarQueryParameter['fields'] = fields.join(COLLECTION_FORMATS.csv);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/files/{file_id}/versions',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Move a file version to the trash.  Versions are only tracked for Box users with premium accounts.
         * @summary Remove file version
         * @param {string} fileId The unique identifier that represents a file.  The ID for any file can be determined by visiting a file in the web application and copying the ID from the URL. For example, for the URL &#x60;https://_*.app.box.com/files/123&#x60; the &#x60;file_id&#x60; is &#x60;123&#x60;.
         * @param {string} fileVersionId The ID of the file version
         * @param {string} [ifMatch] Ensures this item hasn\&#39;t recently changed before making changes.  Pass in the item\&#39;s last observed &#x60;etag&#x60; value into this header and the endpoint will fail with a &#x60;412 Precondition Failed&#x60; if it has changed since.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        moveToTrash: async (fileId: string, fileVersionId: string, ifMatch?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fileId' is not null or undefined
            assertParamExists('moveToTrash', 'fileId', fileId)
            // verify required parameter 'fileVersionId' is not null or undefined
            assertParamExists('moveToTrash', 'fileVersionId', fileVersionId)
            const localVarPath = `/files/{file_id}/versions/{file_version_id}`
                .replace(`{${"file_id"}}`, encodeURIComponent(String(fileId !== undefined ? fileId : `-file_id-`)))
                .replace(`{${"file_version_id"}}`, encodeURIComponent(String(fileVersionId !== undefined ? fileVersionId : `-file_version_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2Security required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Security", [], configuration)
            if (ifMatch != null) {
                localVarHeaderParameter['if-match'] = String(ifMatch);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/files/{file_id}/versions/{file_version_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Promote a specific version of a file.  If previous versions exist, this method can be used to promote one of the older versions to the top of the version history.  This creates a new copy of the old version and puts it at the top of the versions history. The file will have the exact same contents as the older version, with the the same hash digest, `etag`, and name as the original.  Other properties such as comments do not get updated to their former values.  Don\'t use this endpoint to restore Box Notes, as it works with file formats such as PDF, DOC, PPTX or similar.
         * @summary Promote file version
         * @param {string} fileId The unique identifier that represents a file.  The ID for any file can be determined by visiting a file in the web application and copying the ID from the URL. For example, for the URL &#x60;https://_*.app.box.com/files/123&#x60; the &#x60;file_id&#x60; is &#x60;123&#x60;.
         * @param {Array<string>} [fields] A comma-separated list of attributes to include in the response. This can be used to request fields that are not normally returned in a standard response.  Be aware that specifying this parameter will have the effect that none of the standard fields are returned in the response unless explicitly specified, instead only fields for the mini representation are returned, additional to the fields requested.
         * @param {FileVersionsPromoteFileVersionRequest} [fileVersionsPromoteFileVersionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        promoteFileVersion: async (fileId: string, fields?: Array<string>, fileVersionsPromoteFileVersionRequest?: FileVersionsPromoteFileVersionRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fileId' is not null or undefined
            assertParamExists('promoteFileVersion', 'fileId', fileId)
            const localVarPath = `/files/{file_id}/versions/current`
                .replace(`{${"file_id"}}`, encodeURIComponent(String(fileId !== undefined ? fileId : `-file_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2Security required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Security", [], configuration)
            if (fields) {
                localVarQueryParameter['fields'] = fields.join(COLLECTION_FORMATS.csv);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: fileVersionsPromoteFileVersionRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/files/{file_id}/versions/current',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(fileVersionsPromoteFileVersionRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Restores a specific version of a file after it was deleted. Don\'t use this endpoint to restore Box Notes, as it works with file formats such as PDF, DOC, PPTX or similar.
         * @summary Restore file version
         * @param {string} fileId The unique identifier that represents a file.  The ID for any file can be determined by visiting a file in the web application and copying the ID from the URL. For example, for the URL &#x60;https://_*.app.box.com/files/123&#x60; the &#x60;file_id&#x60; is &#x60;123&#x60;.
         * @param {string} fileVersionId The ID of the file version
         * @param {FileVersionsRestoreVersionRequest} [fileVersionsRestoreVersionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        restoreVersion: async (fileId: string, fileVersionId: string, fileVersionsRestoreVersionRequest?: FileVersionsRestoreVersionRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fileId' is not null or undefined
            assertParamExists('restoreVersion', 'fileId', fileId)
            // verify required parameter 'fileVersionId' is not null or undefined
            assertParamExists('restoreVersion', 'fileVersionId', fileVersionId)
            const localVarPath = `/files/{file_id}/versions/{file_version_id}`
                .replace(`{${"file_id"}}`, encodeURIComponent(String(fileId !== undefined ? fileId : `-file_id-`)))
                .replace(`{${"file_version_id"}}`, encodeURIComponent(String(fileVersionId !== undefined ? fileVersionId : `-file_version_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2Security required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Security", [], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: fileVersionsRestoreVersionRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/files/{file_id}/versions/{file_version_id}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(fileVersionsRestoreVersionRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FileVersionsApi - functional programming interface
 * @export
 */
export const FileVersionsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FileVersionsApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieve a specific version of a file.  Versions are only tracked for Box users with premium accounts.
         * @summary Get file version
         * @param {FileVersionsApiGetSpecificVersionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSpecificVersion(requestParameters: FileVersionsApiGetSpecificVersionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FileVersionFull>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSpecificVersion(requestParameters.fileId, requestParameters.fileVersionId, requestParameters.fields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve a list of the past versions for a file.  Versions are only tracked by Box users with premium accounts. To fetch the ID of the current version of a file, use the `GET /file/:id` API.
         * @summary List all file versions
         * @param {FileVersionsApiListAllVersionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAllVersions(requestParameters: FileVersionsApiListAllVersionsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FileVersions>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAllVersions(requestParameters.fileId, requestParameters.fields, requestParameters.limit, requestParameters.offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Move a file version to the trash.  Versions are only tracked for Box users with premium accounts.
         * @summary Remove file version
         * @param {FileVersionsApiMoveToTrashRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async moveToTrash(requestParameters: FileVersionsApiMoveToTrashRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.moveToTrash(requestParameters.fileId, requestParameters.fileVersionId, requestParameters.ifMatch, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Promote a specific version of a file.  If previous versions exist, this method can be used to promote one of the older versions to the top of the version history.  This creates a new copy of the old version and puts it at the top of the versions history. The file will have the exact same contents as the older version, with the the same hash digest, `etag`, and name as the original.  Other properties such as comments do not get updated to their former values.  Don\'t use this endpoint to restore Box Notes, as it works with file formats such as PDF, DOC, PPTX or similar.
         * @summary Promote file version
         * @param {FileVersionsApiPromoteFileVersionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async promoteFileVersion(requestParameters: FileVersionsApiPromoteFileVersionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FileVersionFull>> {
            const fileVersionsPromoteFileVersionRequest: FileVersionsPromoteFileVersionRequest = {
                id: requestParameters.id,
                type: requestParameters.type
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.promoteFileVersion(requestParameters.fileId, requestParameters.fields, fileVersionsPromoteFileVersionRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Restores a specific version of a file after it was deleted. Don\'t use this endpoint to restore Box Notes, as it works with file formats such as PDF, DOC, PPTX or similar.
         * @summary Restore file version
         * @param {FileVersionsApiRestoreVersionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async restoreVersion(requestParameters: FileVersionsApiRestoreVersionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FileVersionFull>> {
            const fileVersionsRestoreVersionRequest: FileVersionsRestoreVersionRequest = {
                trashed_at: requestParameters.trashed_at
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.restoreVersion(requestParameters.fileId, requestParameters.fileVersionId, fileVersionsRestoreVersionRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * FileVersionsApi - factory interface
 * @export
 */
export const FileVersionsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FileVersionsApiFp(configuration)
    return {
        /**
         * Retrieve a specific version of a file.  Versions are only tracked for Box users with premium accounts.
         * @summary Get file version
         * @param {FileVersionsApiGetSpecificVersionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpecificVersion(requestParameters: FileVersionsApiGetSpecificVersionRequest, options?: AxiosRequestConfig): AxiosPromise<FileVersionFull> {
            return localVarFp.getSpecificVersion(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a list of the past versions for a file.  Versions are only tracked by Box users with premium accounts. To fetch the ID of the current version of a file, use the `GET /file/:id` API.
         * @summary List all file versions
         * @param {FileVersionsApiListAllVersionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllVersions(requestParameters: FileVersionsApiListAllVersionsRequest, options?: AxiosRequestConfig): AxiosPromise<FileVersions> {
            return localVarFp.listAllVersions(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Move a file version to the trash.  Versions are only tracked for Box users with premium accounts.
         * @summary Remove file version
         * @param {FileVersionsApiMoveToTrashRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        moveToTrash(requestParameters: FileVersionsApiMoveToTrashRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.moveToTrash(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Promote a specific version of a file.  If previous versions exist, this method can be used to promote one of the older versions to the top of the version history.  This creates a new copy of the old version and puts it at the top of the versions history. The file will have the exact same contents as the older version, with the the same hash digest, `etag`, and name as the original.  Other properties such as comments do not get updated to their former values.  Don\'t use this endpoint to restore Box Notes, as it works with file formats such as PDF, DOC, PPTX or similar.
         * @summary Promote file version
         * @param {FileVersionsApiPromoteFileVersionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        promoteFileVersion(requestParameters: FileVersionsApiPromoteFileVersionRequest, options?: AxiosRequestConfig): AxiosPromise<FileVersionFull> {
            return localVarFp.promoteFileVersion(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Restores a specific version of a file after it was deleted. Don\'t use this endpoint to restore Box Notes, as it works with file formats such as PDF, DOC, PPTX or similar.
         * @summary Restore file version
         * @param {FileVersionsApiRestoreVersionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        restoreVersion(requestParameters: FileVersionsApiRestoreVersionRequest, options?: AxiosRequestConfig): AxiosPromise<FileVersionFull> {
            return localVarFp.restoreVersion(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getSpecificVersion operation in FileVersionsApi.
 * @export
 * @interface FileVersionsApiGetSpecificVersionRequest
 */
export type FileVersionsApiGetSpecificVersionRequest = {
    
    /**
    * The unique identifier that represents a file.  The ID for any file can be determined by visiting a file in the web application and copying the ID from the URL. For example, for the URL `https://_*.app.box.com/files/123` the `file_id` is `123`.
    * @type {string}
    * @memberof FileVersionsApiGetSpecificVersion
    */
    readonly fileId: string
    
    /**
    * The ID of the file version
    * @type {string}
    * @memberof FileVersionsApiGetSpecificVersion
    */
    readonly fileVersionId: string
    
    /**
    * A comma-separated list of attributes to include in the response. This can be used to request fields that are not normally returned in a standard response.  Be aware that specifying this parameter will have the effect that none of the standard fields are returned in the response unless explicitly specified, instead only fields for the mini representation are returned, additional to the fields requested.
    * @type {Array<string>}
    * @memberof FileVersionsApiGetSpecificVersion
    */
    readonly fields?: Array<string>
    
}

/**
 * Request parameters for listAllVersions operation in FileVersionsApi.
 * @export
 * @interface FileVersionsApiListAllVersionsRequest
 */
export type FileVersionsApiListAllVersionsRequest = {
    
    /**
    * The unique identifier that represents a file.  The ID for any file can be determined by visiting a file in the web application and copying the ID from the URL. For example, for the URL `https://_*.app.box.com/files/123` the `file_id` is `123`.
    * @type {string}
    * @memberof FileVersionsApiListAllVersions
    */
    readonly fileId: string
    
    /**
    * A comma-separated list of attributes to include in the response. This can be used to request fields that are not normally returned in a standard response.  Be aware that specifying this parameter will have the effect that none of the standard fields are returned in the response unless explicitly specified, instead only fields for the mini representation are returned, additional to the fields requested.
    * @type {Array<string>}
    * @memberof FileVersionsApiListAllVersions
    */
    readonly fields?: Array<string>
    
    /**
    * The maximum number of items to return per page.
    * @type {number}
    * @memberof FileVersionsApiListAllVersions
    */
    readonly limit?: number
    
    /**
    * The offset of the item at which to begin the response.  Queries with offset parameter value exceeding 10000 will be rejected with a 400 response.
    * @type {number}
    * @memberof FileVersionsApiListAllVersions
    */
    readonly offset?: number
    
}

/**
 * Request parameters for moveToTrash operation in FileVersionsApi.
 * @export
 * @interface FileVersionsApiMoveToTrashRequest
 */
export type FileVersionsApiMoveToTrashRequest = {
    
    /**
    * The unique identifier that represents a file.  The ID for any file can be determined by visiting a file in the web application and copying the ID from the URL. For example, for the URL `https://_*.app.box.com/files/123` the `file_id` is `123`.
    * @type {string}
    * @memberof FileVersionsApiMoveToTrash
    */
    readonly fileId: string
    
    /**
    * The ID of the file version
    * @type {string}
    * @memberof FileVersionsApiMoveToTrash
    */
    readonly fileVersionId: string
    
    /**
    * Ensures this item hasn\'t recently changed before making changes.  Pass in the item\'s last observed `etag` value into this header and the endpoint will fail with a `412 Precondition Failed` if it has changed since.
    * @type {string}
    * @memberof FileVersionsApiMoveToTrash
    */
    readonly ifMatch?: string
    
}

/**
 * Request parameters for promoteFileVersion operation in FileVersionsApi.
 * @export
 * @interface FileVersionsApiPromoteFileVersionRequest
 */
export type FileVersionsApiPromoteFileVersionRequest = {
    
    /**
    * The unique identifier that represents a file.  The ID for any file can be determined by visiting a file in the web application and copying the ID from the URL. For example, for the URL `https://_*.app.box.com/files/123` the `file_id` is `123`.
    * @type {string}
    * @memberof FileVersionsApiPromoteFileVersion
    */
    readonly fileId: string
    
    /**
    * A comma-separated list of attributes to include in the response. This can be used to request fields that are not normally returned in a standard response.  Be aware that specifying this parameter will have the effect that none of the standard fields are returned in the response unless explicitly specified, instead only fields for the mini representation are returned, additional to the fields requested.
    * @type {Array<string>}
    * @memberof FileVersionsApiPromoteFileVersion
    */
    readonly fields?: Array<string>
    
} & FileVersionsPromoteFileVersionRequest

/**
 * Request parameters for restoreVersion operation in FileVersionsApi.
 * @export
 * @interface FileVersionsApiRestoreVersionRequest
 */
export type FileVersionsApiRestoreVersionRequest = {
    
    /**
    * The unique identifier that represents a file.  The ID for any file can be determined by visiting a file in the web application and copying the ID from the URL. For example, for the URL `https://_*.app.box.com/files/123` the `file_id` is `123`.
    * @type {string}
    * @memberof FileVersionsApiRestoreVersion
    */
    readonly fileId: string
    
    /**
    * The ID of the file version
    * @type {string}
    * @memberof FileVersionsApiRestoreVersion
    */
    readonly fileVersionId: string
    
} & FileVersionsRestoreVersionRequest

/**
 * FileVersionsApiGenerated - object-oriented interface
 * @export
 * @class FileVersionsApiGenerated
 * @extends {BaseAPI}
 */
export class FileVersionsApiGenerated extends BaseAPI {
    /**
     * Retrieve a specific version of a file.  Versions are only tracked for Box users with premium accounts.
     * @summary Get file version
     * @param {FileVersionsApiGetSpecificVersionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileVersionsApiGenerated
     */
    public getSpecificVersion(requestParameters: FileVersionsApiGetSpecificVersionRequest, options?: AxiosRequestConfig) {
        return FileVersionsApiFp(this.configuration).getSpecificVersion(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a list of the past versions for a file.  Versions are only tracked by Box users with premium accounts. To fetch the ID of the current version of a file, use the `GET /file/:id` API.
     * @summary List all file versions
     * @param {FileVersionsApiListAllVersionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileVersionsApiGenerated
     */
    public listAllVersions(requestParameters: FileVersionsApiListAllVersionsRequest, options?: AxiosRequestConfig) {
        return FileVersionsApiFp(this.configuration).listAllVersions(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Move a file version to the trash.  Versions are only tracked for Box users with premium accounts.
     * @summary Remove file version
     * @param {FileVersionsApiMoveToTrashRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileVersionsApiGenerated
     */
    public moveToTrash(requestParameters: FileVersionsApiMoveToTrashRequest, options?: AxiosRequestConfig) {
        return FileVersionsApiFp(this.configuration).moveToTrash(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Promote a specific version of a file.  If previous versions exist, this method can be used to promote one of the older versions to the top of the version history.  This creates a new copy of the old version and puts it at the top of the versions history. The file will have the exact same contents as the older version, with the the same hash digest, `etag`, and name as the original.  Other properties such as comments do not get updated to their former values.  Don\'t use this endpoint to restore Box Notes, as it works with file formats such as PDF, DOC, PPTX or similar.
     * @summary Promote file version
     * @param {FileVersionsApiPromoteFileVersionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileVersionsApiGenerated
     */
    public promoteFileVersion(requestParameters: FileVersionsApiPromoteFileVersionRequest, options?: AxiosRequestConfig) {
        return FileVersionsApiFp(this.configuration).promoteFileVersion(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Restores a specific version of a file after it was deleted. Don\'t use this endpoint to restore Box Notes, as it works with file formats such as PDF, DOC, PPTX or similar.
     * @summary Restore file version
     * @param {FileVersionsApiRestoreVersionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileVersionsApiGenerated
     */
    public restoreVersion(requestParameters: FileVersionsApiRestoreVersionRequest, options?: AxiosRequestConfig) {
        return FileVersionsApiFp(this.configuration).restoreVersion(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
