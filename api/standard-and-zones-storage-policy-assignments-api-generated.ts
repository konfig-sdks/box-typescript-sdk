/* tslint:disable */
/* eslint-disable */
/*
Box Platform API

[Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.

The version of the OpenAPI document: 2.0.0
Contact: devrel@box.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ClientError } from '../models';
// @ts-ignore
import { StandardAndZonesStoragePolicyAssignmentsCreateAssignmentRequest } from '../models';
// @ts-ignore
import { StandardAndZonesStoragePolicyAssignmentsCreateAssignmentRequestAssignedTo } from '../models';
// @ts-ignore
import { StandardAndZonesStoragePolicyAssignmentsCreateAssignmentRequestStoragePolicy } from '../models';
// @ts-ignore
import { StandardAndZonesStoragePolicyAssignmentsUpdateSpecificAssignmentRequest } from '../models';
// @ts-ignore
import { StandardAndZonesStoragePolicyAssignmentsUpdateSpecificAssignmentRequestStoragePolicy } from '../models';
// @ts-ignore
import { StoragePolicyAssignment } from '../models';
// @ts-ignore
import { StoragePolicyAssignments } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * StandardAndZonesStoragePolicyAssignmentsApi - axios parameter creator
 * @export
 */
export const StandardAndZonesStoragePolicyAssignmentsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a storage policy assignment for an enterprise or user.
         * @summary Assign storage policy
         * @param {StandardAndZonesStoragePolicyAssignmentsCreateAssignmentRequest} [standardAndZonesStoragePolicyAssignmentsCreateAssignmentRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAssignment: async (standardAndZonesStoragePolicyAssignmentsCreateAssignmentRequest?: StandardAndZonesStoragePolicyAssignmentsCreateAssignmentRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/storage_policy_assignments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2Security required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Security", [], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: standardAndZonesStoragePolicyAssignmentsCreateAssignmentRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/storage_policy_assignments',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(standardAndZonesStoragePolicyAssignmentsCreateAssignmentRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetches a specific storage policy assignment.
         * @summary Get storage policy assignment
         * @param {string} storagePolicyAssignmentId The ID of the storage policy assignment.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpecificAssignment: async (storagePolicyAssignmentId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'storagePolicyAssignmentId' is not null or undefined
            assertParamExists('getSpecificAssignment', 'storagePolicyAssignmentId', storagePolicyAssignmentId)
            const localVarPath = `/storage_policy_assignments/{storage_policy_assignment_id}`
                .replace(`{${"storage_policy_assignment_id"}}`, encodeURIComponent(String(storagePolicyAssignmentId !== undefined ? storagePolicyAssignmentId : `-storage_policy_assignment_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2Security required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Security", [], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/storage_policy_assignments/{storage_policy_assignment_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetches all the storage policy assignment for an enterprise or user.
         * @summary List storage policy assignments
         * @param {'user' | 'enterprise'} resolvedForType The target type to return assignments for
         * @param {string} resolvedForId The ID of the user or enterprise to return assignments for
         * @param {string} [marker] Defines the position marker at which to begin returning results. This is used when paginating using marker-based pagination.  This requires &#x60;usemarker&#x60; to be set to &#x60;true&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssignments: async (resolvedForType: 'user' | 'enterprise', resolvedForId: string, marker?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'resolvedForType' is not null or undefined
            assertParamExists('listAssignments', 'resolvedForType', resolvedForType)
            // verify required parameter 'resolvedForId' is not null or undefined
            assertParamExists('listAssignments', 'resolvedForId', resolvedForId)
            const localVarPath = `/storage_policy_assignments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2Security required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Security", [], configuration)
            if (marker !== undefined) {
                localVarQueryParameter['marker'] = marker;
            }

            if (resolvedForType !== undefined) {
                localVarQueryParameter['resolved_for_type'] = resolvedForType;
            }

            if (resolvedForId !== undefined) {
                localVarQueryParameter['resolved_for_id'] = resolvedForId;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/storage_policy_assignments',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a storage policy assignment.  Deleting a storage policy assignment on a user will have the user inherit the enterprise\'s default storage policy.  There is a rate limit for calling this endpoint of only twice per user in a 24 hour time frame.
         * @summary Unassign storage policy
         * @param {string} storagePolicyAssignmentId The ID of the storage policy assignment.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unassignStoragePolicy: async (storagePolicyAssignmentId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'storagePolicyAssignmentId' is not null or undefined
            assertParamExists('unassignStoragePolicy', 'storagePolicyAssignmentId', storagePolicyAssignmentId)
            const localVarPath = `/storage_policy_assignments/{storage_policy_assignment_id}`
                .replace(`{${"storage_policy_assignment_id"}}`, encodeURIComponent(String(storagePolicyAssignmentId !== undefined ? storagePolicyAssignmentId : `-storage_policy_assignment_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2Security required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Security", [], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/storage_policy_assignments/{storage_policy_assignment_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates a specific storage policy assignment.
         * @summary Update storage policy assignment
         * @param {string} storagePolicyAssignmentId The ID of the storage policy assignment.
         * @param {StandardAndZonesStoragePolicyAssignmentsUpdateSpecificAssignmentRequest} [standardAndZonesStoragePolicyAssignmentsUpdateSpecificAssignmentRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSpecificAssignment: async (storagePolicyAssignmentId: string, standardAndZonesStoragePolicyAssignmentsUpdateSpecificAssignmentRequest?: StandardAndZonesStoragePolicyAssignmentsUpdateSpecificAssignmentRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'storagePolicyAssignmentId' is not null or undefined
            assertParamExists('updateSpecificAssignment', 'storagePolicyAssignmentId', storagePolicyAssignmentId)
            const localVarPath = `/storage_policy_assignments/{storage_policy_assignment_id}`
                .replace(`{${"storage_policy_assignment_id"}}`, encodeURIComponent(String(storagePolicyAssignmentId !== undefined ? storagePolicyAssignmentId : `-storage_policy_assignment_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2Security required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Security", [], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: standardAndZonesStoragePolicyAssignmentsUpdateSpecificAssignmentRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/storage_policy_assignments/{storage_policy_assignment_id}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(standardAndZonesStoragePolicyAssignmentsUpdateSpecificAssignmentRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StandardAndZonesStoragePolicyAssignmentsApi - functional programming interface
 * @export
 */
export const StandardAndZonesStoragePolicyAssignmentsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = StandardAndZonesStoragePolicyAssignmentsApiAxiosParamCreator(configuration)
    return {
        /**
         * Creates a storage policy assignment for an enterprise or user.
         * @summary Assign storage policy
         * @param {StandardAndZonesStoragePolicyAssignmentsApiCreateAssignmentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAssignment(requestParameters: StandardAndZonesStoragePolicyAssignmentsApiCreateAssignmentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StoragePolicyAssignment>> {
            const standardAndZonesStoragePolicyAssignmentsCreateAssignmentRequest: StandardAndZonesStoragePolicyAssignmentsCreateAssignmentRequest = {
                storage_policy: requestParameters.storage_policy,
                assigned_to: requestParameters.assigned_to
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createAssignment(standardAndZonesStoragePolicyAssignmentsCreateAssignmentRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Fetches a specific storage policy assignment.
         * @summary Get storage policy assignment
         * @param {StandardAndZonesStoragePolicyAssignmentsApiGetSpecificAssignmentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSpecificAssignment(requestParameters: StandardAndZonesStoragePolicyAssignmentsApiGetSpecificAssignmentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StoragePolicyAssignment>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSpecificAssignment(requestParameters.storagePolicyAssignmentId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Fetches all the storage policy assignment for an enterprise or user.
         * @summary List storage policy assignments
         * @param {StandardAndZonesStoragePolicyAssignmentsApiListAssignmentsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAssignments(requestParameters: StandardAndZonesStoragePolicyAssignmentsApiListAssignmentsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StoragePolicyAssignments>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAssignments(requestParameters.resolvedForType, requestParameters.resolvedForId, requestParameters.marker, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete a storage policy assignment.  Deleting a storage policy assignment on a user will have the user inherit the enterprise\'s default storage policy.  There is a rate limit for calling this endpoint of only twice per user in a 24 hour time frame.
         * @summary Unassign storage policy
         * @param {StandardAndZonesStoragePolicyAssignmentsApiUnassignStoragePolicyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async unassignStoragePolicy(requestParameters: StandardAndZonesStoragePolicyAssignmentsApiUnassignStoragePolicyRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.unassignStoragePolicy(requestParameters.storagePolicyAssignmentId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates a specific storage policy assignment.
         * @summary Update storage policy assignment
         * @param {StandardAndZonesStoragePolicyAssignmentsApiUpdateSpecificAssignmentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSpecificAssignment(requestParameters: StandardAndZonesStoragePolicyAssignmentsApiUpdateSpecificAssignmentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StoragePolicyAssignment>> {
            const standardAndZonesStoragePolicyAssignmentsUpdateSpecificAssignmentRequest: StandardAndZonesStoragePolicyAssignmentsUpdateSpecificAssignmentRequest = {
                storage_policy: requestParameters.storage_policy
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateSpecificAssignment(requestParameters.storagePolicyAssignmentId, standardAndZonesStoragePolicyAssignmentsUpdateSpecificAssignmentRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * StandardAndZonesStoragePolicyAssignmentsApi - factory interface
 * @export
 */
export const StandardAndZonesStoragePolicyAssignmentsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = StandardAndZonesStoragePolicyAssignmentsApiFp(configuration)
    return {
        /**
         * Creates a storage policy assignment for an enterprise or user.
         * @summary Assign storage policy
         * @param {StandardAndZonesStoragePolicyAssignmentsApiCreateAssignmentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAssignment(requestParameters: StandardAndZonesStoragePolicyAssignmentsApiCreateAssignmentRequest, options?: AxiosRequestConfig): AxiosPromise<StoragePolicyAssignment> {
            return localVarFp.createAssignment(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetches a specific storage policy assignment.
         * @summary Get storage policy assignment
         * @param {StandardAndZonesStoragePolicyAssignmentsApiGetSpecificAssignmentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpecificAssignment(requestParameters: StandardAndZonesStoragePolicyAssignmentsApiGetSpecificAssignmentRequest, options?: AxiosRequestConfig): AxiosPromise<StoragePolicyAssignment> {
            return localVarFp.getSpecificAssignment(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetches all the storage policy assignment for an enterprise or user.
         * @summary List storage policy assignments
         * @param {StandardAndZonesStoragePolicyAssignmentsApiListAssignmentsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssignments(requestParameters: StandardAndZonesStoragePolicyAssignmentsApiListAssignmentsRequest, options?: AxiosRequestConfig): AxiosPromise<StoragePolicyAssignments> {
            return localVarFp.listAssignments(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a storage policy assignment.  Deleting a storage policy assignment on a user will have the user inherit the enterprise\'s default storage policy.  There is a rate limit for calling this endpoint of only twice per user in a 24 hour time frame.
         * @summary Unassign storage policy
         * @param {StandardAndZonesStoragePolicyAssignmentsApiUnassignStoragePolicyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unassignStoragePolicy(requestParameters: StandardAndZonesStoragePolicyAssignmentsApiUnassignStoragePolicyRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.unassignStoragePolicy(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates a specific storage policy assignment.
         * @summary Update storage policy assignment
         * @param {StandardAndZonesStoragePolicyAssignmentsApiUpdateSpecificAssignmentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSpecificAssignment(requestParameters: StandardAndZonesStoragePolicyAssignmentsApiUpdateSpecificAssignmentRequest, options?: AxiosRequestConfig): AxiosPromise<StoragePolicyAssignment> {
            return localVarFp.updateSpecificAssignment(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createAssignment operation in StandardAndZonesStoragePolicyAssignmentsApi.
 * @export
 * @interface StandardAndZonesStoragePolicyAssignmentsApiCreateAssignmentRequest
 */
export type StandardAndZonesStoragePolicyAssignmentsApiCreateAssignmentRequest = {
    
} & StandardAndZonesStoragePolicyAssignmentsCreateAssignmentRequest

/**
 * Request parameters for getSpecificAssignment operation in StandardAndZonesStoragePolicyAssignmentsApi.
 * @export
 * @interface StandardAndZonesStoragePolicyAssignmentsApiGetSpecificAssignmentRequest
 */
export type StandardAndZonesStoragePolicyAssignmentsApiGetSpecificAssignmentRequest = {
    
    /**
    * The ID of the storage policy assignment.
    * @type {string}
    * @memberof StandardAndZonesStoragePolicyAssignmentsApiGetSpecificAssignment
    */
    readonly storagePolicyAssignmentId: string
    
}

/**
 * Request parameters for listAssignments operation in StandardAndZonesStoragePolicyAssignmentsApi.
 * @export
 * @interface StandardAndZonesStoragePolicyAssignmentsApiListAssignmentsRequest
 */
export type StandardAndZonesStoragePolicyAssignmentsApiListAssignmentsRequest = {
    
    /**
    * The target type to return assignments for
    * @type {'user' | 'enterprise'}
    * @memberof StandardAndZonesStoragePolicyAssignmentsApiListAssignments
    */
    readonly resolvedForType: 'user' | 'enterprise'
    
    /**
    * The ID of the user or enterprise to return assignments for
    * @type {string}
    * @memberof StandardAndZonesStoragePolicyAssignmentsApiListAssignments
    */
    readonly resolvedForId: string
    
    /**
    * Defines the position marker at which to begin returning results. This is used when paginating using marker-based pagination.  This requires `usemarker` to be set to `true`.
    * @type {string}
    * @memberof StandardAndZonesStoragePolicyAssignmentsApiListAssignments
    */
    readonly marker?: string
    
}

/**
 * Request parameters for unassignStoragePolicy operation in StandardAndZonesStoragePolicyAssignmentsApi.
 * @export
 * @interface StandardAndZonesStoragePolicyAssignmentsApiUnassignStoragePolicyRequest
 */
export type StandardAndZonesStoragePolicyAssignmentsApiUnassignStoragePolicyRequest = {
    
    /**
    * The ID of the storage policy assignment.
    * @type {string}
    * @memberof StandardAndZonesStoragePolicyAssignmentsApiUnassignStoragePolicy
    */
    readonly storagePolicyAssignmentId: string
    
}

/**
 * Request parameters for updateSpecificAssignment operation in StandardAndZonesStoragePolicyAssignmentsApi.
 * @export
 * @interface StandardAndZonesStoragePolicyAssignmentsApiUpdateSpecificAssignmentRequest
 */
export type StandardAndZonesStoragePolicyAssignmentsApiUpdateSpecificAssignmentRequest = {
    
    /**
    * The ID of the storage policy assignment.
    * @type {string}
    * @memberof StandardAndZonesStoragePolicyAssignmentsApiUpdateSpecificAssignment
    */
    readonly storagePolicyAssignmentId: string
    
} & StandardAndZonesStoragePolicyAssignmentsUpdateSpecificAssignmentRequest

/**
 * StandardAndZonesStoragePolicyAssignmentsApiGenerated - object-oriented interface
 * @export
 * @class StandardAndZonesStoragePolicyAssignmentsApiGenerated
 * @extends {BaseAPI}
 */
export class StandardAndZonesStoragePolicyAssignmentsApiGenerated extends BaseAPI {
    /**
     * Creates a storage policy assignment for an enterprise or user.
     * @summary Assign storage policy
     * @param {StandardAndZonesStoragePolicyAssignmentsApiCreateAssignmentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StandardAndZonesStoragePolicyAssignmentsApiGenerated
     */
    public createAssignment(requestParameters: StandardAndZonesStoragePolicyAssignmentsApiCreateAssignmentRequest, options?: AxiosRequestConfig) {
        return StandardAndZonesStoragePolicyAssignmentsApiFp(this.configuration).createAssignment(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetches a specific storage policy assignment.
     * @summary Get storage policy assignment
     * @param {StandardAndZonesStoragePolicyAssignmentsApiGetSpecificAssignmentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StandardAndZonesStoragePolicyAssignmentsApiGenerated
     */
    public getSpecificAssignment(requestParameters: StandardAndZonesStoragePolicyAssignmentsApiGetSpecificAssignmentRequest, options?: AxiosRequestConfig) {
        return StandardAndZonesStoragePolicyAssignmentsApiFp(this.configuration).getSpecificAssignment(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetches all the storage policy assignment for an enterprise or user.
     * @summary List storage policy assignments
     * @param {StandardAndZonesStoragePolicyAssignmentsApiListAssignmentsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StandardAndZonesStoragePolicyAssignmentsApiGenerated
     */
    public listAssignments(requestParameters: StandardAndZonesStoragePolicyAssignmentsApiListAssignmentsRequest, options?: AxiosRequestConfig) {
        return StandardAndZonesStoragePolicyAssignmentsApiFp(this.configuration).listAssignments(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a storage policy assignment.  Deleting a storage policy assignment on a user will have the user inherit the enterprise\'s default storage policy.  There is a rate limit for calling this endpoint of only twice per user in a 24 hour time frame.
     * @summary Unassign storage policy
     * @param {StandardAndZonesStoragePolicyAssignmentsApiUnassignStoragePolicyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StandardAndZonesStoragePolicyAssignmentsApiGenerated
     */
    public unassignStoragePolicy(requestParameters: StandardAndZonesStoragePolicyAssignmentsApiUnassignStoragePolicyRequest, options?: AxiosRequestConfig) {
        return StandardAndZonesStoragePolicyAssignmentsApiFp(this.configuration).unassignStoragePolicy(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates a specific storage policy assignment.
     * @summary Update storage policy assignment
     * @param {StandardAndZonesStoragePolicyAssignmentsApiUpdateSpecificAssignmentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StandardAndZonesStoragePolicyAssignmentsApiGenerated
     */
    public updateSpecificAssignment(requestParameters: StandardAndZonesStoragePolicyAssignmentsApiUpdateSpecificAssignmentRequest, options?: AxiosRequestConfig) {
        return StandardAndZonesStoragePolicyAssignmentsApiFp(this.configuration).updateSpecificAssignment(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
