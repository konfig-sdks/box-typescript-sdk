/* tslint:disable */
/* eslint-disable */
/*
Box Platform API

[Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.

The version of the OpenAPI document: 2.0.0
Contact: devrel@box.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ClientError } from '../models';
// @ts-ignore
import { PostUsersRequest } from '../models';
// @ts-ignore
import { TrackingCode } from '../models';
// @ts-ignore
import { UserFull } from '../models';
// @ts-ignore
import { Users } from '../models';
// @ts-ignore
import { UsersUpdateManagedUserRequest } from '../models';
// @ts-ignore
import { UsersUpdateManagedUserRequestNotificationEmail } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Deletes a user. By default this will fail if the user still owns any content. Move their owned content first before proceeding, or use the `force` field to delete the user and their files.
         * @summary Delete user
         * @param {string} userId The ID of the user.
         * @param {boolean} [notify] Whether the user will receive email notification of the deletion
         * @param {boolean} [force] Whether the user should be deleted even if this user still own files
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser: async (userId: string, notify?: boolean, force?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('deleteUser', 'userId', userId)
            const localVarPath = `/users/{user_id}`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-user_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2Security required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Security", [], configuration)
            if (notify !== undefined) {
                localVarQueryParameter['notify'] = notify;
            }

            if (force !== undefined) {
                localVarQueryParameter['force'] = force;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/users/{user_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves information about the user who is currently authenticated.  In the case of a client-side authenticated OAuth 2.0 application this will be the user who authorized the app.  In the case of a JWT, server-side authenticated application this will be the service account that belongs to the application by default.  Use the `As-User` header to change who this API call is made on behalf of.
         * @summary Get current user
         * @param {Array<string>} [fields] A comma-separated list of attributes to include in the response. This can be used to request fields that are not normally returned in a standard response.  Be aware that specifying this parameter will have the effect that none of the standard fields are returned in the response unless explicitly specified, instead only fields for the mini representation are returned, additional to the fields requested.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentUser: async (fields?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2Security required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Security", [], configuration)
            if (fields) {
                localVarQueryParameter['fields'] = fields.join(COLLECTION_FORMATS.csv);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/users/me',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves information about a user in the enterprise.  The application and the authenticated user need to have the permission to look up users in the entire enterprise.  This endpoint also returns a limited set of information for external users who are collaborated on content owned by the enterprise for authenticated users with the right scopes. In this case, disallowed fields will return null instead.
         * @summary Get user
         * @param {string} userId The ID of the user.
         * @param {Array<string>} [fields] A comma-separated list of attributes to include in the response. This can be used to request fields that are not normally returned in a standard response.  Be aware that specifying this parameter will have the effect that none of the standard fields are returned in the response unless explicitly specified, instead only fields for the mini representation are returned, additional to the fields requested.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserInfo: async (userId: string, fields?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getUserInfo', 'userId', userId)
            const localVarPath = `/users/{user_id}`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-user_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2Security required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Security", [], configuration)
            if (fields) {
                localVarQueryParameter['fields'] = fields.join(COLLECTION_FORMATS.csv);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/users/{user_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates a managed or app user in an enterprise. This endpoint is only available to users and applications with the right admin permissions.
         * @summary Update user
         * @param {string} userId The ID of the user.
         * @param {Array<string>} [fields] A comma-separated list of attributes to include in the response. This can be used to request fields that are not normally returned in a standard response.  Be aware that specifying this parameter will have the effect that none of the standard fields are returned in the response unless explicitly specified, instead only fields for the mini representation are returned, additional to the fields requested.
         * @param {UsersUpdateManagedUserRequest} [usersUpdateManagedUserRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateManagedUser: async (userId: string, fields?: Array<string>, usersUpdateManagedUserRequest?: UsersUpdateManagedUserRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('updateManagedUser', 'userId', userId)
            const localVarPath = `/users/{user_id}`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-user_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2Security required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Security", [], configuration)
            if (fields) {
                localVarQueryParameter['fields'] = fields.join(COLLECTION_FORMATS.csv);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: usersUpdateManagedUserRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/users/{user_id}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(usersUpdateManagedUserRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of all users for the Enterprise along with their `user_id`, `public_name`, and `login`.  The application and the authenticated user need to have the permission to look up users in the entire enterprise.
         * @summary List enterprise users
         * @param {string} [filterTerm] Limits the results to only users who\&#39;s &#x60;name&#x60; or &#x60;login&#x60; start with the search term.  For externally managed users, the search term needs to completely match the in order to find the user, and it will only return one user at a time.
         * @param {'all' | 'managed' | 'external'} [userType] Limits the results to the kind of user specified.  * &#x60;all&#x60; returns every kind of user for whom the   &#x60;login&#x60; or &#x60;name&#x60; partially matches the   &#x60;filter_term&#x60;. It will only return an external user   if the login matches the &#x60;filter_term&#x60; completely,   and in that case it will only return that user. * &#x60;managed&#x60; returns all managed and app users for whom   the &#x60;login&#x60; or &#x60;name&#x60; partially matches the   &#x60;filter_term&#x60;. * &#x60;external&#x60; returns all external users for whom the   &#x60;login&#x60; matches the &#x60;filter_term&#x60; exactly.
         * @param {string} [externalAppUserId] Limits the results to app users with the given &#x60;external_app_user_id&#x60; value.  When creating an app user, an &#x60;external_app_user_id&#x60; value can be set. This value can then be used in this endpoint to find any users that match that &#x60;external_app_user_id&#x60; value.
         * @param {Array<string>} [fields] A comma-separated list of attributes to include in the response. This can be used to request fields that are not normally returned in a standard response.  Be aware that specifying this parameter will have the effect that none of the standard fields are returned in the response unless explicitly specified, instead only fields for the mini representation are returned, additional to the fields requested.
         * @param {number} [offset] The offset of the item at which to begin the response.  Queries with offset parameter value exceeding 10000 will be rejected with a 400 response.
         * @param {number} [limit] The maximum number of items to return per page.
         * @param {boolean} [usemarker] Specifies whether to use marker-based pagination instead of offset-based pagination. Only one pagination method can be used at a time.  By setting this value to true, the API will return a &#x60;marker&#x60; field that can be passed as a parameter to this endpoint to get the next page of the response.
         * @param {string} [marker] Defines the position marker at which to begin returning results. This is used when paginating using marker-based pagination.  This requires &#x60;usemarker&#x60; to be set to &#x60;true&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        users: async (filterTerm?: string, userType?: 'all' | 'managed' | 'external', externalAppUserId?: string, fields?: Array<string>, offset?: number, limit?: number, usemarker?: boolean, marker?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2Security required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Security", [], configuration)
            if (filterTerm !== undefined) {
                localVarQueryParameter['filter_term'] = filterTerm;
            }

            if (userType !== undefined) {
                localVarQueryParameter['user_type'] = userType;
            }

            if (externalAppUserId !== undefined) {
                localVarQueryParameter['external_app_user_id'] = externalAppUserId;
            }

            if (fields) {
                localVarQueryParameter['fields'] = fields.join(COLLECTION_FORMATS.csv);
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (usemarker !== undefined) {
                localVarQueryParameter['usemarker'] = usemarker;
            }

            if (marker !== undefined) {
                localVarQueryParameter['marker'] = marker;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/users',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a new managed user in an enterprise. This endpoint is only available to users and applications with the right admin permissions.
         * @summary Create user
         * @param {Array<string>} [fields] A comma-separated list of attributes to include in the response. This can be used to request fields that are not normally returned in a standard response.  Be aware that specifying this parameter will have the effect that none of the standard fields are returned in the response unless explicitly specified, instead only fields for the mini representation are returned, additional to the fields requested.
         * @param {PostUsersRequest} [postUsersRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        users_1: async (fields?: Array<string>, postUsersRequest?: PostUsersRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2Security required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Security", [], configuration)
            if (fields) {
                localVarQueryParameter['fields'] = fields.join(COLLECTION_FORMATS.csv);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: postUsersRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/users',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(postUsersRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsersApiAxiosParamCreator(configuration)
    return {
        /**
         * Deletes a user. By default this will fail if the user still owns any content. Move their owned content first before proceeding, or use the `force` field to delete the user and their files.
         * @summary Delete user
         * @param {UsersApiDeleteUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUser(requestParameters: UsersApiDeleteUserRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUser(requestParameters.userId, requestParameters.notify, requestParameters.force, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves information about the user who is currently authenticated.  In the case of a client-side authenticated OAuth 2.0 application this will be the user who authorized the app.  In the case of a JWT, server-side authenticated application this will be the service account that belongs to the application by default.  Use the `As-User` header to change who this API call is made on behalf of.
         * @summary Get current user
         * @param {UsersApiGetCurrentUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCurrentUser(requestParameters: UsersApiGetCurrentUserRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserFull>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCurrentUser(requestParameters.fields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves information about a user in the enterprise.  The application and the authenticated user need to have the permission to look up users in the entire enterprise.  This endpoint also returns a limited set of information for external users who are collaborated on content owned by the enterprise for authenticated users with the right scopes. In this case, disallowed fields will return null instead.
         * @summary Get user
         * @param {UsersApiGetUserInfoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserInfo(requestParameters: UsersApiGetUserInfoRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserFull>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserInfo(requestParameters.userId, requestParameters.fields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates a managed or app user in an enterprise. This endpoint is only available to users and applications with the right admin permissions.
         * @summary Update user
         * @param {UsersApiUpdateManagedUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateManagedUser(requestParameters: UsersApiUpdateManagedUserRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserFull>> {
            const usersUpdateManagedUserRequest: UsersUpdateManagedUserRequest = {
                enterprise: requestParameters.enterprise,
                notify: requestParameters.notify,
                name: requestParameters.name,
                login: requestParameters.login,
                role: requestParameters.role,
                language: requestParameters.language,
                is_sync_enabled: requestParameters.is_sync_enabled,
                job_title: requestParameters.job_title,
                phone: requestParameters.phone,
                address: requestParameters.address,
                tracking_codes: requestParameters.tracking_codes,
                can_see_managed_users: requestParameters.can_see_managed_users,
                timezone: requestParameters.timezone,
                is_external_collab_restricted: requestParameters.is_external_collab_restricted,
                is_exempt_from_device_limits: requestParameters.is_exempt_from_device_limits,
                is_exempt_from_login_verification: requestParameters.is_exempt_from_login_verification,
                is_password_reset_required: requestParameters.is_password_reset_required,
                status: requestParameters.status,
                space_amount: requestParameters.space_amount,
                notification_email: requestParameters.notification_email,
                external_app_user_id: requestParameters.external_app_user_id
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateManagedUser(requestParameters.userId, requestParameters.fields, usersUpdateManagedUserRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a list of all users for the Enterprise along with their `user_id`, `public_name`, and `login`.  The application and the authenticated user need to have the permission to look up users in the entire enterprise.
         * @summary List enterprise users
         * @param {UsersApiUsersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async users(requestParameters: UsersApiUsersRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Users>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.users(requestParameters.filterTerm, requestParameters.userType, requestParameters.externalAppUserId, requestParameters.fields, requestParameters.offset, requestParameters.limit, requestParameters.usemarker, requestParameters.marker, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates a new managed user in an enterprise. This endpoint is only available to users and applications with the right admin permissions.
         * @summary Create user
         * @param {UsersApiUsers0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async users_1(requestParameters: UsersApiUsers0Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserFull>> {
            const postUsersRequest: PostUsersRequest = {
                name: requestParameters.name,
                login: requestParameters.login,
                is_platform_access_only: requestParameters.is_platform_access_only,
                role: requestParameters.role,
                language: requestParameters.language,
                is_sync_enabled: requestParameters.is_sync_enabled,
                job_title: requestParameters.job_title,
                phone: requestParameters.phone,
                address: requestParameters.address,
                space_amount: requestParameters.space_amount,
                tracking_codes: requestParameters.tracking_codes,
                can_see_managed_users: requestParameters.can_see_managed_users,
                timezone: requestParameters.timezone,
                is_external_collab_restricted: requestParameters.is_external_collab_restricted,
                is_exempt_from_device_limits: requestParameters.is_exempt_from_device_limits,
                is_exempt_from_login_verification: requestParameters.is_exempt_from_login_verification,
                status: requestParameters.status,
                external_app_user_id: requestParameters.external_app_user_id
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.users_1(requestParameters.fields, postUsersRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsersApiFp(configuration)
    return {
        /**
         * Deletes a user. By default this will fail if the user still owns any content. Move their owned content first before proceeding, or use the `force` field to delete the user and their files.
         * @summary Delete user
         * @param {UsersApiDeleteUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser(requestParameters: UsersApiDeleteUserRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteUser(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves information about the user who is currently authenticated.  In the case of a client-side authenticated OAuth 2.0 application this will be the user who authorized the app.  In the case of a JWT, server-side authenticated application this will be the service account that belongs to the application by default.  Use the `As-User` header to change who this API call is made on behalf of.
         * @summary Get current user
         * @param {UsersApiGetCurrentUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentUser(requestParameters: UsersApiGetCurrentUserRequest, options?: AxiosRequestConfig): AxiosPromise<UserFull> {
            return localVarFp.getCurrentUser(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves information about a user in the enterprise.  The application and the authenticated user need to have the permission to look up users in the entire enterprise.  This endpoint also returns a limited set of information for external users who are collaborated on content owned by the enterprise for authenticated users with the right scopes. In this case, disallowed fields will return null instead.
         * @summary Get user
         * @param {UsersApiGetUserInfoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserInfo(requestParameters: UsersApiGetUserInfoRequest, options?: AxiosRequestConfig): AxiosPromise<UserFull> {
            return localVarFp.getUserInfo(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates a managed or app user in an enterprise. This endpoint is only available to users and applications with the right admin permissions.
         * @summary Update user
         * @param {UsersApiUpdateManagedUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateManagedUser(requestParameters: UsersApiUpdateManagedUserRequest, options?: AxiosRequestConfig): AxiosPromise<UserFull> {
            return localVarFp.updateManagedUser(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of all users for the Enterprise along with their `user_id`, `public_name`, and `login`.  The application and the authenticated user need to have the permission to look up users in the entire enterprise.
         * @summary List enterprise users
         * @param {UsersApiUsersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        users(requestParameters: UsersApiUsersRequest = {}, options?: AxiosRequestConfig): AxiosPromise<Users> {
            return localVarFp.users(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a new managed user in an enterprise. This endpoint is only available to users and applications with the right admin permissions.
         * @summary Create user
         * @param {UsersApiUsers0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        users_1(requestParameters: UsersApiUsers0Request, options?: AxiosRequestConfig): AxiosPromise<UserFull> {
            return localVarFp.users_1(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for deleteUser operation in UsersApi.
 * @export
 * @interface UsersApiDeleteUserRequest
 */
export type UsersApiDeleteUserRequest = {
    
    /**
    * The ID of the user.
    * @type {string}
    * @memberof UsersApiDeleteUser
    */
    readonly userId: string
    
    /**
    * Whether the user will receive email notification of the deletion
    * @type {boolean}
    * @memberof UsersApiDeleteUser
    */
    readonly notify?: boolean
    
    /**
    * Whether the user should be deleted even if this user still own files
    * @type {boolean}
    * @memberof UsersApiDeleteUser
    */
    readonly force?: boolean
    
}

/**
 * Request parameters for getCurrentUser operation in UsersApi.
 * @export
 * @interface UsersApiGetCurrentUserRequest
 */
export type UsersApiGetCurrentUserRequest = {
    
    /**
    * A comma-separated list of attributes to include in the response. This can be used to request fields that are not normally returned in a standard response.  Be aware that specifying this parameter will have the effect that none of the standard fields are returned in the response unless explicitly specified, instead only fields for the mini representation are returned, additional to the fields requested.
    * @type {Array<string>}
    * @memberof UsersApiGetCurrentUser
    */
    readonly fields?: Array<string>
    
}

/**
 * Request parameters for getUserInfo operation in UsersApi.
 * @export
 * @interface UsersApiGetUserInfoRequest
 */
export type UsersApiGetUserInfoRequest = {
    
    /**
    * The ID of the user.
    * @type {string}
    * @memberof UsersApiGetUserInfo
    */
    readonly userId: string
    
    /**
    * A comma-separated list of attributes to include in the response. This can be used to request fields that are not normally returned in a standard response.  Be aware that specifying this parameter will have the effect that none of the standard fields are returned in the response unless explicitly specified, instead only fields for the mini representation are returned, additional to the fields requested.
    * @type {Array<string>}
    * @memberof UsersApiGetUserInfo
    */
    readonly fields?: Array<string>
    
}

/**
 * Request parameters for updateManagedUser operation in UsersApi.
 * @export
 * @interface UsersApiUpdateManagedUserRequest
 */
export type UsersApiUpdateManagedUserRequest = {
    
    /**
    * The ID of the user.
    * @type {string}
    * @memberof UsersApiUpdateManagedUser
    */
    readonly userId: string
    
    /**
    * A comma-separated list of attributes to include in the response. This can be used to request fields that are not normally returned in a standard response.  Be aware that specifying this parameter will have the effect that none of the standard fields are returned in the response unless explicitly specified, instead only fields for the mini representation are returned, additional to the fields requested.
    * @type {Array<string>}
    * @memberof UsersApiUpdateManagedUser
    */
    readonly fields?: Array<string>
    
} & UsersUpdateManagedUserRequest

/**
 * Request parameters for users operation in UsersApi.
 * @export
 * @interface UsersApiUsersRequest
 */
export type UsersApiUsersRequest = {
    
    /**
    * Limits the results to only users who\'s `name` or `login` start with the search term.  For externally managed users, the search term needs to completely match the in order to find the user, and it will only return one user at a time.
    * @type {string}
    * @memberof UsersApiUsers
    */
    readonly filterTerm?: string
    
    /**
    * Limits the results to the kind of user specified.  * `all` returns every kind of user for whom the   `login` or `name` partially matches the   `filter_term`. It will only return an external user   if the login matches the `filter_term` completely,   and in that case it will only return that user. * `managed` returns all managed and app users for whom   the `login` or `name` partially matches the   `filter_term`. * `external` returns all external users for whom the   `login` matches the `filter_term` exactly.
    * @type {'all' | 'managed' | 'external'}
    * @memberof UsersApiUsers
    */
    readonly userType?: 'all' | 'managed' | 'external'
    
    /**
    * Limits the results to app users with the given `external_app_user_id` value.  When creating an app user, an `external_app_user_id` value can be set. This value can then be used in this endpoint to find any users that match that `external_app_user_id` value.
    * @type {string}
    * @memberof UsersApiUsers
    */
    readonly externalAppUserId?: string
    
    /**
    * A comma-separated list of attributes to include in the response. This can be used to request fields that are not normally returned in a standard response.  Be aware that specifying this parameter will have the effect that none of the standard fields are returned in the response unless explicitly specified, instead only fields for the mini representation are returned, additional to the fields requested.
    * @type {Array<string>}
    * @memberof UsersApiUsers
    */
    readonly fields?: Array<string>
    
    /**
    * The offset of the item at which to begin the response.  Queries with offset parameter value exceeding 10000 will be rejected with a 400 response.
    * @type {number}
    * @memberof UsersApiUsers
    */
    readonly offset?: number
    
    /**
    * The maximum number of items to return per page.
    * @type {number}
    * @memberof UsersApiUsers
    */
    readonly limit?: number
    
    /**
    * Specifies whether to use marker-based pagination instead of offset-based pagination. Only one pagination method can be used at a time.  By setting this value to true, the API will return a `marker` field that can be passed as a parameter to this endpoint to get the next page of the response.
    * @type {boolean}
    * @memberof UsersApiUsers
    */
    readonly usemarker?: boolean
    
    /**
    * Defines the position marker at which to begin returning results. This is used when paginating using marker-based pagination.  This requires `usemarker` to be set to `true`.
    * @type {string}
    * @memberof UsersApiUsers
    */
    readonly marker?: string
    
}

/**
 * Request parameters for users_1 operation in UsersApi.
 * @export
 * @interface UsersApiUsers0Request
 */
export type UsersApiUsers0Request = {
    
    /**
    * A comma-separated list of attributes to include in the response. This can be used to request fields that are not normally returned in a standard response.  Be aware that specifying this parameter will have the effect that none of the standard fields are returned in the response unless explicitly specified, instead only fields for the mini representation are returned, additional to the fields requested.
    * @type {Array<string>}
    * @memberof UsersApiUsers0
    */
    readonly fields?: Array<string>
    
} & PostUsersRequest

/**
 * UsersApiGenerated - object-oriented interface
 * @export
 * @class UsersApiGenerated
 * @extends {BaseAPI}
 */
export class UsersApiGenerated extends BaseAPI {
    /**
     * Deletes a user. By default this will fail if the user still owns any content. Move their owned content first before proceeding, or use the `force` field to delete the user and their files.
     * @summary Delete user
     * @param {UsersApiDeleteUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiGenerated
     */
    public deleteUser(requestParameters: UsersApiDeleteUserRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).deleteUser(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves information about the user who is currently authenticated.  In the case of a client-side authenticated OAuth 2.0 application this will be the user who authorized the app.  In the case of a JWT, server-side authenticated application this will be the service account that belongs to the application by default.  Use the `As-User` header to change who this API call is made on behalf of.
     * @summary Get current user
     * @param {UsersApiGetCurrentUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiGenerated
     */
    public getCurrentUser(requestParameters: UsersApiGetCurrentUserRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).getCurrentUser(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves information about a user in the enterprise.  The application and the authenticated user need to have the permission to look up users in the entire enterprise.  This endpoint also returns a limited set of information for external users who are collaborated on content owned by the enterprise for authenticated users with the right scopes. In this case, disallowed fields will return null instead.
     * @summary Get user
     * @param {UsersApiGetUserInfoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiGenerated
     */
    public getUserInfo(requestParameters: UsersApiGetUserInfoRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).getUserInfo(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates a managed or app user in an enterprise. This endpoint is only available to users and applications with the right admin permissions.
     * @summary Update user
     * @param {UsersApiUpdateManagedUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiGenerated
     */
    public updateManagedUser(requestParameters: UsersApiUpdateManagedUserRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).updateManagedUser(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of all users for the Enterprise along with their `user_id`, `public_name`, and `login`.  The application and the authenticated user need to have the permission to look up users in the entire enterprise.
     * @summary List enterprise users
     * @param {UsersApiUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiGenerated
     */
    public users(requestParameters: UsersApiUsersRequest = {}, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).users(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a new managed user in an enterprise. This endpoint is only available to users and applications with the right admin permissions.
     * @summary Create user
     * @param {UsersApiUsers0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiGenerated
     */
    public users_1(requestParameters: UsersApiUsers0Request, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).users_1(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
