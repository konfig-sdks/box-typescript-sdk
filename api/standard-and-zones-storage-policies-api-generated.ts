/* tslint:disable */
/* eslint-disable */
/*
Box Platform API

[Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.

The version of the OpenAPI document: 2.0.0
Contact: devrel@box.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ClientError } from '../models';
// @ts-ignore
import { StoragePolicies } from '../models';
// @ts-ignore
import { StoragePolicy } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * StandardAndZonesStoragePoliciesApi - axios parameter creator
 * @export
 */
export const StandardAndZonesStoragePoliciesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Fetches a specific storage policy.
         * @summary Get storage policy
         * @param {string} storagePolicyId The ID of the storage policy.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpecific: async (storagePolicyId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'storagePolicyId' is not null or undefined
            assertParamExists('getSpecific', 'storagePolicyId', storagePolicyId)
            const localVarPath = `/storage_policies/{storage_policy_id}`
                .replace(`{${"storage_policy_id"}}`, encodeURIComponent(String(storagePolicyId !== undefined ? storagePolicyId : `-storage_policy_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2Security required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Security", [], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/storage_policies/{storage_policy_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetches all the storage policies in the enterprise.
         * @summary List storage policies
         * @param {Array<string>} [fields] A comma-separated list of attributes to include in the response. This can be used to request fields that are not normally returned in a standard response.  Be aware that specifying this parameter will have the effect that none of the standard fields are returned in the response unless explicitly specified, instead only fields for the mini representation are returned, additional to the fields requested.
         * @param {string} [marker] Defines the position marker at which to begin returning results. This is used when paginating using marker-based pagination.  This requires &#x60;usemarker&#x60; to be set to &#x60;true&#x60;.
         * @param {number} [limit] The maximum number of items to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPolicies: async (fields?: Array<string>, marker?: string, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/storage_policies`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2Security required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Security", [], configuration)
            if (fields) {
                localVarQueryParameter['fields'] = fields.join(COLLECTION_FORMATS.csv);
            }

            if (marker !== undefined) {
                localVarQueryParameter['marker'] = marker;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/storage_policies',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StandardAndZonesStoragePoliciesApi - functional programming interface
 * @export
 */
export const StandardAndZonesStoragePoliciesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = StandardAndZonesStoragePoliciesApiAxiosParamCreator(configuration)
    return {
        /**
         * Fetches a specific storage policy.
         * @summary Get storage policy
         * @param {StandardAndZonesStoragePoliciesApiGetSpecificRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSpecific(requestParameters: StandardAndZonesStoragePoliciesApiGetSpecificRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StoragePolicy>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSpecific(requestParameters.storagePolicyId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Fetches all the storage policies in the enterprise.
         * @summary List storage policies
         * @param {StandardAndZonesStoragePoliciesApiListPoliciesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listPolicies(requestParameters: StandardAndZonesStoragePoliciesApiListPoliciesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StoragePolicies>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listPolicies(requestParameters.fields, requestParameters.marker, requestParameters.limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * StandardAndZonesStoragePoliciesApi - factory interface
 * @export
 */
export const StandardAndZonesStoragePoliciesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = StandardAndZonesStoragePoliciesApiFp(configuration)
    return {
        /**
         * Fetches a specific storage policy.
         * @summary Get storage policy
         * @param {StandardAndZonesStoragePoliciesApiGetSpecificRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpecific(requestParameters: StandardAndZonesStoragePoliciesApiGetSpecificRequest, options?: AxiosRequestConfig): AxiosPromise<StoragePolicy> {
            return localVarFp.getSpecific(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetches all the storage policies in the enterprise.
         * @summary List storage policies
         * @param {StandardAndZonesStoragePoliciesApiListPoliciesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPolicies(requestParameters: StandardAndZonesStoragePoliciesApiListPoliciesRequest, options?: AxiosRequestConfig): AxiosPromise<StoragePolicies> {
            return localVarFp.listPolicies(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getSpecific operation in StandardAndZonesStoragePoliciesApi.
 * @export
 * @interface StandardAndZonesStoragePoliciesApiGetSpecificRequest
 */
export type StandardAndZonesStoragePoliciesApiGetSpecificRequest = {
    
    /**
    * The ID of the storage policy.
    * @type {string}
    * @memberof StandardAndZonesStoragePoliciesApiGetSpecific
    */
    readonly storagePolicyId: string
    
}

/**
 * Request parameters for listPolicies operation in StandardAndZonesStoragePoliciesApi.
 * @export
 * @interface StandardAndZonesStoragePoliciesApiListPoliciesRequest
 */
export type StandardAndZonesStoragePoliciesApiListPoliciesRequest = {
    
    /**
    * A comma-separated list of attributes to include in the response. This can be used to request fields that are not normally returned in a standard response.  Be aware that specifying this parameter will have the effect that none of the standard fields are returned in the response unless explicitly specified, instead only fields for the mini representation are returned, additional to the fields requested.
    * @type {Array<string>}
    * @memberof StandardAndZonesStoragePoliciesApiListPolicies
    */
    readonly fields?: Array<string>
    
    /**
    * Defines the position marker at which to begin returning results. This is used when paginating using marker-based pagination.  This requires `usemarker` to be set to `true`.
    * @type {string}
    * @memberof StandardAndZonesStoragePoliciesApiListPolicies
    */
    readonly marker?: string
    
    /**
    * The maximum number of items to return per page.
    * @type {number}
    * @memberof StandardAndZonesStoragePoliciesApiListPolicies
    */
    readonly limit?: number
    
}

/**
 * StandardAndZonesStoragePoliciesApiGenerated - object-oriented interface
 * @export
 * @class StandardAndZonesStoragePoliciesApiGenerated
 * @extends {BaseAPI}
 */
export class StandardAndZonesStoragePoliciesApiGenerated extends BaseAPI {
    /**
     * Fetches a specific storage policy.
     * @summary Get storage policy
     * @param {StandardAndZonesStoragePoliciesApiGetSpecificRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StandardAndZonesStoragePoliciesApiGenerated
     */
    public getSpecific(requestParameters: StandardAndZonesStoragePoliciesApiGetSpecificRequest, options?: AxiosRequestConfig) {
        return StandardAndZonesStoragePoliciesApiFp(this.configuration).getSpecific(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetches all the storage policies in the enterprise.
     * @summary List storage policies
     * @param {StandardAndZonesStoragePoliciesApiListPoliciesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StandardAndZonesStoragePoliciesApiGenerated
     */
    public listPolicies(requestParameters: StandardAndZonesStoragePoliciesApiListPoliciesRequest, options?: AxiosRequestConfig) {
        return StandardAndZonesStoragePoliciesApiFp(this.configuration).listPolicies(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
