/* tslint:disable */
/* eslint-disable */
/*
Box Platform API

[Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.

The version of the OpenAPI document: 2.0.0
Contact: devrel@box.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ClientError } from '../models';
// @ts-ignore
import { FileVersionLegalHold } from '../models';
// @ts-ignore
import { FileVersionLegalHolds } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * FileVersionLegalHoldsApi - axios parameter creator
 * @export
 */
export const FileVersionLegalHoldsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieves information about the legal hold policies assigned to a file version.
         * @summary Get file version legal hold
         * @param {string} fileVersionLegalHoldId The ID of the file version legal hold
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFileVersionLegalHoldInfo: async (fileVersionLegalHoldId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fileVersionLegalHoldId' is not null or undefined
            assertParamExists('getFileVersionLegalHoldInfo', 'fileVersionLegalHoldId', fileVersionLegalHoldId)
            const localVarPath = `/file_version_legal_holds/{file_version_legal_hold_id}`
                .replace(`{${"file_version_legal_hold_id"}}`, encodeURIComponent(String(fileVersionLegalHoldId !== undefined ? fileVersionLegalHoldId : `-file_version_legal_hold_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2Security required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Security", [], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/file_version_legal_holds/{file_version_legal_hold_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of file versions on legal hold for a legal hold assignment.  Due to ongoing re-architecture efforts this API might not return all file versions for this policy ID.  Instead, this API will only return file versions held in the legacy architecture. Two new endpoints will available to request any file versions held in the new architecture.  For file versions held in the new architecture, the `GET /legal_hold_policy_assignments/:id/file_versions_on_hold` API can be used to return all past file versions available for this policy assignment, and the `GET /legal_hold_policy_assignments/:id/files_on_hold` API can be used to return any current (latest) versions of a file under legal hold.  The `GET /legal_hold_policy_assignments?policy_id={id}` API can be used to find a list of policy assignments for a given policy ID.  Once the re-architecture is completed this API will be deprecated.
         * @summary List file version legal holds
         * @param {string} policyId The ID of the legal hold policy to get the file version legal holds for.
         * @param {string} [marker] Defines the position marker at which to begin returning results. This is used when paginating using marker-based pagination.  This requires &#x60;usemarker&#x60; to be set to &#x60;true&#x60;.
         * @param {number} [limit] The maximum number of items to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFileVersionLegalHolds: async (policyId: string, marker?: string, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'policyId' is not null or undefined
            assertParamExists('listFileVersionLegalHolds', 'policyId', policyId)
            const localVarPath = `/file_version_legal_holds`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2Security required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Security", [], configuration)
            if (policyId !== undefined) {
                localVarQueryParameter['policy_id'] = policyId;
            }

            if (marker !== undefined) {
                localVarQueryParameter['marker'] = marker;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/file_version_legal_holds',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FileVersionLegalHoldsApi - functional programming interface
 * @export
 */
export const FileVersionLegalHoldsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FileVersionLegalHoldsApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieves information about the legal hold policies assigned to a file version.
         * @summary Get file version legal hold
         * @param {FileVersionLegalHoldsApiGetFileVersionLegalHoldInfoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFileVersionLegalHoldInfo(requestParameters: FileVersionLegalHoldsApiGetFileVersionLegalHoldInfoRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FileVersionLegalHold>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFileVersionLegalHoldInfo(requestParameters.fileVersionLegalHoldId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a list of file versions on legal hold for a legal hold assignment.  Due to ongoing re-architecture efforts this API might not return all file versions for this policy ID.  Instead, this API will only return file versions held in the legacy architecture. Two new endpoints will available to request any file versions held in the new architecture.  For file versions held in the new architecture, the `GET /legal_hold_policy_assignments/:id/file_versions_on_hold` API can be used to return all past file versions available for this policy assignment, and the `GET /legal_hold_policy_assignments/:id/files_on_hold` API can be used to return any current (latest) versions of a file under legal hold.  The `GET /legal_hold_policy_assignments?policy_id={id}` API can be used to find a list of policy assignments for a given policy ID.  Once the re-architecture is completed this API will be deprecated.
         * @summary List file version legal holds
         * @param {FileVersionLegalHoldsApiListFileVersionLegalHoldsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listFileVersionLegalHolds(requestParameters: FileVersionLegalHoldsApiListFileVersionLegalHoldsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FileVersionLegalHolds>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listFileVersionLegalHolds(requestParameters.policyId, requestParameters.marker, requestParameters.limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * FileVersionLegalHoldsApi - factory interface
 * @export
 */
export const FileVersionLegalHoldsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FileVersionLegalHoldsApiFp(configuration)
    return {
        /**
         * Retrieves information about the legal hold policies assigned to a file version.
         * @summary Get file version legal hold
         * @param {FileVersionLegalHoldsApiGetFileVersionLegalHoldInfoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFileVersionLegalHoldInfo(requestParameters: FileVersionLegalHoldsApiGetFileVersionLegalHoldInfoRequest, options?: AxiosRequestConfig): AxiosPromise<FileVersionLegalHold> {
            return localVarFp.getFileVersionLegalHoldInfo(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of file versions on legal hold for a legal hold assignment.  Due to ongoing re-architecture efforts this API might not return all file versions for this policy ID.  Instead, this API will only return file versions held in the legacy architecture. Two new endpoints will available to request any file versions held in the new architecture.  For file versions held in the new architecture, the `GET /legal_hold_policy_assignments/:id/file_versions_on_hold` API can be used to return all past file versions available for this policy assignment, and the `GET /legal_hold_policy_assignments/:id/files_on_hold` API can be used to return any current (latest) versions of a file under legal hold.  The `GET /legal_hold_policy_assignments?policy_id={id}` API can be used to find a list of policy assignments for a given policy ID.  Once the re-architecture is completed this API will be deprecated.
         * @summary List file version legal holds
         * @param {FileVersionLegalHoldsApiListFileVersionLegalHoldsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFileVersionLegalHolds(requestParameters: FileVersionLegalHoldsApiListFileVersionLegalHoldsRequest, options?: AxiosRequestConfig): AxiosPromise<FileVersionLegalHolds> {
            return localVarFp.listFileVersionLegalHolds(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getFileVersionLegalHoldInfo operation in FileVersionLegalHoldsApi.
 * @export
 * @interface FileVersionLegalHoldsApiGetFileVersionLegalHoldInfoRequest
 */
export type FileVersionLegalHoldsApiGetFileVersionLegalHoldInfoRequest = {
    
    /**
    * The ID of the file version legal hold
    * @type {string}
    * @memberof FileVersionLegalHoldsApiGetFileVersionLegalHoldInfo
    */
    readonly fileVersionLegalHoldId: string
    
}

/**
 * Request parameters for listFileVersionLegalHolds operation in FileVersionLegalHoldsApi.
 * @export
 * @interface FileVersionLegalHoldsApiListFileVersionLegalHoldsRequest
 */
export type FileVersionLegalHoldsApiListFileVersionLegalHoldsRequest = {
    
    /**
    * The ID of the legal hold policy to get the file version legal holds for.
    * @type {string}
    * @memberof FileVersionLegalHoldsApiListFileVersionLegalHolds
    */
    readonly policyId: string
    
    /**
    * Defines the position marker at which to begin returning results. This is used when paginating using marker-based pagination.  This requires `usemarker` to be set to `true`.
    * @type {string}
    * @memberof FileVersionLegalHoldsApiListFileVersionLegalHolds
    */
    readonly marker?: string
    
    /**
    * The maximum number of items to return per page.
    * @type {number}
    * @memberof FileVersionLegalHoldsApiListFileVersionLegalHolds
    */
    readonly limit?: number
    
}

/**
 * FileVersionLegalHoldsApiGenerated - object-oriented interface
 * @export
 * @class FileVersionLegalHoldsApiGenerated
 * @extends {BaseAPI}
 */
export class FileVersionLegalHoldsApiGenerated extends BaseAPI {
    /**
     * Retrieves information about the legal hold policies assigned to a file version.
     * @summary Get file version legal hold
     * @param {FileVersionLegalHoldsApiGetFileVersionLegalHoldInfoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileVersionLegalHoldsApiGenerated
     */
    public getFileVersionLegalHoldInfo(requestParameters: FileVersionLegalHoldsApiGetFileVersionLegalHoldInfoRequest, options?: AxiosRequestConfig) {
        return FileVersionLegalHoldsApiFp(this.configuration).getFileVersionLegalHoldInfo(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a list of file versions on legal hold for a legal hold assignment.  Due to ongoing re-architecture efforts this API might not return all file versions for this policy ID.  Instead, this API will only return file versions held in the legacy architecture. Two new endpoints will available to request any file versions held in the new architecture.  For file versions held in the new architecture, the `GET /legal_hold_policy_assignments/:id/file_versions_on_hold` API can be used to return all past file versions available for this policy assignment, and the `GET /legal_hold_policy_assignments/:id/files_on_hold` API can be used to return any current (latest) versions of a file under legal hold.  The `GET /legal_hold_policy_assignments?policy_id={id}` API can be used to find a list of policy assignments for a given policy ID.  Once the re-architecture is completed this API will be deprecated.
     * @summary List file version legal holds
     * @param {FileVersionLegalHoldsApiListFileVersionLegalHoldsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileVersionLegalHoldsApiGenerated
     */
    public listFileVersionLegalHolds(requestParameters: FileVersionLegalHoldsApiListFileVersionLegalHoldsRequest, options?: AxiosRequestConfig) {
        return FileVersionLegalHoldsApiFp(this.configuration).listFileVersionLegalHolds(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
