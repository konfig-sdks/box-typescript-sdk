/* tslint:disable */
/* eslint-disable */
/*
Box Platform API

[Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.

The version of the OpenAPI document: 2.0.0
Contact: devrel@box.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ClientError } from '../models';
// @ts-ignore
import { FolderFull } from '../models';
// @ts-ignore
import { SharedLinksFoldersAddLinkToFolderRequest } from '../models';
// @ts-ignore
import { SharedLinksFoldersAddLinkToFolderRequestSharedLink } from '../models';
// @ts-ignore
import { SharedLinksFoldersRemoveFromFolderRequest } from '../models';
// @ts-ignore
import { SharedLinksFoldersUpdateFolderSharedLinkRequest } from '../models';
// @ts-ignore
import { SharedLinksFoldersUpdateFolderSharedLinkRequestSharedLink } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * SharedLinksFoldersApi - axios parameter creator
 * @export
 */
export const SharedLinksFoldersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Adds a shared link to a folder.
         * @summary Add shared link to folder
         * @param {string} folderId The unique identifier that represent a folder.  The ID for any folder can be determined by visiting this folder in the web application and copying the ID from the URL. For example, for the URL &#x60;https://_*.app.box.com/folder/123&#x60; the &#x60;folder_id&#x60; is &#x60;123&#x60;.  The root folder of a Box account is always represented by the ID &#x60;0&#x60;.
         * @param {string} fields Explicitly request the &#x60;shared_link&#x60; fields to be returned for this item.
         * @param {SharedLinksFoldersAddLinkToFolderRequest} [sharedLinksFoldersAddLinkToFolderRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addLinkToFolder: async (folderId: string, fields: string, sharedLinksFoldersAddLinkToFolderRequest?: SharedLinksFoldersAddLinkToFolderRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'folderId' is not null or undefined
            assertParamExists('addLinkToFolder', 'folderId', folderId)
            // verify required parameter 'fields' is not null or undefined
            assertParamExists('addLinkToFolder', 'fields', fields)
            const localVarPath = `/folders/{folder_id}#add_shared_link`
                .replace(`{${"folder_id"}}`, encodeURIComponent(String(folderId !== undefined ? folderId : `-folder_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2Security required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Security", [], configuration)
            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: sharedLinksFoldersAddLinkToFolderRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/folders/{folder_id}#add_shared_link',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(sharedLinksFoldersAddLinkToFolderRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Return the folder represented by a shared link.  A shared folder can be represented by a shared link, which can originate within the current enterprise or within another.  This endpoint allows an application to retrieve information about a shared folder when only given a shared link.
         * @summary Find folder for shared link
         * @param {string} boxapi A header containing the shared link and optional password for the shared link.  The format for this header is as follows.  &#x60;shared_link&#x3D;[link]&amp;shared_link_password&#x3D;[password]&#x60;
         * @param {string} [ifNoneMatch] Ensures an item is only returned if it has changed.  Pass in the item\&#39;s last observed &#x60;etag&#x60; value into this header and the endpoint will fail with a &#x60;304 Not Modified&#x60; if the item has not changed since.
         * @param {Array<string>} [fields] A comma-separated list of attributes to include in the response. This can be used to request fields that are not normally returned in a standard response.  Be aware that specifying this parameter will have the effect that none of the standard fields are returned in the response unless explicitly specified, instead only fields for the mini representation are returned, additional to the fields requested.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findFolderBySharedLink: async (boxapi: string, ifNoneMatch?: string, fields?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'boxapi' is not null or undefined
            assertParamExists('findFolderBySharedLink', 'boxapi', boxapi)
            const localVarPath = `/shared_items#folders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2Security required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Security", [], configuration)
            if (fields) {
                localVarQueryParameter['fields'] = fields.join(COLLECTION_FORMATS.csv);
            }

            if (ifNoneMatch != null) {
                localVarHeaderParameter['if-none-match'] = String(ifNoneMatch);
            }

            if (boxapi != null) {
                localVarHeaderParameter['boxapi'] = String(boxapi);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/shared_items#folders',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets the information for a shared link on a folder.
         * @summary Get shared link for folder
         * @param {string} folderId The unique identifier that represent a folder.  The ID for any folder can be determined by visiting this folder in the web application and copying the ID from the URL. For example, for the URL &#x60;https://_*.app.box.com/folder/123&#x60; the &#x60;folder_id&#x60; is &#x60;123&#x60;.  The root folder of a Box account is always represented by the ID &#x60;0&#x60;.
         * @param {string} fields Explicitly request the &#x60;shared_link&#x60; fields to be returned for this item.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSharedLinkForFolder: async (folderId: string, fields: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'folderId' is not null or undefined
            assertParamExists('getSharedLinkForFolder', 'folderId', folderId)
            // verify required parameter 'fields' is not null or undefined
            assertParamExists('getSharedLinkForFolder', 'fields', fields)
            const localVarPath = `/folders/{folder_id}#get_shared_link`
                .replace(`{${"folder_id"}}`, encodeURIComponent(String(folderId !== undefined ? folderId : `-folder_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2Security required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Security", [], configuration)
            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/folders/{folder_id}#get_shared_link',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Removes a shared link from a folder.
         * @summary Remove shared link from folder
         * @param {string} folderId The unique identifier that represent a folder.  The ID for any folder can be determined by visiting this folder in the web application and copying the ID from the URL. For example, for the URL &#x60;https://_*.app.box.com/folder/123&#x60; the &#x60;folder_id&#x60; is &#x60;123&#x60;.  The root folder of a Box account is always represented by the ID &#x60;0&#x60;.
         * @param {string} fields Explicitly request the &#x60;shared_link&#x60; fields to be returned for this item.
         * @param {SharedLinksFoldersRemoveFromFolderRequest} [sharedLinksFoldersRemoveFromFolderRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeFromFolder: async (folderId: string, fields: string, sharedLinksFoldersRemoveFromFolderRequest?: SharedLinksFoldersRemoveFromFolderRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'folderId' is not null or undefined
            assertParamExists('removeFromFolder', 'folderId', folderId)
            // verify required parameter 'fields' is not null or undefined
            assertParamExists('removeFromFolder', 'fields', fields)
            const localVarPath = `/folders/{folder_id}#remove_shared_link`
                .replace(`{${"folder_id"}}`, encodeURIComponent(String(folderId !== undefined ? folderId : `-folder_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2Security required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Security", [], configuration)
            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: sharedLinksFoldersRemoveFromFolderRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/folders/{folder_id}#remove_shared_link',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(sharedLinksFoldersRemoveFromFolderRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates a shared link on a folder.
         * @summary Update shared link on folder
         * @param {string} folderId The unique identifier that represent a folder.  The ID for any folder can be determined by visiting this folder in the web application and copying the ID from the URL. For example, for the URL &#x60;https://_*.app.box.com/folder/123&#x60; the &#x60;folder_id&#x60; is &#x60;123&#x60;.  The root folder of a Box account is always represented by the ID &#x60;0&#x60;.
         * @param {string} fields Explicitly request the &#x60;shared_link&#x60; fields to be returned for this item.
         * @param {SharedLinksFoldersUpdateFolderSharedLinkRequest} [sharedLinksFoldersUpdateFolderSharedLinkRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateFolderSharedLink: async (folderId: string, fields: string, sharedLinksFoldersUpdateFolderSharedLinkRequest?: SharedLinksFoldersUpdateFolderSharedLinkRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'folderId' is not null or undefined
            assertParamExists('updateFolderSharedLink', 'folderId', folderId)
            // verify required parameter 'fields' is not null or undefined
            assertParamExists('updateFolderSharedLink', 'fields', fields)
            const localVarPath = `/folders/{folder_id}#update_shared_link`
                .replace(`{${"folder_id"}}`, encodeURIComponent(String(folderId !== undefined ? folderId : `-folder_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2Security required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Security", [], configuration)
            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: sharedLinksFoldersUpdateFolderSharedLinkRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/folders/{folder_id}#update_shared_link',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(sharedLinksFoldersUpdateFolderSharedLinkRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SharedLinksFoldersApi - functional programming interface
 * @export
 */
export const SharedLinksFoldersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SharedLinksFoldersApiAxiosParamCreator(configuration)
    return {
        /**
         * Adds a shared link to a folder.
         * @summary Add shared link to folder
         * @param {SharedLinksFoldersApiAddLinkToFolderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addLinkToFolder(requestParameters: SharedLinksFoldersApiAddLinkToFolderRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FolderFull>> {
            const sharedLinksFoldersAddLinkToFolderRequest: SharedLinksFoldersAddLinkToFolderRequest = {
                shared_link: requestParameters.shared_link
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addLinkToFolder(requestParameters.folderId, requestParameters.fields, sharedLinksFoldersAddLinkToFolderRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Return the folder represented by a shared link.  A shared folder can be represented by a shared link, which can originate within the current enterprise or within another.  This endpoint allows an application to retrieve information about a shared folder when only given a shared link.
         * @summary Find folder for shared link
         * @param {SharedLinksFoldersApiFindFolderBySharedLinkRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findFolderBySharedLink(requestParameters: SharedLinksFoldersApiFindFolderBySharedLinkRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FolderFull>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findFolderBySharedLink(requestParameters.boxapi, requestParameters.ifNoneMatch, requestParameters.fields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Gets the information for a shared link on a folder.
         * @summary Get shared link for folder
         * @param {SharedLinksFoldersApiGetSharedLinkForFolderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSharedLinkForFolder(requestParameters: SharedLinksFoldersApiGetSharedLinkForFolderRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FolderFull>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSharedLinkForFolder(requestParameters.folderId, requestParameters.fields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Removes a shared link from a folder.
         * @summary Remove shared link from folder
         * @param {SharedLinksFoldersApiRemoveFromFolderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeFromFolder(requestParameters: SharedLinksFoldersApiRemoveFromFolderRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FolderFull>> {
            const sharedLinksFoldersRemoveFromFolderRequest: SharedLinksFoldersRemoveFromFolderRequest = {
                shared_link: requestParameters.shared_link
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeFromFolder(requestParameters.folderId, requestParameters.fields, sharedLinksFoldersRemoveFromFolderRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates a shared link on a folder.
         * @summary Update shared link on folder
         * @param {SharedLinksFoldersApiUpdateFolderSharedLinkRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateFolderSharedLink(requestParameters: SharedLinksFoldersApiUpdateFolderSharedLinkRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FolderFull>> {
            const sharedLinksFoldersUpdateFolderSharedLinkRequest: SharedLinksFoldersUpdateFolderSharedLinkRequest = {
                shared_link: requestParameters.shared_link
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateFolderSharedLink(requestParameters.folderId, requestParameters.fields, sharedLinksFoldersUpdateFolderSharedLinkRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SharedLinksFoldersApi - factory interface
 * @export
 */
export const SharedLinksFoldersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SharedLinksFoldersApiFp(configuration)
    return {
        /**
         * Adds a shared link to a folder.
         * @summary Add shared link to folder
         * @param {SharedLinksFoldersApiAddLinkToFolderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addLinkToFolder(requestParameters: SharedLinksFoldersApiAddLinkToFolderRequest, options?: AxiosRequestConfig): AxiosPromise<FolderFull> {
            return localVarFp.addLinkToFolder(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Return the folder represented by a shared link.  A shared folder can be represented by a shared link, which can originate within the current enterprise or within another.  This endpoint allows an application to retrieve information about a shared folder when only given a shared link.
         * @summary Find folder for shared link
         * @param {SharedLinksFoldersApiFindFolderBySharedLinkRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findFolderBySharedLink(requestParameters: SharedLinksFoldersApiFindFolderBySharedLinkRequest, options?: AxiosRequestConfig): AxiosPromise<FolderFull> {
            return localVarFp.findFolderBySharedLink(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets the information for a shared link on a folder.
         * @summary Get shared link for folder
         * @param {SharedLinksFoldersApiGetSharedLinkForFolderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSharedLinkForFolder(requestParameters: SharedLinksFoldersApiGetSharedLinkForFolderRequest, options?: AxiosRequestConfig): AxiosPromise<FolderFull> {
            return localVarFp.getSharedLinkForFolder(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Removes a shared link from a folder.
         * @summary Remove shared link from folder
         * @param {SharedLinksFoldersApiRemoveFromFolderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeFromFolder(requestParameters: SharedLinksFoldersApiRemoveFromFolderRequest, options?: AxiosRequestConfig): AxiosPromise<FolderFull> {
            return localVarFp.removeFromFolder(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates a shared link on a folder.
         * @summary Update shared link on folder
         * @param {SharedLinksFoldersApiUpdateFolderSharedLinkRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateFolderSharedLink(requestParameters: SharedLinksFoldersApiUpdateFolderSharedLinkRequest, options?: AxiosRequestConfig): AxiosPromise<FolderFull> {
            return localVarFp.updateFolderSharedLink(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addLinkToFolder operation in SharedLinksFoldersApi.
 * @export
 * @interface SharedLinksFoldersApiAddLinkToFolderRequest
 */
export type SharedLinksFoldersApiAddLinkToFolderRequest = {
    
    /**
    * The unique identifier that represent a folder.  The ID for any folder can be determined by visiting this folder in the web application and copying the ID from the URL. For example, for the URL `https://_*.app.box.com/folder/123` the `folder_id` is `123`.  The root folder of a Box account is always represented by the ID `0`.
    * @type {string}
    * @memberof SharedLinksFoldersApiAddLinkToFolder
    */
    readonly folderId: string
    
    /**
    * Explicitly request the `shared_link` fields to be returned for this item.
    * @type {string}
    * @memberof SharedLinksFoldersApiAddLinkToFolder
    */
    readonly fields: string
    
} & SharedLinksFoldersAddLinkToFolderRequest

/**
 * Request parameters for findFolderBySharedLink operation in SharedLinksFoldersApi.
 * @export
 * @interface SharedLinksFoldersApiFindFolderBySharedLinkRequest
 */
export type SharedLinksFoldersApiFindFolderBySharedLinkRequest = {
    
    /**
    * A header containing the shared link and optional password for the shared link.  The format for this header is as follows.  `shared_link=[link]&shared_link_password=[password]`
    * @type {string}
    * @memberof SharedLinksFoldersApiFindFolderBySharedLink
    */
    readonly boxapi: string
    
    /**
    * Ensures an item is only returned if it has changed.  Pass in the item\'s last observed `etag` value into this header and the endpoint will fail with a `304 Not Modified` if the item has not changed since.
    * @type {string}
    * @memberof SharedLinksFoldersApiFindFolderBySharedLink
    */
    readonly ifNoneMatch?: string
    
    /**
    * A comma-separated list of attributes to include in the response. This can be used to request fields that are not normally returned in a standard response.  Be aware that specifying this parameter will have the effect that none of the standard fields are returned in the response unless explicitly specified, instead only fields for the mini representation are returned, additional to the fields requested.
    * @type {Array<string>}
    * @memberof SharedLinksFoldersApiFindFolderBySharedLink
    */
    readonly fields?: Array<string>
    
}

/**
 * Request parameters for getSharedLinkForFolder operation in SharedLinksFoldersApi.
 * @export
 * @interface SharedLinksFoldersApiGetSharedLinkForFolderRequest
 */
export type SharedLinksFoldersApiGetSharedLinkForFolderRequest = {
    
    /**
    * The unique identifier that represent a folder.  The ID for any folder can be determined by visiting this folder in the web application and copying the ID from the URL. For example, for the URL `https://_*.app.box.com/folder/123` the `folder_id` is `123`.  The root folder of a Box account is always represented by the ID `0`.
    * @type {string}
    * @memberof SharedLinksFoldersApiGetSharedLinkForFolder
    */
    readonly folderId: string
    
    /**
    * Explicitly request the `shared_link` fields to be returned for this item.
    * @type {string}
    * @memberof SharedLinksFoldersApiGetSharedLinkForFolder
    */
    readonly fields: string
    
}

/**
 * Request parameters for removeFromFolder operation in SharedLinksFoldersApi.
 * @export
 * @interface SharedLinksFoldersApiRemoveFromFolderRequest
 */
export type SharedLinksFoldersApiRemoveFromFolderRequest = {
    
    /**
    * The unique identifier that represent a folder.  The ID for any folder can be determined by visiting this folder in the web application and copying the ID from the URL. For example, for the URL `https://_*.app.box.com/folder/123` the `folder_id` is `123`.  The root folder of a Box account is always represented by the ID `0`.
    * @type {string}
    * @memberof SharedLinksFoldersApiRemoveFromFolder
    */
    readonly folderId: string
    
    /**
    * Explicitly request the `shared_link` fields to be returned for this item.
    * @type {string}
    * @memberof SharedLinksFoldersApiRemoveFromFolder
    */
    readonly fields: string
    
} & SharedLinksFoldersRemoveFromFolderRequest

/**
 * Request parameters for updateFolderSharedLink operation in SharedLinksFoldersApi.
 * @export
 * @interface SharedLinksFoldersApiUpdateFolderSharedLinkRequest
 */
export type SharedLinksFoldersApiUpdateFolderSharedLinkRequest = {
    
    /**
    * The unique identifier that represent a folder.  The ID for any folder can be determined by visiting this folder in the web application and copying the ID from the URL. For example, for the URL `https://_*.app.box.com/folder/123` the `folder_id` is `123`.  The root folder of a Box account is always represented by the ID `0`.
    * @type {string}
    * @memberof SharedLinksFoldersApiUpdateFolderSharedLink
    */
    readonly folderId: string
    
    /**
    * Explicitly request the `shared_link` fields to be returned for this item.
    * @type {string}
    * @memberof SharedLinksFoldersApiUpdateFolderSharedLink
    */
    readonly fields: string
    
} & SharedLinksFoldersUpdateFolderSharedLinkRequest

/**
 * SharedLinksFoldersApiGenerated - object-oriented interface
 * @export
 * @class SharedLinksFoldersApiGenerated
 * @extends {BaseAPI}
 */
export class SharedLinksFoldersApiGenerated extends BaseAPI {
    /**
     * Adds a shared link to a folder.
     * @summary Add shared link to folder
     * @param {SharedLinksFoldersApiAddLinkToFolderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SharedLinksFoldersApiGenerated
     */
    public addLinkToFolder(requestParameters: SharedLinksFoldersApiAddLinkToFolderRequest, options?: AxiosRequestConfig) {
        return SharedLinksFoldersApiFp(this.configuration).addLinkToFolder(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Return the folder represented by a shared link.  A shared folder can be represented by a shared link, which can originate within the current enterprise or within another.  This endpoint allows an application to retrieve information about a shared folder when only given a shared link.
     * @summary Find folder for shared link
     * @param {SharedLinksFoldersApiFindFolderBySharedLinkRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SharedLinksFoldersApiGenerated
     */
    public findFolderBySharedLink(requestParameters: SharedLinksFoldersApiFindFolderBySharedLinkRequest, options?: AxiosRequestConfig) {
        return SharedLinksFoldersApiFp(this.configuration).findFolderBySharedLink(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets the information for a shared link on a folder.
     * @summary Get shared link for folder
     * @param {SharedLinksFoldersApiGetSharedLinkForFolderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SharedLinksFoldersApiGenerated
     */
    public getSharedLinkForFolder(requestParameters: SharedLinksFoldersApiGetSharedLinkForFolderRequest, options?: AxiosRequestConfig) {
        return SharedLinksFoldersApiFp(this.configuration).getSharedLinkForFolder(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Removes a shared link from a folder.
     * @summary Remove shared link from folder
     * @param {SharedLinksFoldersApiRemoveFromFolderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SharedLinksFoldersApiGenerated
     */
    public removeFromFolder(requestParameters: SharedLinksFoldersApiRemoveFromFolderRequest, options?: AxiosRequestConfig) {
        return SharedLinksFoldersApiFp(this.configuration).removeFromFolder(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates a shared link on a folder.
     * @summary Update shared link on folder
     * @param {SharedLinksFoldersApiUpdateFolderSharedLinkRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SharedLinksFoldersApiGenerated
     */
    public updateFolderSharedLink(requestParameters: SharedLinksFoldersApiUpdateFolderSharedLinkRequest, options?: AxiosRequestConfig) {
        return SharedLinksFoldersApiFp(this.configuration).updateFolderSharedLink(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
