/* tslint:disable */
/* eslint-disable */
/*
Box Platform API

[Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.

The version of the OpenAPI document: 2.0.0
Contact: devrel@box.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ClientError } from '../models';
// @ts-ignore
import { Collaboration } from '../models';
// @ts-ignore
import { CollaborationsUpdateCollaborationRequest } from '../models';
// @ts-ignore
import { PostCollaborationsRequest } from '../models';
// @ts-ignore
import { PostCollaborationsRequestAccessibleBy } from '../models';
// @ts-ignore
import { PostCollaborationsRequestItem } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * CollaborationsApi - axios parameter creator
 * @export
 */
export const CollaborationsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Adds a collaboration for a single user or a single group to a file or folder.  Collaborations can be created using email address, user IDs, or a group IDs.  If a collaboration is being created with a group, access to this endpoint is dependent on the group\'s ability to be invited.  If collaboration is in `pending` status, the following fields are redacted: - `login` and `name` are hidden if a collaboration was created using `user_id`, -  `name` is hidden if a collaboration was created using `login`.
         * @summary Create collaboration
         * @param {Array<string>} [fields] A comma-separated list of attributes to include in the response. This can be used to request fields that are not normally returned in a standard response.  Be aware that specifying this parameter will have the effect that none of the standard fields are returned in the response unless explicitly specified, instead only fields for the mini representation are returned, additional to the fields requested.
         * @param {boolean} [notify] Determines if users should receive email notification for the action performed.
         * @param {PostCollaborationsRequest} [postCollaborationsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collaborations: async (fields?: Array<string>, notify?: boolean, postCollaborationsRequest?: PostCollaborationsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/collaborations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2Security required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Security", [], configuration)
            if (fields) {
                localVarQueryParameter['fields'] = fields.join(COLLECTION_FORMATS.csv);
            }

            if (notify !== undefined) {
                localVarQueryParameter['notify'] = notify;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: postCollaborationsRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/collaborations',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(postCollaborationsRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a single collaboration.
         * @summary Get collaboration
         * @param {string} collaborationId The ID of the collaboration
         * @param {Array<string>} [fields] A comma-separated list of attributes to include in the response. This can be used to request fields that are not normally returned in a standard response.  Be aware that specifying this parameter will have the effect that none of the standard fields are returned in the response unless explicitly specified, instead only fields for the mini representation are returned, additional to the fields requested.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingleCollaboration: async (collaborationId: string, fields?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'collaborationId' is not null or undefined
            assertParamExists('getSingleCollaboration', 'collaborationId', collaborationId)
            const localVarPath = `/collaborations/{collaboration_id}`
                .replace(`{${"collaboration_id"}}`, encodeURIComponent(String(collaborationId !== undefined ? collaborationId : `-collaboration_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2Security required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Security", [], configuration)
            if (fields) {
                localVarQueryParameter['fields'] = fields.join(COLLECTION_FORMATS.csv);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/collaborations/{collaboration_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a single collaboration.
         * @summary Remove collaboration
         * @param {string} collaborationId The ID of the collaboration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeSingleCollaboration: async (collaborationId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'collaborationId' is not null or undefined
            assertParamExists('removeSingleCollaboration', 'collaborationId', collaborationId)
            const localVarPath = `/collaborations/{collaboration_id}`
                .replace(`{${"collaboration_id"}}`, encodeURIComponent(String(collaborationId !== undefined ? collaborationId : `-collaboration_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2Security required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Security", [], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/collaborations/{collaboration_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates a collaboration. Can be used to change the owner of an item, or to accept collaboration invites.
         * @summary Update collaboration
         * @param {string} collaborationId The ID of the collaboration
         * @param {CollaborationsUpdateCollaborationRequest} [collaborationsUpdateCollaborationRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCollaboration: async (collaborationId: string, collaborationsUpdateCollaborationRequest?: CollaborationsUpdateCollaborationRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'collaborationId' is not null or undefined
            assertParamExists('updateCollaboration', 'collaborationId', collaborationId)
            const localVarPath = `/collaborations/{collaboration_id}`
                .replace(`{${"collaboration_id"}}`, encodeURIComponent(String(collaborationId !== undefined ? collaborationId : `-collaboration_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2Security required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Security", [], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: collaborationsUpdateCollaborationRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/collaborations/{collaboration_id}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(collaborationsUpdateCollaborationRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CollaborationsApi - functional programming interface
 * @export
 */
export const CollaborationsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CollaborationsApiAxiosParamCreator(configuration)
    return {
        /**
         * Adds a collaboration for a single user or a single group to a file or folder.  Collaborations can be created using email address, user IDs, or a group IDs.  If a collaboration is being created with a group, access to this endpoint is dependent on the group\'s ability to be invited.  If collaboration is in `pending` status, the following fields are redacted: - `login` and `name` are hidden if a collaboration was created using `user_id`, -  `name` is hidden if a collaboration was created using `login`.
         * @summary Create collaboration
         * @param {CollaborationsApiCollaborationsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async collaborations(requestParameters: CollaborationsApiCollaborationsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Collaboration>> {
            const postCollaborationsRequest: PostCollaborationsRequest = {
                item: requestParameters.item,
                accessible_by: requestParameters.accessible_by,
                role: requestParameters.role,
                is_access_only: requestParameters.is_access_only,
                can_view_path: requestParameters.can_view_path,
                expires_at: requestParameters.expires_at
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.collaborations(requestParameters.fields, requestParameters.notify, postCollaborationsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a single collaboration.
         * @summary Get collaboration
         * @param {CollaborationsApiGetSingleCollaborationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSingleCollaboration(requestParameters: CollaborationsApiGetSingleCollaborationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Collaboration>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSingleCollaboration(requestParameters.collaborationId, requestParameters.fields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Deletes a single collaboration.
         * @summary Remove collaboration
         * @param {CollaborationsApiRemoveSingleCollaborationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeSingleCollaboration(requestParameters: CollaborationsApiRemoveSingleCollaborationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeSingleCollaboration(requestParameters.collaborationId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates a collaboration. Can be used to change the owner of an item, or to accept collaboration invites.
         * @summary Update collaboration
         * @param {CollaborationsApiUpdateCollaborationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCollaboration(requestParameters: CollaborationsApiUpdateCollaborationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Collaboration>> {
            const collaborationsUpdateCollaborationRequest: CollaborationsUpdateCollaborationRequest = {
                role: requestParameters.role,
                status: requestParameters.status,
                expires_at: requestParameters.expires_at,
                can_view_path: requestParameters.can_view_path
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateCollaboration(requestParameters.collaborationId, collaborationsUpdateCollaborationRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CollaborationsApi - factory interface
 * @export
 */
export const CollaborationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CollaborationsApiFp(configuration)
    return {
        /**
         * Adds a collaboration for a single user or a single group to a file or folder.  Collaborations can be created using email address, user IDs, or a group IDs.  If a collaboration is being created with a group, access to this endpoint is dependent on the group\'s ability to be invited.  If collaboration is in `pending` status, the following fields are redacted: - `login` and `name` are hidden if a collaboration was created using `user_id`, -  `name` is hidden if a collaboration was created using `login`.
         * @summary Create collaboration
         * @param {CollaborationsApiCollaborationsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collaborations(requestParameters: CollaborationsApiCollaborationsRequest, options?: AxiosRequestConfig): AxiosPromise<Collaboration> {
            return localVarFp.collaborations(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a single collaboration.
         * @summary Get collaboration
         * @param {CollaborationsApiGetSingleCollaborationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingleCollaboration(requestParameters: CollaborationsApiGetSingleCollaborationRequest, options?: AxiosRequestConfig): AxiosPromise<Collaboration> {
            return localVarFp.getSingleCollaboration(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes a single collaboration.
         * @summary Remove collaboration
         * @param {CollaborationsApiRemoveSingleCollaborationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeSingleCollaboration(requestParameters: CollaborationsApiRemoveSingleCollaborationRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.removeSingleCollaboration(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates a collaboration. Can be used to change the owner of an item, or to accept collaboration invites.
         * @summary Update collaboration
         * @param {CollaborationsApiUpdateCollaborationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCollaboration(requestParameters: CollaborationsApiUpdateCollaborationRequest, options?: AxiosRequestConfig): AxiosPromise<Collaboration> {
            return localVarFp.updateCollaboration(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for collaborations operation in CollaborationsApi.
 * @export
 * @interface CollaborationsApiCollaborationsRequest
 */
export type CollaborationsApiCollaborationsRequest = {
    
    /**
    * A comma-separated list of attributes to include in the response. This can be used to request fields that are not normally returned in a standard response.  Be aware that specifying this parameter will have the effect that none of the standard fields are returned in the response unless explicitly specified, instead only fields for the mini representation are returned, additional to the fields requested.
    * @type {Array<string>}
    * @memberof CollaborationsApiCollaborations
    */
    readonly fields?: Array<string>
    
    /**
    * Determines if users should receive email notification for the action performed.
    * @type {boolean}
    * @memberof CollaborationsApiCollaborations
    */
    readonly notify?: boolean
    
} & PostCollaborationsRequest

/**
 * Request parameters for getSingleCollaboration operation in CollaborationsApi.
 * @export
 * @interface CollaborationsApiGetSingleCollaborationRequest
 */
export type CollaborationsApiGetSingleCollaborationRequest = {
    
    /**
    * The ID of the collaboration
    * @type {string}
    * @memberof CollaborationsApiGetSingleCollaboration
    */
    readonly collaborationId: string
    
    /**
    * A comma-separated list of attributes to include in the response. This can be used to request fields that are not normally returned in a standard response.  Be aware that specifying this parameter will have the effect that none of the standard fields are returned in the response unless explicitly specified, instead only fields for the mini representation are returned, additional to the fields requested.
    * @type {Array<string>}
    * @memberof CollaborationsApiGetSingleCollaboration
    */
    readonly fields?: Array<string>
    
}

/**
 * Request parameters for removeSingleCollaboration operation in CollaborationsApi.
 * @export
 * @interface CollaborationsApiRemoveSingleCollaborationRequest
 */
export type CollaborationsApiRemoveSingleCollaborationRequest = {
    
    /**
    * The ID of the collaboration
    * @type {string}
    * @memberof CollaborationsApiRemoveSingleCollaboration
    */
    readonly collaborationId: string
    
}

/**
 * Request parameters for updateCollaboration operation in CollaborationsApi.
 * @export
 * @interface CollaborationsApiUpdateCollaborationRequest
 */
export type CollaborationsApiUpdateCollaborationRequest = {
    
    /**
    * The ID of the collaboration
    * @type {string}
    * @memberof CollaborationsApiUpdateCollaboration
    */
    readonly collaborationId: string
    
} & CollaborationsUpdateCollaborationRequest

/**
 * CollaborationsApiGenerated - object-oriented interface
 * @export
 * @class CollaborationsApiGenerated
 * @extends {BaseAPI}
 */
export class CollaborationsApiGenerated extends BaseAPI {
    /**
     * Adds a collaboration for a single user or a single group to a file or folder.  Collaborations can be created using email address, user IDs, or a group IDs.  If a collaboration is being created with a group, access to this endpoint is dependent on the group\'s ability to be invited.  If collaboration is in `pending` status, the following fields are redacted: - `login` and `name` are hidden if a collaboration was created using `user_id`, -  `name` is hidden if a collaboration was created using `login`.
     * @summary Create collaboration
     * @param {CollaborationsApiCollaborationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CollaborationsApiGenerated
     */
    public collaborations(requestParameters: CollaborationsApiCollaborationsRequest, options?: AxiosRequestConfig) {
        return CollaborationsApiFp(this.configuration).collaborations(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a single collaboration.
     * @summary Get collaboration
     * @param {CollaborationsApiGetSingleCollaborationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CollaborationsApiGenerated
     */
    public getSingleCollaboration(requestParameters: CollaborationsApiGetSingleCollaborationRequest, options?: AxiosRequestConfig) {
        return CollaborationsApiFp(this.configuration).getSingleCollaboration(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes a single collaboration.
     * @summary Remove collaboration
     * @param {CollaborationsApiRemoveSingleCollaborationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CollaborationsApiGenerated
     */
    public removeSingleCollaboration(requestParameters: CollaborationsApiRemoveSingleCollaborationRequest, options?: AxiosRequestConfig) {
        return CollaborationsApiFp(this.configuration).removeSingleCollaboration(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates a collaboration. Can be used to change the owner of an item, or to accept collaboration invites.
     * @summary Update collaboration
     * @param {CollaborationsApiUpdateCollaborationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CollaborationsApiGenerated
     */
    public updateCollaboration(requestParameters: CollaborationsApiUpdateCollaborationRequest, options?: AxiosRequestConfig) {
        return CollaborationsApiFp(this.configuration).updateCollaboration(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
