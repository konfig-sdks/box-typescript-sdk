/* tslint:disable */
/* eslint-disable */
/*
Box Platform API

[Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.

The version of the OpenAPI document: 2.0.0
Contact: devrel@box.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ClientError } from '../models';
// @ts-ignore
import { ShieldInformationBarrierBase } from '../models';
// @ts-ignore
import { ShieldInformationBarrierSegment } from '../models';
// @ts-ignore
import { ShieldInformationBarrierSegments } from '../models';
// @ts-ignore
import { ShieldInformationBarrierSegmentsCreateSegmentRequest } from '../models';
// @ts-ignore
import { ShieldInformationBarrierSegmentsUpdateByIdRequest } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * ShieldInformationBarrierSegmentsApi - axios parameter creator
 * @export
 */
export const ShieldInformationBarrierSegmentsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a shield information barrier segment.
         * @summary Create shield information barrier segment
         * @param {ShieldInformationBarrierSegmentsCreateSegmentRequest} [shieldInformationBarrierSegmentsCreateSegmentRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSegment: async (shieldInformationBarrierSegmentsCreateSegmentRequest?: ShieldInformationBarrierSegmentsCreateSegmentRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/shield_information_barrier_segments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2Security required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Security", [], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: shieldInformationBarrierSegmentsCreateSegmentRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/shield_information_barrier_segments',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(shieldInformationBarrierSegmentsCreateSegmentRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes the shield information barrier segment based on provided ID.
         * @summary Delete shield information barrier segment
         * @param {string} shieldInformationBarrierSegmentId The ID of the shield information barrier segment.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSegmentById: async (shieldInformationBarrierSegmentId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'shieldInformationBarrierSegmentId' is not null or undefined
            assertParamExists('deleteSegmentById', 'shieldInformationBarrierSegmentId', shieldInformationBarrierSegmentId)
            const localVarPath = `/shield_information_barrier_segments/{shield_information_barrier_segment_id}`
                .replace(`{${"shield_information_barrier_segment_id"}}`, encodeURIComponent(String(shieldInformationBarrierSegmentId !== undefined ? shieldInformationBarrierSegmentId : `-shield_information_barrier_segment_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2Security required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Security", [], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/shield_information_barrier_segments/{shield_information_barrier_segment_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves shield information barrier segment based on provided ID..
         * @summary Get shield information barrier segment with specified ID
         * @param {string} shieldInformationBarrierSegmentId The ID of the shield information barrier segment.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById: async (shieldInformationBarrierSegmentId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'shieldInformationBarrierSegmentId' is not null or undefined
            assertParamExists('getById', 'shieldInformationBarrierSegmentId', shieldInformationBarrierSegmentId)
            const localVarPath = `/shield_information_barrier_segments/{shield_information_barrier_segment_id}`
                .replace(`{${"shield_information_barrier_segment_id"}}`, encodeURIComponent(String(shieldInformationBarrierSegmentId !== undefined ? shieldInformationBarrierSegmentId : `-shield_information_barrier_segment_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2Security required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Security", [], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/shield_information_barrier_segments/{shield_information_barrier_segment_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a list of shield information barrier segment objects for the specified Information Barrier ID.
         * @summary List shield information barrier segments
         * @param {string} shieldInformationBarrierId The ID of the shield information barrier.
         * @param {string} [marker] Defines the position marker at which to begin returning results. This is used when paginating using marker-based pagination.  This requires &#x60;usemarker&#x60; to be set to &#x60;true&#x60;.
         * @param {number} [limit] The maximum number of items to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listInformationObjects: async (shieldInformationBarrierId: string, marker?: string, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'shieldInformationBarrierId' is not null or undefined
            assertParamExists('listInformationObjects', 'shieldInformationBarrierId', shieldInformationBarrierId)
            const localVarPath = `/shield_information_barrier_segments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2Security required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Security", [], configuration)
            if (shieldInformationBarrierId !== undefined) {
                localVarQueryParameter['shield_information_barrier_id'] = shieldInformationBarrierId;
            }

            if (marker !== undefined) {
                localVarQueryParameter['marker'] = marker;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/shield_information_barrier_segments',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates the shield information barrier segment based on provided ID..
         * @summary Update shield information barrier segment with specified ID
         * @param {string} shieldInformationBarrierSegmentId The ID of the shield information barrier segment.
         * @param {ShieldInformationBarrierSegmentsUpdateByIdRequest} [shieldInformationBarrierSegmentsUpdateByIdRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateById: async (shieldInformationBarrierSegmentId: string, shieldInformationBarrierSegmentsUpdateByIdRequest?: ShieldInformationBarrierSegmentsUpdateByIdRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'shieldInformationBarrierSegmentId' is not null or undefined
            assertParamExists('updateById', 'shieldInformationBarrierSegmentId', shieldInformationBarrierSegmentId)
            const localVarPath = `/shield_information_barrier_segments/{shield_information_barrier_segment_id}`
                .replace(`{${"shield_information_barrier_segment_id"}}`, encodeURIComponent(String(shieldInformationBarrierSegmentId !== undefined ? shieldInformationBarrierSegmentId : `-shield_information_barrier_segment_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2Security required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Security", [], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: shieldInformationBarrierSegmentsUpdateByIdRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/shield_information_barrier_segments/{shield_information_barrier_segment_id}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(shieldInformationBarrierSegmentsUpdateByIdRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ShieldInformationBarrierSegmentsApi - functional programming interface
 * @export
 */
export const ShieldInformationBarrierSegmentsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ShieldInformationBarrierSegmentsApiAxiosParamCreator(configuration)
    return {
        /**
         * Creates a shield information barrier segment.
         * @summary Create shield information barrier segment
         * @param {ShieldInformationBarrierSegmentsApiCreateSegmentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createSegment(requestParameters: ShieldInformationBarrierSegmentsApiCreateSegmentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShieldInformationBarrierSegment>> {
            const shieldInformationBarrierSegmentsCreateSegmentRequest: ShieldInformationBarrierSegmentsCreateSegmentRequest = {
                description: requestParameters.description,
                shield_information_barrier: requestParameters.shield_information_barrier,
                name: requestParameters.name
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createSegment(shieldInformationBarrierSegmentsCreateSegmentRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Deletes the shield information barrier segment based on provided ID.
         * @summary Delete shield information barrier segment
         * @param {ShieldInformationBarrierSegmentsApiDeleteSegmentByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSegmentById(requestParameters: ShieldInformationBarrierSegmentsApiDeleteSegmentByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteSegmentById(requestParameters.shieldInformationBarrierSegmentId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves shield information barrier segment based on provided ID..
         * @summary Get shield information barrier segment with specified ID
         * @param {ShieldInformationBarrierSegmentsApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getById(requestParameters: ShieldInformationBarrierSegmentsApiGetByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShieldInformationBarrierSegment>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getById(requestParameters.shieldInformationBarrierSegmentId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a list of shield information barrier segment objects for the specified Information Barrier ID.
         * @summary List shield information barrier segments
         * @param {ShieldInformationBarrierSegmentsApiListInformationObjectsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listInformationObjects(requestParameters: ShieldInformationBarrierSegmentsApiListInformationObjectsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShieldInformationBarrierSegments>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listInformationObjects(requestParameters.shieldInformationBarrierId, requestParameters.marker, requestParameters.limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates the shield information barrier segment based on provided ID..
         * @summary Update shield information barrier segment with specified ID
         * @param {ShieldInformationBarrierSegmentsApiUpdateByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateById(requestParameters: ShieldInformationBarrierSegmentsApiUpdateByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShieldInformationBarrierSegment>> {
            const shieldInformationBarrierSegmentsUpdateByIdRequest: ShieldInformationBarrierSegmentsUpdateByIdRequest = {
                description: requestParameters.description,
                name: requestParameters.name
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateById(requestParameters.shieldInformationBarrierSegmentId, shieldInformationBarrierSegmentsUpdateByIdRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ShieldInformationBarrierSegmentsApi - factory interface
 * @export
 */
export const ShieldInformationBarrierSegmentsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ShieldInformationBarrierSegmentsApiFp(configuration)
    return {
        /**
         * Creates a shield information barrier segment.
         * @summary Create shield information barrier segment
         * @param {ShieldInformationBarrierSegmentsApiCreateSegmentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSegment(requestParameters: ShieldInformationBarrierSegmentsApiCreateSegmentRequest, options?: AxiosRequestConfig): AxiosPromise<ShieldInformationBarrierSegment> {
            return localVarFp.createSegment(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes the shield information barrier segment based on provided ID.
         * @summary Delete shield information barrier segment
         * @param {ShieldInformationBarrierSegmentsApiDeleteSegmentByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSegmentById(requestParameters: ShieldInformationBarrierSegmentsApiDeleteSegmentByIdRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteSegmentById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves shield information barrier segment based on provided ID..
         * @summary Get shield information barrier segment with specified ID
         * @param {ShieldInformationBarrierSegmentsApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById(requestParameters: ShieldInformationBarrierSegmentsApiGetByIdRequest, options?: AxiosRequestConfig): AxiosPromise<ShieldInformationBarrierSegment> {
            return localVarFp.getById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a list of shield information barrier segment objects for the specified Information Barrier ID.
         * @summary List shield information barrier segments
         * @param {ShieldInformationBarrierSegmentsApiListInformationObjectsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listInformationObjects(requestParameters: ShieldInformationBarrierSegmentsApiListInformationObjectsRequest, options?: AxiosRequestConfig): AxiosPromise<ShieldInformationBarrierSegments> {
            return localVarFp.listInformationObjects(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates the shield information barrier segment based on provided ID..
         * @summary Update shield information barrier segment with specified ID
         * @param {ShieldInformationBarrierSegmentsApiUpdateByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateById(requestParameters: ShieldInformationBarrierSegmentsApiUpdateByIdRequest, options?: AxiosRequestConfig): AxiosPromise<ShieldInformationBarrierSegment> {
            return localVarFp.updateById(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createSegment operation in ShieldInformationBarrierSegmentsApi.
 * @export
 * @interface ShieldInformationBarrierSegmentsApiCreateSegmentRequest
 */
export type ShieldInformationBarrierSegmentsApiCreateSegmentRequest = {
    
} & ShieldInformationBarrierSegmentsCreateSegmentRequest

/**
 * Request parameters for deleteSegmentById operation in ShieldInformationBarrierSegmentsApi.
 * @export
 * @interface ShieldInformationBarrierSegmentsApiDeleteSegmentByIdRequest
 */
export type ShieldInformationBarrierSegmentsApiDeleteSegmentByIdRequest = {
    
    /**
    * The ID of the shield information barrier segment.
    * @type {string}
    * @memberof ShieldInformationBarrierSegmentsApiDeleteSegmentById
    */
    readonly shieldInformationBarrierSegmentId: string
    
}

/**
 * Request parameters for getById operation in ShieldInformationBarrierSegmentsApi.
 * @export
 * @interface ShieldInformationBarrierSegmentsApiGetByIdRequest
 */
export type ShieldInformationBarrierSegmentsApiGetByIdRequest = {
    
    /**
    * The ID of the shield information barrier segment.
    * @type {string}
    * @memberof ShieldInformationBarrierSegmentsApiGetById
    */
    readonly shieldInformationBarrierSegmentId: string
    
}

/**
 * Request parameters for listInformationObjects operation in ShieldInformationBarrierSegmentsApi.
 * @export
 * @interface ShieldInformationBarrierSegmentsApiListInformationObjectsRequest
 */
export type ShieldInformationBarrierSegmentsApiListInformationObjectsRequest = {
    
    /**
    * The ID of the shield information barrier.
    * @type {string}
    * @memberof ShieldInformationBarrierSegmentsApiListInformationObjects
    */
    readonly shieldInformationBarrierId: string
    
    /**
    * Defines the position marker at which to begin returning results. This is used when paginating using marker-based pagination.  This requires `usemarker` to be set to `true`.
    * @type {string}
    * @memberof ShieldInformationBarrierSegmentsApiListInformationObjects
    */
    readonly marker?: string
    
    /**
    * The maximum number of items to return per page.
    * @type {number}
    * @memberof ShieldInformationBarrierSegmentsApiListInformationObjects
    */
    readonly limit?: number
    
}

/**
 * Request parameters for updateById operation in ShieldInformationBarrierSegmentsApi.
 * @export
 * @interface ShieldInformationBarrierSegmentsApiUpdateByIdRequest
 */
export type ShieldInformationBarrierSegmentsApiUpdateByIdRequest = {
    
    /**
    * The ID of the shield information barrier segment.
    * @type {string}
    * @memberof ShieldInformationBarrierSegmentsApiUpdateById
    */
    readonly shieldInformationBarrierSegmentId: string
    
} & ShieldInformationBarrierSegmentsUpdateByIdRequest

/**
 * ShieldInformationBarrierSegmentsApiGenerated - object-oriented interface
 * @export
 * @class ShieldInformationBarrierSegmentsApiGenerated
 * @extends {BaseAPI}
 */
export class ShieldInformationBarrierSegmentsApiGenerated extends BaseAPI {
    /**
     * Creates a shield information barrier segment.
     * @summary Create shield information barrier segment
     * @param {ShieldInformationBarrierSegmentsApiCreateSegmentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShieldInformationBarrierSegmentsApiGenerated
     */
    public createSegment(requestParameters: ShieldInformationBarrierSegmentsApiCreateSegmentRequest, options?: AxiosRequestConfig) {
        return ShieldInformationBarrierSegmentsApiFp(this.configuration).createSegment(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes the shield information barrier segment based on provided ID.
     * @summary Delete shield information barrier segment
     * @param {ShieldInformationBarrierSegmentsApiDeleteSegmentByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShieldInformationBarrierSegmentsApiGenerated
     */
    public deleteSegmentById(requestParameters: ShieldInformationBarrierSegmentsApiDeleteSegmentByIdRequest, options?: AxiosRequestConfig) {
        return ShieldInformationBarrierSegmentsApiFp(this.configuration).deleteSegmentById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves shield information barrier segment based on provided ID..
     * @summary Get shield information barrier segment with specified ID
     * @param {ShieldInformationBarrierSegmentsApiGetByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShieldInformationBarrierSegmentsApiGenerated
     */
    public getById(requestParameters: ShieldInformationBarrierSegmentsApiGetByIdRequest, options?: AxiosRequestConfig) {
        return ShieldInformationBarrierSegmentsApiFp(this.configuration).getById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a list of shield information barrier segment objects for the specified Information Barrier ID.
     * @summary List shield information barrier segments
     * @param {ShieldInformationBarrierSegmentsApiListInformationObjectsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShieldInformationBarrierSegmentsApiGenerated
     */
    public listInformationObjects(requestParameters: ShieldInformationBarrierSegmentsApiListInformationObjectsRequest, options?: AxiosRequestConfig) {
        return ShieldInformationBarrierSegmentsApiFp(this.configuration).listInformationObjects(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates the shield information barrier segment based on provided ID..
     * @summary Update shield information barrier segment with specified ID
     * @param {ShieldInformationBarrierSegmentsApiUpdateByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShieldInformationBarrierSegmentsApiGenerated
     */
    public updateById(requestParameters: ShieldInformationBarrierSegmentsApiUpdateByIdRequest, options?: AxiosRequestConfig) {
        return ShieldInformationBarrierSegmentsApiFp(this.configuration).updateById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
