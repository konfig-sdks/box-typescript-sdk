/* tslint:disable */
/* eslint-disable */
/*
Box Platform API

[Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.

The version of the OpenAPI document: 2.0.0
Contact: devrel@box.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ClientError } from '../models';
// @ts-ignore
import { Watermark } from '../models';
// @ts-ignore
import { WatermarksFoldersApplyToFolderRequest } from '../models';
// @ts-ignore
import { WatermarksFoldersApplyToFolderRequestWatermark } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * WatermarksFoldersApi - axios parameter creator
 * @export
 */
export const WatermarksFoldersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Applies or update a watermark on a folder.
         * @summary Apply watermark to folder
         * @param {string} folderId The unique identifier that represent a folder.  The ID for any folder can be determined by visiting this folder in the web application and copying the ID from the URL. For example, for the URL &#x60;https://_*.app.box.com/folder/123&#x60; the &#x60;folder_id&#x60; is &#x60;123&#x60;.  The root folder of a Box account is always represented by the ID &#x60;0&#x60;.
         * @param {WatermarksFoldersApplyToFolderRequest} [watermarksFoldersApplyToFolderRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        applyToFolder: async (folderId: string, watermarksFoldersApplyToFolderRequest?: WatermarksFoldersApplyToFolderRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'folderId' is not null or undefined
            assertParamExists('applyToFolder', 'folderId', folderId)
            const localVarPath = `/folders/{folder_id}/watermark`
                .replace(`{${"folder_id"}}`, encodeURIComponent(String(folderId !== undefined ? folderId : `-folder_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2Security required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Security", [], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: watermarksFoldersApplyToFolderRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/folders/{folder_id}/watermark',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(watermarksFoldersApplyToFolderRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve the watermark for a folder.
         * @summary Get watermark for folder
         * @param {string} folderId The unique identifier that represent a folder.  The ID for any folder can be determined by visiting this folder in the web application and copying the ID from the URL. For example, for the URL &#x60;https://_*.app.box.com/folder/123&#x60; the &#x60;folder_id&#x60; is &#x60;123&#x60;.  The root folder of a Box account is always represented by the ID &#x60;0&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFolderWatermark: async (folderId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'folderId' is not null or undefined
            assertParamExists('getFolderWatermark', 'folderId', folderId)
            const localVarPath = `/folders/{folder_id}/watermark`
                .replace(`{${"folder_id"}}`, encodeURIComponent(String(folderId !== undefined ? folderId : `-folder_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2Security required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Security", [], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/folders/{folder_id}/watermark',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Removes the watermark from a folder.
         * @summary Remove watermark from folder
         * @param {string} folderId The unique identifier that represent a folder.  The ID for any folder can be determined by visiting this folder in the web application and copying the ID from the URL. For example, for the URL &#x60;https://_*.app.box.com/folder/123&#x60; the &#x60;folder_id&#x60; is &#x60;123&#x60;.  The root folder of a Box account is always represented by the ID &#x60;0&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeFolderWatermark: async (folderId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'folderId' is not null or undefined
            assertParamExists('removeFolderWatermark', 'folderId', folderId)
            const localVarPath = `/folders/{folder_id}/watermark`
                .replace(`{${"folder_id"}}`, encodeURIComponent(String(folderId !== undefined ? folderId : `-folder_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2Security required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Security", [], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/folders/{folder_id}/watermark',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WatermarksFoldersApi - functional programming interface
 * @export
 */
export const WatermarksFoldersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WatermarksFoldersApiAxiosParamCreator(configuration)
    return {
        /**
         * Applies or update a watermark on a folder.
         * @summary Apply watermark to folder
         * @param {WatermarksFoldersApiApplyToFolderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async applyToFolder(requestParameters: WatermarksFoldersApiApplyToFolderRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Watermark>> {
            const watermarksFoldersApplyToFolderRequest: WatermarksFoldersApplyToFolderRequest = {
                watermark: requestParameters.watermark
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.applyToFolder(requestParameters.folderId, watermarksFoldersApplyToFolderRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve the watermark for a folder.
         * @summary Get watermark for folder
         * @param {WatermarksFoldersApiGetFolderWatermarkRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFolderWatermark(requestParameters: WatermarksFoldersApiGetFolderWatermarkRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Watermark>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFolderWatermark(requestParameters.folderId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Removes the watermark from a folder.
         * @summary Remove watermark from folder
         * @param {WatermarksFoldersApiRemoveFolderWatermarkRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeFolderWatermark(requestParameters: WatermarksFoldersApiRemoveFolderWatermarkRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeFolderWatermark(requestParameters.folderId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * WatermarksFoldersApi - factory interface
 * @export
 */
export const WatermarksFoldersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WatermarksFoldersApiFp(configuration)
    return {
        /**
         * Applies or update a watermark on a folder.
         * @summary Apply watermark to folder
         * @param {WatermarksFoldersApiApplyToFolderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        applyToFolder(requestParameters: WatermarksFoldersApiApplyToFolderRequest, options?: AxiosRequestConfig): AxiosPromise<Watermark> {
            return localVarFp.applyToFolder(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve the watermark for a folder.
         * @summary Get watermark for folder
         * @param {WatermarksFoldersApiGetFolderWatermarkRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFolderWatermark(requestParameters: WatermarksFoldersApiGetFolderWatermarkRequest, options?: AxiosRequestConfig): AxiosPromise<Watermark> {
            return localVarFp.getFolderWatermark(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Removes the watermark from a folder.
         * @summary Remove watermark from folder
         * @param {WatermarksFoldersApiRemoveFolderWatermarkRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeFolderWatermark(requestParameters: WatermarksFoldersApiRemoveFolderWatermarkRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.removeFolderWatermark(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for applyToFolder operation in WatermarksFoldersApi.
 * @export
 * @interface WatermarksFoldersApiApplyToFolderRequest
 */
export type WatermarksFoldersApiApplyToFolderRequest = {
    
    /**
    * The unique identifier that represent a folder.  The ID for any folder can be determined by visiting this folder in the web application and copying the ID from the URL. For example, for the URL `https://_*.app.box.com/folder/123` the `folder_id` is `123`.  The root folder of a Box account is always represented by the ID `0`.
    * @type {string}
    * @memberof WatermarksFoldersApiApplyToFolder
    */
    readonly folderId: string
    
} & WatermarksFoldersApplyToFolderRequest

/**
 * Request parameters for getFolderWatermark operation in WatermarksFoldersApi.
 * @export
 * @interface WatermarksFoldersApiGetFolderWatermarkRequest
 */
export type WatermarksFoldersApiGetFolderWatermarkRequest = {
    
    /**
    * The unique identifier that represent a folder.  The ID for any folder can be determined by visiting this folder in the web application and copying the ID from the URL. For example, for the URL `https://_*.app.box.com/folder/123` the `folder_id` is `123`.  The root folder of a Box account is always represented by the ID `0`.
    * @type {string}
    * @memberof WatermarksFoldersApiGetFolderWatermark
    */
    readonly folderId: string
    
}

/**
 * Request parameters for removeFolderWatermark operation in WatermarksFoldersApi.
 * @export
 * @interface WatermarksFoldersApiRemoveFolderWatermarkRequest
 */
export type WatermarksFoldersApiRemoveFolderWatermarkRequest = {
    
    /**
    * The unique identifier that represent a folder.  The ID for any folder can be determined by visiting this folder in the web application and copying the ID from the URL. For example, for the URL `https://_*.app.box.com/folder/123` the `folder_id` is `123`.  The root folder of a Box account is always represented by the ID `0`.
    * @type {string}
    * @memberof WatermarksFoldersApiRemoveFolderWatermark
    */
    readonly folderId: string
    
}

/**
 * WatermarksFoldersApiGenerated - object-oriented interface
 * @export
 * @class WatermarksFoldersApiGenerated
 * @extends {BaseAPI}
 */
export class WatermarksFoldersApiGenerated extends BaseAPI {
    /**
     * Applies or update a watermark on a folder.
     * @summary Apply watermark to folder
     * @param {WatermarksFoldersApiApplyToFolderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WatermarksFoldersApiGenerated
     */
    public applyToFolder(requestParameters: WatermarksFoldersApiApplyToFolderRequest, options?: AxiosRequestConfig) {
        return WatermarksFoldersApiFp(this.configuration).applyToFolder(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve the watermark for a folder.
     * @summary Get watermark for folder
     * @param {WatermarksFoldersApiGetFolderWatermarkRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WatermarksFoldersApiGenerated
     */
    public getFolderWatermark(requestParameters: WatermarksFoldersApiGetFolderWatermarkRequest, options?: AxiosRequestConfig) {
        return WatermarksFoldersApiFp(this.configuration).getFolderWatermark(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Removes the watermark from a folder.
     * @summary Remove watermark from folder
     * @param {WatermarksFoldersApiRemoveFolderWatermarkRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WatermarksFoldersApiGenerated
     */
    public removeFolderWatermark(requestParameters: WatermarksFoldersApiRemoveFolderWatermarkRequest, options?: AxiosRequestConfig) {
        return WatermarksFoldersApiFp(this.configuration).removeFolderWatermark(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
