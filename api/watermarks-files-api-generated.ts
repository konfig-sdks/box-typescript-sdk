/* tslint:disable */
/* eslint-disable */
/*
Box Platform API

[Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.

The version of the OpenAPI document: 2.0.0
Contact: devrel@box.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ClientError } from '../models';
// @ts-ignore
import { Watermark } from '../models';
// @ts-ignore
import { WatermarksFilesApplyWatermarkToFileRequest } from '../models';
// @ts-ignore
import { WatermarksFilesApplyWatermarkToFileRequestWatermark } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * WatermarksFilesApi - axios parameter creator
 * @export
 */
export const WatermarksFilesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Applies or update a watermark on a file.
         * @summary Apply watermark to file
         * @param {string} fileId The unique identifier that represents a file.  The ID for any file can be determined by visiting a file in the web application and copying the ID from the URL. For example, for the URL &#x60;https://_*.app.box.com/files/123&#x60; the &#x60;file_id&#x60; is &#x60;123&#x60;.
         * @param {WatermarksFilesApplyWatermarkToFileRequest} [watermarksFilesApplyWatermarkToFileRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        applyWatermarkToFile: async (fileId: string, watermarksFilesApplyWatermarkToFileRequest?: WatermarksFilesApplyWatermarkToFileRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fileId' is not null or undefined
            assertParamExists('applyWatermarkToFile', 'fileId', fileId)
            const localVarPath = `/files/{file_id}/watermark`
                .replace(`{${"file_id"}}`, encodeURIComponent(String(fileId !== undefined ? fileId : `-file_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2Security required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Security", [], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: watermarksFilesApplyWatermarkToFileRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/files/{file_id}/watermark',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(watermarksFilesApplyWatermarkToFileRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve the watermark for a file.
         * @summary Get watermark on file
         * @param {string} fileId The unique identifier that represents a file.  The ID for any file can be determined by visiting a file in the web application and copying the ID from the URL. For example, for the URL &#x60;https://_*.app.box.com/files/123&#x60; the &#x60;file_id&#x60; is &#x60;123&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get: async (fileId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fileId' is not null or undefined
            assertParamExists('get', 'fileId', fileId)
            const localVarPath = `/files/{file_id}/watermark`
                .replace(`{${"file_id"}}`, encodeURIComponent(String(fileId !== undefined ? fileId : `-file_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2Security required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Security", [], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/files/{file_id}/watermark',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Removes the watermark from a file.
         * @summary Remove watermark from file
         * @param {string} fileId The unique identifier that represents a file.  The ID for any file can be determined by visiting a file in the web application and copying the ID from the URL. For example, for the URL &#x60;https://_*.app.box.com/files/123&#x60; the &#x60;file_id&#x60; is &#x60;123&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeWatermark: async (fileId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fileId' is not null or undefined
            assertParamExists('removeWatermark', 'fileId', fileId)
            const localVarPath = `/files/{file_id}/watermark`
                .replace(`{${"file_id"}}`, encodeURIComponent(String(fileId !== undefined ? fileId : `-file_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2Security required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Security", [], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/files/{file_id}/watermark',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WatermarksFilesApi - functional programming interface
 * @export
 */
export const WatermarksFilesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WatermarksFilesApiAxiosParamCreator(configuration)
    return {
        /**
         * Applies or update a watermark on a file.
         * @summary Apply watermark to file
         * @param {WatermarksFilesApiApplyWatermarkToFileRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async applyWatermarkToFile(requestParameters: WatermarksFilesApiApplyWatermarkToFileRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Watermark>> {
            const watermarksFilesApplyWatermarkToFileRequest: WatermarksFilesApplyWatermarkToFileRequest = {
                watermark: requestParameters.watermark
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.applyWatermarkToFile(requestParameters.fileId, watermarksFilesApplyWatermarkToFileRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve the watermark for a file.
         * @summary Get watermark on file
         * @param {WatermarksFilesApiGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async get(requestParameters: WatermarksFilesApiGetRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Watermark>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.get(requestParameters.fileId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Removes the watermark from a file.
         * @summary Remove watermark from file
         * @param {WatermarksFilesApiRemoveWatermarkRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeWatermark(requestParameters: WatermarksFilesApiRemoveWatermarkRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeWatermark(requestParameters.fileId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * WatermarksFilesApi - factory interface
 * @export
 */
export const WatermarksFilesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WatermarksFilesApiFp(configuration)
    return {
        /**
         * Applies or update a watermark on a file.
         * @summary Apply watermark to file
         * @param {WatermarksFilesApiApplyWatermarkToFileRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        applyWatermarkToFile(requestParameters: WatermarksFilesApiApplyWatermarkToFileRequest, options?: AxiosRequestConfig): AxiosPromise<Watermark> {
            return localVarFp.applyWatermarkToFile(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve the watermark for a file.
         * @summary Get watermark on file
         * @param {WatermarksFilesApiGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get(requestParameters: WatermarksFilesApiGetRequest, options?: AxiosRequestConfig): AxiosPromise<Watermark> {
            return localVarFp.get(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Removes the watermark from a file.
         * @summary Remove watermark from file
         * @param {WatermarksFilesApiRemoveWatermarkRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeWatermark(requestParameters: WatermarksFilesApiRemoveWatermarkRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.removeWatermark(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for applyWatermarkToFile operation in WatermarksFilesApi.
 * @export
 * @interface WatermarksFilesApiApplyWatermarkToFileRequest
 */
export type WatermarksFilesApiApplyWatermarkToFileRequest = {
    
    /**
    * The unique identifier that represents a file.  The ID for any file can be determined by visiting a file in the web application and copying the ID from the URL. For example, for the URL `https://_*.app.box.com/files/123` the `file_id` is `123`.
    * @type {string}
    * @memberof WatermarksFilesApiApplyWatermarkToFile
    */
    readonly fileId: string
    
} & WatermarksFilesApplyWatermarkToFileRequest

/**
 * Request parameters for get operation in WatermarksFilesApi.
 * @export
 * @interface WatermarksFilesApiGetRequest
 */
export type WatermarksFilesApiGetRequest = {
    
    /**
    * The unique identifier that represents a file.  The ID for any file can be determined by visiting a file in the web application and copying the ID from the URL. For example, for the URL `https://_*.app.box.com/files/123` the `file_id` is `123`.
    * @type {string}
    * @memberof WatermarksFilesApiGet
    */
    readonly fileId: string
    
}

/**
 * Request parameters for removeWatermark operation in WatermarksFilesApi.
 * @export
 * @interface WatermarksFilesApiRemoveWatermarkRequest
 */
export type WatermarksFilesApiRemoveWatermarkRequest = {
    
    /**
    * The unique identifier that represents a file.  The ID for any file can be determined by visiting a file in the web application and copying the ID from the URL. For example, for the URL `https://_*.app.box.com/files/123` the `file_id` is `123`.
    * @type {string}
    * @memberof WatermarksFilesApiRemoveWatermark
    */
    readonly fileId: string
    
}

/**
 * WatermarksFilesApiGenerated - object-oriented interface
 * @export
 * @class WatermarksFilesApiGenerated
 * @extends {BaseAPI}
 */
export class WatermarksFilesApiGenerated extends BaseAPI {
    /**
     * Applies or update a watermark on a file.
     * @summary Apply watermark to file
     * @param {WatermarksFilesApiApplyWatermarkToFileRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WatermarksFilesApiGenerated
     */
    public applyWatermarkToFile(requestParameters: WatermarksFilesApiApplyWatermarkToFileRequest, options?: AxiosRequestConfig) {
        return WatermarksFilesApiFp(this.configuration).applyWatermarkToFile(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve the watermark for a file.
     * @summary Get watermark on file
     * @param {WatermarksFilesApiGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WatermarksFilesApiGenerated
     */
    public get(requestParameters: WatermarksFilesApiGetRequest, options?: AxiosRequestConfig) {
        return WatermarksFilesApiFp(this.configuration).get(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Removes the watermark from a file.
     * @summary Remove watermark from file
     * @param {WatermarksFilesApiRemoveWatermarkRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WatermarksFilesApiGenerated
     */
    public removeWatermark(requestParameters: WatermarksFilesApiRemoveWatermarkRequest, options?: AxiosRequestConfig) {
        return WatermarksFilesApiFp(this.configuration).removeWatermark(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
