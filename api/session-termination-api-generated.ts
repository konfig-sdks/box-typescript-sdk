/* tslint:disable */
/* eslint-disable */
/*
Box Platform API

[Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.

The version of the OpenAPI document: 2.0.0
Contact: devrel@box.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ClientError } from '../models';
// @ts-ignore
import { SessionTerminationCreateSessionTerminationJobsRequest } from '../models';
// @ts-ignore
import { SessionTerminationCreateTerminationJobsRequest } from '../models';
// @ts-ignore
import { SessionTerminationMessage } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * SessionTerminationApi - axios parameter creator
 * @export
 */
export const SessionTerminationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Validates the roles and permissions of the user, and creates asynchronous jobs to terminate the user\'s sessions. Returns the status for the POST request.
         * @summary Create jobs to terminate users session
         * @param {SessionTerminationCreateSessionTerminationJobsRequest} [sessionTerminationCreateSessionTerminationJobsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSessionTerminationJobs: async (sessionTerminationCreateSessionTerminationJobsRequest?: SessionTerminationCreateSessionTerminationJobsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users/terminate_sessions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2Security required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Security", [], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: sessionTerminationCreateSessionTerminationJobsRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/users/terminate_sessions',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(sessionTerminationCreateSessionTerminationJobsRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Validates the roles and permissions of the group, and creates asynchronous jobs to terminate the group\'s sessions. Returns the status for the POST request.
         * @summary Create jobs to terminate user group session
         * @param {SessionTerminationCreateTerminationJobsRequest} [sessionTerminationCreateTerminationJobsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTerminationJobs: async (sessionTerminationCreateTerminationJobsRequest?: SessionTerminationCreateTerminationJobsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/groups/terminate_sessions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2Security required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Security", [], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: sessionTerminationCreateTerminationJobsRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/groups/terminate_sessions',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(sessionTerminationCreateTerminationJobsRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SessionTerminationApi - functional programming interface
 * @export
 */
export const SessionTerminationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SessionTerminationApiAxiosParamCreator(configuration)
    return {
        /**
         * Validates the roles and permissions of the user, and creates asynchronous jobs to terminate the user\'s sessions. Returns the status for the POST request.
         * @summary Create jobs to terminate users session
         * @param {SessionTerminationApiCreateSessionTerminationJobsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createSessionTerminationJobs(requestParameters: SessionTerminationApiCreateSessionTerminationJobsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SessionTerminationMessage>> {
            const sessionTerminationCreateSessionTerminationJobsRequest: SessionTerminationCreateSessionTerminationJobsRequest = {
                user_ids: requestParameters.user_ids,
                user_logins: requestParameters.user_logins
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createSessionTerminationJobs(sessionTerminationCreateSessionTerminationJobsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Validates the roles and permissions of the group, and creates asynchronous jobs to terminate the group\'s sessions. Returns the status for the POST request.
         * @summary Create jobs to terminate user group session
         * @param {SessionTerminationApiCreateTerminationJobsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTerminationJobs(requestParameters: SessionTerminationApiCreateTerminationJobsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SessionTerminationMessage>> {
            const sessionTerminationCreateTerminationJobsRequest: SessionTerminationCreateTerminationJobsRequest = {
                group_ids: requestParameters.group_ids
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createTerminationJobs(sessionTerminationCreateTerminationJobsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SessionTerminationApi - factory interface
 * @export
 */
export const SessionTerminationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SessionTerminationApiFp(configuration)
    return {
        /**
         * Validates the roles and permissions of the user, and creates asynchronous jobs to terminate the user\'s sessions. Returns the status for the POST request.
         * @summary Create jobs to terminate users session
         * @param {SessionTerminationApiCreateSessionTerminationJobsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSessionTerminationJobs(requestParameters: SessionTerminationApiCreateSessionTerminationJobsRequest, options?: AxiosRequestConfig): AxiosPromise<SessionTerminationMessage> {
            return localVarFp.createSessionTerminationJobs(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Validates the roles and permissions of the group, and creates asynchronous jobs to terminate the group\'s sessions. Returns the status for the POST request.
         * @summary Create jobs to terminate user group session
         * @param {SessionTerminationApiCreateTerminationJobsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTerminationJobs(requestParameters: SessionTerminationApiCreateTerminationJobsRequest, options?: AxiosRequestConfig): AxiosPromise<SessionTerminationMessage> {
            return localVarFp.createTerminationJobs(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createSessionTerminationJobs operation in SessionTerminationApi.
 * @export
 * @interface SessionTerminationApiCreateSessionTerminationJobsRequest
 */
export type SessionTerminationApiCreateSessionTerminationJobsRequest = {
    
} & SessionTerminationCreateSessionTerminationJobsRequest

/**
 * Request parameters for createTerminationJobs operation in SessionTerminationApi.
 * @export
 * @interface SessionTerminationApiCreateTerminationJobsRequest
 */
export type SessionTerminationApiCreateTerminationJobsRequest = {
    
} & SessionTerminationCreateTerminationJobsRequest

/**
 * SessionTerminationApiGenerated - object-oriented interface
 * @export
 * @class SessionTerminationApiGenerated
 * @extends {BaseAPI}
 */
export class SessionTerminationApiGenerated extends BaseAPI {
    /**
     * Validates the roles and permissions of the user, and creates asynchronous jobs to terminate the user\'s sessions. Returns the status for the POST request.
     * @summary Create jobs to terminate users session
     * @param {SessionTerminationApiCreateSessionTerminationJobsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionTerminationApiGenerated
     */
    public createSessionTerminationJobs(requestParameters: SessionTerminationApiCreateSessionTerminationJobsRequest, options?: AxiosRequestConfig) {
        return SessionTerminationApiFp(this.configuration).createSessionTerminationJobs(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Validates the roles and permissions of the group, and creates asynchronous jobs to terminate the group\'s sessions. Returns the status for the POST request.
     * @summary Create jobs to terminate user group session
     * @param {SessionTerminationApiCreateTerminationJobsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionTerminationApiGenerated
     */
    public createTerminationJobs(requestParameters: SessionTerminationApiCreateTerminationJobsRequest, options?: AxiosRequestConfig) {
        return SessionTerminationApiFp(this.configuration).createTerminationJobs(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
