/* tslint:disable */
/* eslint-disable */
/*
Box Platform API

[Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.

The version of the OpenAPI document: 2.0.0
Contact: devrel@box.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AMetadataTemplateUpdateOperation } from '../models';
// @ts-ignore
import { ClientError } from '../models';
// @ts-ignore
import { MetadataFieldWrite } from '../models';
// @ts-ignore
import { MetadataTemplate } from '../models';
// @ts-ignore
import { MetadataTemplates } from '../models';
// @ts-ignore
import { MetadataTemplatesCreateNewTemplateRequest } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * MetadataTemplatesApi - axios parameter creator
 * @export
 */
export const MetadataTemplatesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a new metadata template that can be applied to files and folders.
         * @summary Create metadata template
         * @param {MetadataTemplatesCreateNewTemplateRequest} [metadataTemplatesCreateNewTemplateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewTemplate: async (metadataTemplatesCreateNewTemplateRequest?: MetadataTemplatesCreateNewTemplateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/metadata_templates/schema`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2Security required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Security", [], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: metadataTemplatesCreateNewTemplateRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/metadata_templates/schema',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(metadataTemplatesCreateNewTemplateRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a metadata template and its instances. This deletion is permanent and can not be reversed.
         * @summary Remove metadata template
         * @param {'global' | 'enterprise'} scope The scope of the metadata template
         * @param {string} templateKey The name of the metadata template
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSchema: async (scope: 'global' | 'enterprise', templateKey: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'scope' is not null or undefined
            assertParamExists('deleteSchema', 'scope', scope)
            // verify required parameter 'templateKey' is not null or undefined
            assertParamExists('deleteSchema', 'templateKey', templateKey)
            const localVarPath = `/metadata_templates/{scope}/{template_key}/schema`
                .replace(`{${"scope"}}`, encodeURIComponent(String(scope !== undefined ? scope : `-scope-`)))
                .replace(`{${"template_key"}}`, encodeURIComponent(String(templateKey !== undefined ? templateKey : `-template_key-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2Security required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Security", [], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/metadata_templates/{scope}/{template_key}/schema',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Finds a metadata template by searching for the ID of an instance of the template.
         * @summary Find metadata template by instance ID
         * @param {string} metadataInstanceId The ID of an instance of the metadata template to find.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findByInstanceId: async (metadataInstanceId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'metadataInstanceId' is not null or undefined
            assertParamExists('findByInstanceId', 'metadataInstanceId', metadataInstanceId)
            const localVarPath = `/metadata_templates`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2Security required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Security", [], configuration)
            if (metadataInstanceId !== undefined) {
                localVarQueryParameter['metadata_instance_id'] = metadataInstanceId;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/metadata_templates',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a metadata template by its ID.
         * @summary Get metadata template by ID
         * @param {string} templateId The ID of the template
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById: async (templateId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'templateId' is not null or undefined
            assertParamExists('getById', 'templateId', templateId)
            const localVarPath = `/metadata_templates/{template_id}`
                .replace(`{${"template_id"}}`, encodeURIComponent(String(templateId !== undefined ? templateId : `-template_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2Security required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Security", [], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/metadata_templates/{template_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a metadata template by its `scope` and `templateKey` values.  To find the `scope` and `templateKey` for a template, list all templates for an enterprise or globally, or list all templates applied to a file or folder.
         * @summary Get metadata template by name
         * @param {'global' | 'enterprise'} scope The scope of the metadata template
         * @param {string} templateKey The name of the metadata template
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByNameSchema: async (scope: 'global' | 'enterprise', templateKey: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'scope' is not null or undefined
            assertParamExists('getByNameSchema', 'scope', scope)
            // verify required parameter 'templateKey' is not null or undefined
            assertParamExists('getByNameSchema', 'templateKey', templateKey)
            const localVarPath = `/metadata_templates/{scope}/{template_key}/schema`
                .replace(`{${"scope"}}`, encodeURIComponent(String(scope !== undefined ? scope : `-scope-`)))
                .replace(`{${"template_key"}}`, encodeURIComponent(String(templateKey !== undefined ? templateKey : `-template_key-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2Security required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Security", [], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/metadata_templates/{scope}/{template_key}/schema',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Used to retrieve all metadata templates created to be used specifically within the user\'s enterprise
         * @summary List all metadata templates for enterprise
         * @param {string} [marker] Defines the position marker at which to begin returning results. This is used when paginating using marker-based pagination.  This requires &#x60;usemarker&#x60; to be set to &#x60;true&#x60;.
         * @param {number} [limit] The maximum number of items to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listForEnterprise: async (marker?: string, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/metadata_templates/enterprise`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2Security required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Security", [], configuration)
            if (marker !== undefined) {
                localVarQueryParameter['marker'] = marker;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/metadata_templates/enterprise',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Used to retrieve all generic, global metadata templates available to all enterprises using Box.
         * @summary List all global metadata templates
         * @param {string} [marker] Defines the position marker at which to begin returning results. This is used when paginating using marker-based pagination.  This requires &#x60;usemarker&#x60; to be set to &#x60;true&#x60;.
         * @param {number} [limit] The maximum number of items to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listGlobal: async (marker?: string, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/metadata_templates/global`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2Security required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Security", [], configuration)
            if (marker !== undefined) {
                localVarQueryParameter['marker'] = marker;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/metadata_templates/global',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates a metadata template.  The metadata template can only be updated if the template already exists.  The update is applied atomically. If any errors occur during the application of the operations, the metadata template will not be changed.
         * @summary Update metadata template
         * @param {'global' | 'enterprise'} scope The scope of the metadata template
         * @param {string} templateKey The name of the metadata template
         * @param {Array<AMetadataTemplateUpdateOperation>} [aMetadataTemplateUpdateOperation] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSchema: async (scope: 'global' | 'enterprise', templateKey: string, aMetadataTemplateUpdateOperation?: Array<AMetadataTemplateUpdateOperation>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'scope' is not null or undefined
            assertParamExists('updateSchema', 'scope', scope)
            // verify required parameter 'templateKey' is not null or undefined
            assertParamExists('updateSchema', 'templateKey', templateKey)
            const localVarPath = `/metadata_templates/{scope}/{template_key}/schema`
                .replace(`{${"scope"}}`, encodeURIComponent(String(scope !== undefined ? scope : `-scope-`)))
                .replace(`{${"template_key"}}`, encodeURIComponent(String(templateKey !== undefined ? templateKey : `-template_key-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2Security required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Security", [], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: aMetadataTemplateUpdateOperation,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/metadata_templates/{scope}/{template_key}/schema',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(aMetadataTemplateUpdateOperation, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MetadataTemplatesApi - functional programming interface
 * @export
 */
export const MetadataTemplatesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MetadataTemplatesApiAxiosParamCreator(configuration)
    return {
        /**
         * Creates a new metadata template that can be applied to files and folders.
         * @summary Create metadata template
         * @param {MetadataTemplatesApiCreateNewTemplateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNewTemplate(requestParameters: MetadataTemplatesApiCreateNewTemplateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MetadataTemplate>> {
            const metadataTemplatesCreateNewTemplateRequest: MetadataTemplatesCreateNewTemplateRequest = {
                scope: requestParameters.scope,
                templateKey: requestParameters.templateKey,
                displayName: requestParameters.displayName,
                hidden: requestParameters.hidden,
                fields: requestParameters.fields,
                copyInstanceOnItemCopy: requestParameters.copyInstanceOnItemCopy
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNewTemplate(metadataTemplatesCreateNewTemplateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete a metadata template and its instances. This deletion is permanent and can not be reversed.
         * @summary Remove metadata template
         * @param {MetadataTemplatesApiDeleteSchemaRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSchema(requestParameters: MetadataTemplatesApiDeleteSchemaRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteSchema(requestParameters.scope, requestParameters.templateKey, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Finds a metadata template by searching for the ID of an instance of the template.
         * @summary Find metadata template by instance ID
         * @param {MetadataTemplatesApiFindByInstanceIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findByInstanceId(requestParameters: MetadataTemplatesApiFindByInstanceIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MetadataTemplates>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findByInstanceId(requestParameters.metadataInstanceId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a metadata template by its ID.
         * @summary Get metadata template by ID
         * @param {MetadataTemplatesApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getById(requestParameters: MetadataTemplatesApiGetByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MetadataTemplate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getById(requestParameters.templateId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a metadata template by its `scope` and `templateKey` values.  To find the `scope` and `templateKey` for a template, list all templates for an enterprise or globally, or list all templates applied to a file or folder.
         * @summary Get metadata template by name
         * @param {MetadataTemplatesApiGetByNameSchemaRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getByNameSchema(requestParameters: MetadataTemplatesApiGetByNameSchemaRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MetadataTemplate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getByNameSchema(requestParameters.scope, requestParameters.templateKey, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Used to retrieve all metadata templates created to be used specifically within the user\'s enterprise
         * @summary List all metadata templates for enterprise
         * @param {MetadataTemplatesApiListForEnterpriseRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listForEnterprise(requestParameters: MetadataTemplatesApiListForEnterpriseRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MetadataTemplates>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listForEnterprise(requestParameters.marker, requestParameters.limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Used to retrieve all generic, global metadata templates available to all enterprises using Box.
         * @summary List all global metadata templates
         * @param {MetadataTemplatesApiListGlobalRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listGlobal(requestParameters: MetadataTemplatesApiListGlobalRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MetadataTemplates>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listGlobal(requestParameters.marker, requestParameters.limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates a metadata template.  The metadata template can only be updated if the template already exists.  The update is applied atomically. If any errors occur during the application of the operations, the metadata template will not be changed.
         * @summary Update metadata template
         * @param {MetadataTemplatesApiUpdateSchemaRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSchema(requestParameters: MetadataTemplatesApiUpdateSchemaRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MetadataTemplate>> {
            const aMetadataTemplateUpdateOperation: Array<AMetadataTemplateUpdateOperation> = requestParameters.requestBody;
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateSchema(requestParameters.scope, requestParameters.templateKey, aMetadataTemplateUpdateOperation, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MetadataTemplatesApi - factory interface
 * @export
 */
export const MetadataTemplatesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MetadataTemplatesApiFp(configuration)
    return {
        /**
         * Creates a new metadata template that can be applied to files and folders.
         * @summary Create metadata template
         * @param {MetadataTemplatesApiCreateNewTemplateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewTemplate(requestParameters: MetadataTemplatesApiCreateNewTemplateRequest, options?: AxiosRequestConfig): AxiosPromise<MetadataTemplate> {
            return localVarFp.createNewTemplate(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a metadata template and its instances. This deletion is permanent and can not be reversed.
         * @summary Remove metadata template
         * @param {MetadataTemplatesApiDeleteSchemaRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSchema(requestParameters: MetadataTemplatesApiDeleteSchemaRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteSchema(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Finds a metadata template by searching for the ID of an instance of the template.
         * @summary Find metadata template by instance ID
         * @param {MetadataTemplatesApiFindByInstanceIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findByInstanceId(requestParameters: MetadataTemplatesApiFindByInstanceIdRequest, options?: AxiosRequestConfig): AxiosPromise<MetadataTemplates> {
            return localVarFp.findByInstanceId(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a metadata template by its ID.
         * @summary Get metadata template by ID
         * @param {MetadataTemplatesApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById(requestParameters: MetadataTemplatesApiGetByIdRequest, options?: AxiosRequestConfig): AxiosPromise<MetadataTemplate> {
            return localVarFp.getById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a metadata template by its `scope` and `templateKey` values.  To find the `scope` and `templateKey` for a template, list all templates for an enterprise or globally, or list all templates applied to a file or folder.
         * @summary Get metadata template by name
         * @param {MetadataTemplatesApiGetByNameSchemaRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByNameSchema(requestParameters: MetadataTemplatesApiGetByNameSchemaRequest, options?: AxiosRequestConfig): AxiosPromise<MetadataTemplate> {
            return localVarFp.getByNameSchema(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Used to retrieve all metadata templates created to be used specifically within the user\'s enterprise
         * @summary List all metadata templates for enterprise
         * @param {MetadataTemplatesApiListForEnterpriseRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listForEnterprise(requestParameters: MetadataTemplatesApiListForEnterpriseRequest = {}, options?: AxiosRequestConfig): AxiosPromise<MetadataTemplates> {
            return localVarFp.listForEnterprise(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Used to retrieve all generic, global metadata templates available to all enterprises using Box.
         * @summary List all global metadata templates
         * @param {MetadataTemplatesApiListGlobalRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listGlobal(requestParameters: MetadataTemplatesApiListGlobalRequest = {}, options?: AxiosRequestConfig): AxiosPromise<MetadataTemplates> {
            return localVarFp.listGlobal(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates a metadata template.  The metadata template can only be updated if the template already exists.  The update is applied atomically. If any errors occur during the application of the operations, the metadata template will not be changed.
         * @summary Update metadata template
         * @param {MetadataTemplatesApiUpdateSchemaRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSchema(requestParameters: MetadataTemplatesApiUpdateSchemaRequest, options?: AxiosRequestConfig): AxiosPromise<MetadataTemplate> {
            return localVarFp.updateSchema(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createNewTemplate operation in MetadataTemplatesApi.
 * @export
 * @interface MetadataTemplatesApiCreateNewTemplateRequest
 */
export type MetadataTemplatesApiCreateNewTemplateRequest = {
    
} & MetadataTemplatesCreateNewTemplateRequest

/**
 * Request parameters for deleteSchema operation in MetadataTemplatesApi.
 * @export
 * @interface MetadataTemplatesApiDeleteSchemaRequest
 */
export type MetadataTemplatesApiDeleteSchemaRequest = {
    
    /**
    * The scope of the metadata template
    * @type {'global' | 'enterprise'}
    * @memberof MetadataTemplatesApiDeleteSchema
    */
    readonly scope: 'global' | 'enterprise'
    
    /**
    * The name of the metadata template
    * @type {string}
    * @memberof MetadataTemplatesApiDeleteSchema
    */
    readonly templateKey: string
    
}

/**
 * Request parameters for findByInstanceId operation in MetadataTemplatesApi.
 * @export
 * @interface MetadataTemplatesApiFindByInstanceIdRequest
 */
export type MetadataTemplatesApiFindByInstanceIdRequest = {
    
    /**
    * The ID of an instance of the metadata template to find.
    * @type {string}
    * @memberof MetadataTemplatesApiFindByInstanceId
    */
    readonly metadataInstanceId: string
    
}

/**
 * Request parameters for getById operation in MetadataTemplatesApi.
 * @export
 * @interface MetadataTemplatesApiGetByIdRequest
 */
export type MetadataTemplatesApiGetByIdRequest = {
    
    /**
    * The ID of the template
    * @type {string}
    * @memberof MetadataTemplatesApiGetById
    */
    readonly templateId: string
    
}

/**
 * Request parameters for getByNameSchema operation in MetadataTemplatesApi.
 * @export
 * @interface MetadataTemplatesApiGetByNameSchemaRequest
 */
export type MetadataTemplatesApiGetByNameSchemaRequest = {
    
    /**
    * The scope of the metadata template
    * @type {'global' | 'enterprise'}
    * @memberof MetadataTemplatesApiGetByNameSchema
    */
    readonly scope: 'global' | 'enterprise'
    
    /**
    * The name of the metadata template
    * @type {string}
    * @memberof MetadataTemplatesApiGetByNameSchema
    */
    readonly templateKey: string
    
}

/**
 * Request parameters for listForEnterprise operation in MetadataTemplatesApi.
 * @export
 * @interface MetadataTemplatesApiListForEnterpriseRequest
 */
export type MetadataTemplatesApiListForEnterpriseRequest = {
    
    /**
    * Defines the position marker at which to begin returning results. This is used when paginating using marker-based pagination.  This requires `usemarker` to be set to `true`.
    * @type {string}
    * @memberof MetadataTemplatesApiListForEnterprise
    */
    readonly marker?: string
    
    /**
    * The maximum number of items to return per page.
    * @type {number}
    * @memberof MetadataTemplatesApiListForEnterprise
    */
    readonly limit?: number
    
}

/**
 * Request parameters for listGlobal operation in MetadataTemplatesApi.
 * @export
 * @interface MetadataTemplatesApiListGlobalRequest
 */
export type MetadataTemplatesApiListGlobalRequest = {
    
    /**
    * Defines the position marker at which to begin returning results. This is used when paginating using marker-based pagination.  This requires `usemarker` to be set to `true`.
    * @type {string}
    * @memberof MetadataTemplatesApiListGlobal
    */
    readonly marker?: string
    
    /**
    * The maximum number of items to return per page.
    * @type {number}
    * @memberof MetadataTemplatesApiListGlobal
    */
    readonly limit?: number
    
}

/**
 * Request parameters for updateSchema operation in MetadataTemplatesApi.
 * @export
 * @interface MetadataTemplatesApiUpdateSchemaRequest
 */
export type MetadataTemplatesApiUpdateSchemaRequest = {
    /**
    * The scope of the metadata template
    * @type {'global' | 'enterprise'}
    * @memberof MetadataTemplatesApiUpdateSchema
    */
    readonly scope: 'global' | 'enterprise'
    /**
    * The name of the metadata template
    * @type {string}
    * @memberof MetadataTemplatesApiUpdateSchema
    */
    readonly templateKey: string
    /**
    * 
    * @type {Array<AMetadataTemplateUpdateOperation>}
    * @memberof MetadataTemplatesApiUpdateSchema
    */
    readonly requestBody?: Array<AMetadataTemplateUpdateOperation>
}

/**
 * MetadataTemplatesApiGenerated - object-oriented interface
 * @export
 * @class MetadataTemplatesApiGenerated
 * @extends {BaseAPI}
 */
export class MetadataTemplatesApiGenerated extends BaseAPI {
    /**
     * Creates a new metadata template that can be applied to files and folders.
     * @summary Create metadata template
     * @param {MetadataTemplatesApiCreateNewTemplateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetadataTemplatesApiGenerated
     */
    public createNewTemplate(requestParameters: MetadataTemplatesApiCreateNewTemplateRequest, options?: AxiosRequestConfig) {
        return MetadataTemplatesApiFp(this.configuration).createNewTemplate(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a metadata template and its instances. This deletion is permanent and can not be reversed.
     * @summary Remove metadata template
     * @param {MetadataTemplatesApiDeleteSchemaRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetadataTemplatesApiGenerated
     */
    public deleteSchema(requestParameters: MetadataTemplatesApiDeleteSchemaRequest, options?: AxiosRequestConfig) {
        return MetadataTemplatesApiFp(this.configuration).deleteSchema(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Finds a metadata template by searching for the ID of an instance of the template.
     * @summary Find metadata template by instance ID
     * @param {MetadataTemplatesApiFindByInstanceIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetadataTemplatesApiGenerated
     */
    public findByInstanceId(requestParameters: MetadataTemplatesApiFindByInstanceIdRequest, options?: AxiosRequestConfig) {
        return MetadataTemplatesApiFp(this.configuration).findByInstanceId(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a metadata template by its ID.
     * @summary Get metadata template by ID
     * @param {MetadataTemplatesApiGetByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetadataTemplatesApiGenerated
     */
    public getById(requestParameters: MetadataTemplatesApiGetByIdRequest, options?: AxiosRequestConfig) {
        return MetadataTemplatesApiFp(this.configuration).getById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a metadata template by its `scope` and `templateKey` values.  To find the `scope` and `templateKey` for a template, list all templates for an enterprise or globally, or list all templates applied to a file or folder.
     * @summary Get metadata template by name
     * @param {MetadataTemplatesApiGetByNameSchemaRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetadataTemplatesApiGenerated
     */
    public getByNameSchema(requestParameters: MetadataTemplatesApiGetByNameSchemaRequest, options?: AxiosRequestConfig) {
        return MetadataTemplatesApiFp(this.configuration).getByNameSchema(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Used to retrieve all metadata templates created to be used specifically within the user\'s enterprise
     * @summary List all metadata templates for enterprise
     * @param {MetadataTemplatesApiListForEnterpriseRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetadataTemplatesApiGenerated
     */
    public listForEnterprise(requestParameters: MetadataTemplatesApiListForEnterpriseRequest = {}, options?: AxiosRequestConfig) {
        return MetadataTemplatesApiFp(this.configuration).listForEnterprise(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Used to retrieve all generic, global metadata templates available to all enterprises using Box.
     * @summary List all global metadata templates
     * @param {MetadataTemplatesApiListGlobalRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetadataTemplatesApiGenerated
     */
    public listGlobal(requestParameters: MetadataTemplatesApiListGlobalRequest = {}, options?: AxiosRequestConfig) {
        return MetadataTemplatesApiFp(this.configuration).listGlobal(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates a metadata template.  The metadata template can only be updated if the template already exists.  The update is applied atomically. If any errors occur during the application of the operations, the metadata template will not be changed.
     * @summary Update metadata template
     * @param {MetadataTemplatesApiUpdateSchemaRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetadataTemplatesApiGenerated
     */
    public updateSchema(requestParameters: MetadataTemplatesApiUpdateSchemaRequest, options?: AxiosRequestConfig) {
        return MetadataTemplatesApiFp(this.configuration).updateSchema(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
