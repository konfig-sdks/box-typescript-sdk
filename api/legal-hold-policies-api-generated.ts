/* tslint:disable */
/* eslint-disable */
/*
Box Platform API

[Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.

The version of the OpenAPI document: 2.0.0
Contact: devrel@box.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ClientError } from '../models';
// @ts-ignore
import { LegalHoldPolicies } from '../models';
// @ts-ignore
import { LegalHoldPoliciesCreateNewPolicyRequest } from '../models';
// @ts-ignore
import { LegalHoldPoliciesUpdatePolicyRequest } from '../models';
// @ts-ignore
import { LegalHoldPolicy } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * LegalHoldPoliciesApi - axios parameter creator
 * @export
 */
export const LegalHoldPoliciesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a new legal hold policy.
         * @summary Create legal hold policy
         * @param {LegalHoldPoliciesCreateNewPolicyRequest} [legalHoldPoliciesCreateNewPolicyRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewPolicy: async (legalHoldPoliciesCreateNewPolicyRequest?: LegalHoldPoliciesCreateNewPolicyRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/legal_hold_policies`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2Security required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Security", [], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: legalHoldPoliciesCreateNewPolicyRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/legal_hold_policies',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(legalHoldPoliciesCreateNewPolicyRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a legal hold policy.
         * @summary Get legal hold policy
         * @param {string} legalHoldPolicyId The ID of the legal hold policy
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPolicy: async (legalHoldPolicyId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'legalHoldPolicyId' is not null or undefined
            assertParamExists('getPolicy', 'legalHoldPolicyId', legalHoldPolicyId)
            const localVarPath = `/legal_hold_policies/{legal_hold_policy_id}`
                .replace(`{${"legal_hold_policy_id"}}`, encodeURIComponent(String(legalHoldPolicyId !== undefined ? legalHoldPolicyId : `-legal_hold_policy_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2Security required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Security", [], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/legal_hold_policies/{legal_hold_policy_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a list of legal hold policies that belong to an enterprise.
         * @summary List all legal hold policies
         * @param {string} [policyName] Limits results to policies for which the names start with this search term. This is a case-insensitive prefix.
         * @param {Array<string>} [fields] A comma-separated list of attributes to include in the response. This can be used to request fields that are not normally returned in a standard response.  Be aware that specifying this parameter will have the effect that none of the standard fields are returned in the response unless explicitly specified, instead only fields for the mini representation are returned, additional to the fields requested.
         * @param {string} [marker] Defines the position marker at which to begin returning results. This is used when paginating using marker-based pagination.  This requires &#x60;usemarker&#x60; to be set to &#x60;true&#x60;.
         * @param {number} [limit] The maximum number of items to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAll: async (policyName?: string, fields?: Array<string>, marker?: string, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/legal_hold_policies`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2Security required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Security", [], configuration)
            if (policyName !== undefined) {
                localVarQueryParameter['policy_name'] = policyName;
            }

            if (fields) {
                localVarQueryParameter['fields'] = fields.join(COLLECTION_FORMATS.csv);
            }

            if (marker !== undefined) {
                localVarQueryParameter['marker'] = marker;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/legal_hold_policies',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete an existing legal hold policy.  This is an asynchronous process. The policy will not be fully deleted yet when the response returns.
         * @summary Remove legal hold policy
         * @param {string} legalHoldPolicyId The ID of the legal hold policy
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removePolicy: async (legalHoldPolicyId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'legalHoldPolicyId' is not null or undefined
            assertParamExists('removePolicy', 'legalHoldPolicyId', legalHoldPolicyId)
            const localVarPath = `/legal_hold_policies/{legal_hold_policy_id}`
                .replace(`{${"legal_hold_policy_id"}}`, encodeURIComponent(String(legalHoldPolicyId !== undefined ? legalHoldPolicyId : `-legal_hold_policy_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2Security required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Security", [], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/legal_hold_policies/{legal_hold_policy_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update legal hold policy.
         * @summary Update legal hold policy
         * @param {string} legalHoldPolicyId The ID of the legal hold policy
         * @param {LegalHoldPoliciesUpdatePolicyRequest} [legalHoldPoliciesUpdatePolicyRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePolicy: async (legalHoldPolicyId: string, legalHoldPoliciesUpdatePolicyRequest?: LegalHoldPoliciesUpdatePolicyRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'legalHoldPolicyId' is not null or undefined
            assertParamExists('updatePolicy', 'legalHoldPolicyId', legalHoldPolicyId)
            const localVarPath = `/legal_hold_policies/{legal_hold_policy_id}`
                .replace(`{${"legal_hold_policy_id"}}`, encodeURIComponent(String(legalHoldPolicyId !== undefined ? legalHoldPolicyId : `-legal_hold_policy_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2Security required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Security", [], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: legalHoldPoliciesUpdatePolicyRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/legal_hold_policies/{legal_hold_policy_id}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(legalHoldPoliciesUpdatePolicyRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LegalHoldPoliciesApi - functional programming interface
 * @export
 */
export const LegalHoldPoliciesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LegalHoldPoliciesApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a new legal hold policy.
         * @summary Create legal hold policy
         * @param {LegalHoldPoliciesApiCreateNewPolicyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNewPolicy(requestParameters: LegalHoldPoliciesApiCreateNewPolicyRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LegalHoldPolicy>> {
            const legalHoldPoliciesCreateNewPolicyRequest: LegalHoldPoliciesCreateNewPolicyRequest = {
                description: requestParameters.description,
                policy_name: requestParameters.policy_name,
                filter_started_at: requestParameters.filter_started_at,
                filter_ended_at: requestParameters.filter_ended_at,
                is_ongoing: requestParameters.is_ongoing
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNewPolicy(legalHoldPoliciesCreateNewPolicyRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve a legal hold policy.
         * @summary Get legal hold policy
         * @param {LegalHoldPoliciesApiGetPolicyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPolicy(requestParameters: LegalHoldPoliciesApiGetPolicyRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LegalHoldPolicy>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPolicy(requestParameters.legalHoldPolicyId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a list of legal hold policies that belong to an enterprise.
         * @summary List all legal hold policies
         * @param {LegalHoldPoliciesApiListAllRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAll(requestParameters: LegalHoldPoliciesApiListAllRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LegalHoldPolicies>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAll(requestParameters.policyName, requestParameters.fields, requestParameters.marker, requestParameters.limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete an existing legal hold policy.  This is an asynchronous process. The policy will not be fully deleted yet when the response returns.
         * @summary Remove legal hold policy
         * @param {LegalHoldPoliciesApiRemovePolicyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removePolicy(requestParameters: LegalHoldPoliciesApiRemovePolicyRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removePolicy(requestParameters.legalHoldPolicyId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update legal hold policy.
         * @summary Update legal hold policy
         * @param {LegalHoldPoliciesApiUpdatePolicyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePolicy(requestParameters: LegalHoldPoliciesApiUpdatePolicyRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LegalHoldPolicy>> {
            const legalHoldPoliciesUpdatePolicyRequest: LegalHoldPoliciesUpdatePolicyRequest = {
                description: requestParameters.description,
                policy_name: requestParameters.policy_name,
                release_notes: requestParameters.release_notes
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePolicy(requestParameters.legalHoldPolicyId, legalHoldPoliciesUpdatePolicyRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * LegalHoldPoliciesApi - factory interface
 * @export
 */
export const LegalHoldPoliciesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LegalHoldPoliciesApiFp(configuration)
    return {
        /**
         * Create a new legal hold policy.
         * @summary Create legal hold policy
         * @param {LegalHoldPoliciesApiCreateNewPolicyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewPolicy(requestParameters: LegalHoldPoliciesApiCreateNewPolicyRequest, options?: AxiosRequestConfig): AxiosPromise<LegalHoldPolicy> {
            return localVarFp.createNewPolicy(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a legal hold policy.
         * @summary Get legal hold policy
         * @param {LegalHoldPoliciesApiGetPolicyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPolicy(requestParameters: LegalHoldPoliciesApiGetPolicyRequest, options?: AxiosRequestConfig): AxiosPromise<LegalHoldPolicy> {
            return localVarFp.getPolicy(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a list of legal hold policies that belong to an enterprise.
         * @summary List all legal hold policies
         * @param {LegalHoldPoliciesApiListAllRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAll(requestParameters: LegalHoldPoliciesApiListAllRequest = {}, options?: AxiosRequestConfig): AxiosPromise<LegalHoldPolicies> {
            return localVarFp.listAll(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete an existing legal hold policy.  This is an asynchronous process. The policy will not be fully deleted yet when the response returns.
         * @summary Remove legal hold policy
         * @param {LegalHoldPoliciesApiRemovePolicyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removePolicy(requestParameters: LegalHoldPoliciesApiRemovePolicyRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.removePolicy(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update legal hold policy.
         * @summary Update legal hold policy
         * @param {LegalHoldPoliciesApiUpdatePolicyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePolicy(requestParameters: LegalHoldPoliciesApiUpdatePolicyRequest, options?: AxiosRequestConfig): AxiosPromise<LegalHoldPolicy> {
            return localVarFp.updatePolicy(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createNewPolicy operation in LegalHoldPoliciesApi.
 * @export
 * @interface LegalHoldPoliciesApiCreateNewPolicyRequest
 */
export type LegalHoldPoliciesApiCreateNewPolicyRequest = {
    
} & LegalHoldPoliciesCreateNewPolicyRequest

/**
 * Request parameters for getPolicy operation in LegalHoldPoliciesApi.
 * @export
 * @interface LegalHoldPoliciesApiGetPolicyRequest
 */
export type LegalHoldPoliciesApiGetPolicyRequest = {
    
    /**
    * The ID of the legal hold policy
    * @type {string}
    * @memberof LegalHoldPoliciesApiGetPolicy
    */
    readonly legalHoldPolicyId: string
    
}

/**
 * Request parameters for listAll operation in LegalHoldPoliciesApi.
 * @export
 * @interface LegalHoldPoliciesApiListAllRequest
 */
export type LegalHoldPoliciesApiListAllRequest = {
    
    /**
    * Limits results to policies for which the names start with this search term. This is a case-insensitive prefix.
    * @type {string}
    * @memberof LegalHoldPoliciesApiListAll
    */
    readonly policyName?: string
    
    /**
    * A comma-separated list of attributes to include in the response. This can be used to request fields that are not normally returned in a standard response.  Be aware that specifying this parameter will have the effect that none of the standard fields are returned in the response unless explicitly specified, instead only fields for the mini representation are returned, additional to the fields requested.
    * @type {Array<string>}
    * @memberof LegalHoldPoliciesApiListAll
    */
    readonly fields?: Array<string>
    
    /**
    * Defines the position marker at which to begin returning results. This is used when paginating using marker-based pagination.  This requires `usemarker` to be set to `true`.
    * @type {string}
    * @memberof LegalHoldPoliciesApiListAll
    */
    readonly marker?: string
    
    /**
    * The maximum number of items to return per page.
    * @type {number}
    * @memberof LegalHoldPoliciesApiListAll
    */
    readonly limit?: number
    
}

/**
 * Request parameters for removePolicy operation in LegalHoldPoliciesApi.
 * @export
 * @interface LegalHoldPoliciesApiRemovePolicyRequest
 */
export type LegalHoldPoliciesApiRemovePolicyRequest = {
    
    /**
    * The ID of the legal hold policy
    * @type {string}
    * @memberof LegalHoldPoliciesApiRemovePolicy
    */
    readonly legalHoldPolicyId: string
    
}

/**
 * Request parameters for updatePolicy operation in LegalHoldPoliciesApi.
 * @export
 * @interface LegalHoldPoliciesApiUpdatePolicyRequest
 */
export type LegalHoldPoliciesApiUpdatePolicyRequest = {
    
    /**
    * The ID of the legal hold policy
    * @type {string}
    * @memberof LegalHoldPoliciesApiUpdatePolicy
    */
    readonly legalHoldPolicyId: string
    
} & LegalHoldPoliciesUpdatePolicyRequest

/**
 * LegalHoldPoliciesApiGenerated - object-oriented interface
 * @export
 * @class LegalHoldPoliciesApiGenerated
 * @extends {BaseAPI}
 */
export class LegalHoldPoliciesApiGenerated extends BaseAPI {
    /**
     * Create a new legal hold policy.
     * @summary Create legal hold policy
     * @param {LegalHoldPoliciesApiCreateNewPolicyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LegalHoldPoliciesApiGenerated
     */
    public createNewPolicy(requestParameters: LegalHoldPoliciesApiCreateNewPolicyRequest, options?: AxiosRequestConfig) {
        return LegalHoldPoliciesApiFp(this.configuration).createNewPolicy(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a legal hold policy.
     * @summary Get legal hold policy
     * @param {LegalHoldPoliciesApiGetPolicyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LegalHoldPoliciesApiGenerated
     */
    public getPolicy(requestParameters: LegalHoldPoliciesApiGetPolicyRequest, options?: AxiosRequestConfig) {
        return LegalHoldPoliciesApiFp(this.configuration).getPolicy(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a list of legal hold policies that belong to an enterprise.
     * @summary List all legal hold policies
     * @param {LegalHoldPoliciesApiListAllRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LegalHoldPoliciesApiGenerated
     */
    public listAll(requestParameters: LegalHoldPoliciesApiListAllRequest = {}, options?: AxiosRequestConfig) {
        return LegalHoldPoliciesApiFp(this.configuration).listAll(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete an existing legal hold policy.  This is an asynchronous process. The policy will not be fully deleted yet when the response returns.
     * @summary Remove legal hold policy
     * @param {LegalHoldPoliciesApiRemovePolicyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LegalHoldPoliciesApiGenerated
     */
    public removePolicy(requestParameters: LegalHoldPoliciesApiRemovePolicyRequest, options?: AxiosRequestConfig) {
        return LegalHoldPoliciesApiFp(this.configuration).removePolicy(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update legal hold policy.
     * @summary Update legal hold policy
     * @param {LegalHoldPoliciesApiUpdatePolicyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LegalHoldPoliciesApiGenerated
     */
    public updatePolicy(requestParameters: LegalHoldPoliciesApiUpdatePolicyRequest, options?: AxiosRequestConfig) {
        return LegalHoldPoliciesApiFp(this.configuration).updatePolicy(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
