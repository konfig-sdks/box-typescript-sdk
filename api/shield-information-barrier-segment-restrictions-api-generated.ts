/* tslint:disable */
/* eslint-disable */
/*
Box Platform API

[Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.

The version of the OpenAPI document: 2.0.0
Contact: devrel@box.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ClientError } from '../models';
// @ts-ignore
import { ShieldInformationBarrierBase } from '../models';
// @ts-ignore
import { ShieldInformationBarrierSegmentRestriction } from '../models';
// @ts-ignore
import { ShieldInformationBarrierSegmentRestrictions } from '../models';
// @ts-ignore
import { ShieldInformationBarrierSegmentRestrictionsCreateBarrierObjectRequest } from '../models';
// @ts-ignore
import { ShieldInformationBarrierSegmentRestrictionsCreateBarrierObjectRequestRestrictedSegment } from '../models';
// @ts-ignore
import { ShieldInformationBarrierSegmentRestrictionsCreateBarrierObjectRequestShieldInformationBarrierSegment } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * ShieldInformationBarrierSegmentRestrictionsApi - axios parameter creator
 * @export
 */
export const ShieldInformationBarrierSegmentRestrictionsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a shield information barrier segment restriction object.
         * @summary Create shield information barrier segment restriction
         * @param {ShieldInformationBarrierSegmentRestrictionsCreateBarrierObjectRequest} [shieldInformationBarrierSegmentRestrictionsCreateBarrierObjectRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBarrierObject: async (shieldInformationBarrierSegmentRestrictionsCreateBarrierObjectRequest?: ShieldInformationBarrierSegmentRestrictionsCreateBarrierObjectRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/shield_information_barrier_segment_restrictions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2Security required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Security", [], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: shieldInformationBarrierSegmentRestrictionsCreateBarrierObjectRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/shield_information_barrier_segment_restrictions',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(shieldInformationBarrierSegmentRestrictionsCreateBarrierObjectRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a shield information barrier segment restriction based on provided ID.
         * @summary Get shield information barrier segment restriction by ID
         * @param {string} shieldInformationBarrierSegmentRestrictionId The ID of the shield information barrier segment Restriction.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById: async (shieldInformationBarrierSegmentRestrictionId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'shieldInformationBarrierSegmentRestrictionId' is not null or undefined
            assertParamExists('getById', 'shieldInformationBarrierSegmentRestrictionId', shieldInformationBarrierSegmentRestrictionId)
            const localVarPath = `/shield_information_barrier_segment_restrictions/{shield_information_barrier_segment_restriction_id}`
                .replace(`{${"shield_information_barrier_segment_restriction_id"}}`, encodeURIComponent(String(shieldInformationBarrierSegmentRestrictionId !== undefined ? shieldInformationBarrierSegmentRestrictionId : `-shield_information_barrier_segment_restriction_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2Security required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Security", [], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/shield_information_barrier_segment_restrictions/{shield_information_barrier_segment_restriction_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists shield information barrier segment restrictions based on provided segment ID.
         * @summary List shield information barrier segment restrictions
         * @param {string} shieldInformationBarrierSegmentId The ID of the shield information barrier segment.
         * @param {string} [marker] Defines the position marker at which to begin returning results. This is used when paginating using marker-based pagination.  This requires &#x60;usemarker&#x60; to be set to &#x60;true&#x60;.
         * @param {number} [limit] The maximum number of items to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listBasedOnSegmentId: async (shieldInformationBarrierSegmentId: string, marker?: string, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'shieldInformationBarrierSegmentId' is not null or undefined
            assertParamExists('listBasedOnSegmentId', 'shieldInformationBarrierSegmentId', shieldInformationBarrierSegmentId)
            const localVarPath = `/shield_information_barrier_segment_restrictions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2Security required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Security", [], configuration)
            if (shieldInformationBarrierSegmentId !== undefined) {
                localVarQueryParameter['shield_information_barrier_segment_id'] = shieldInformationBarrierSegmentId;
            }

            if (marker !== undefined) {
                localVarQueryParameter['marker'] = marker;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/shield_information_barrier_segment_restrictions',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete shield information barrier segment restriction based on provided ID.
         * @summary Delete shield information barrier segment restriction by ID
         * @param {string} shieldInformationBarrierSegmentRestrictionId The ID of the shield information barrier segment Restriction.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeById: async (shieldInformationBarrierSegmentRestrictionId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'shieldInformationBarrierSegmentRestrictionId' is not null or undefined
            assertParamExists('removeById', 'shieldInformationBarrierSegmentRestrictionId', shieldInformationBarrierSegmentRestrictionId)
            const localVarPath = `/shield_information_barrier_segment_restrictions/{shield_information_barrier_segment_restriction_id}`
                .replace(`{${"shield_information_barrier_segment_restriction_id"}}`, encodeURIComponent(String(shieldInformationBarrierSegmentRestrictionId !== undefined ? shieldInformationBarrierSegmentRestrictionId : `-shield_information_barrier_segment_restriction_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2Security required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Security", [], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/shield_information_barrier_segment_restrictions/{shield_information_barrier_segment_restriction_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ShieldInformationBarrierSegmentRestrictionsApi - functional programming interface
 * @export
 */
export const ShieldInformationBarrierSegmentRestrictionsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ShieldInformationBarrierSegmentRestrictionsApiAxiosParamCreator(configuration)
    return {
        /**
         * Creates a shield information barrier segment restriction object.
         * @summary Create shield information barrier segment restriction
         * @param {ShieldInformationBarrierSegmentRestrictionsApiCreateBarrierObjectRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createBarrierObject(requestParameters: ShieldInformationBarrierSegmentRestrictionsApiCreateBarrierObjectRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShieldInformationBarrierSegmentRestriction>> {
            const shieldInformationBarrierSegmentRestrictionsCreateBarrierObjectRequest: ShieldInformationBarrierSegmentRestrictionsCreateBarrierObjectRequest = {
                type: requestParameters.type,
                shield_information_barrier: requestParameters.shield_information_barrier,
                shield_information_barrier_segment: requestParameters.shield_information_barrier_segment,
                restricted_segment: requestParameters.restricted_segment
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createBarrierObject(shieldInformationBarrierSegmentRestrictionsCreateBarrierObjectRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a shield information barrier segment restriction based on provided ID.
         * @summary Get shield information barrier segment restriction by ID
         * @param {ShieldInformationBarrierSegmentRestrictionsApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getById(requestParameters: ShieldInformationBarrierSegmentRestrictionsApiGetByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShieldInformationBarrierSegmentRestriction>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getById(requestParameters.shieldInformationBarrierSegmentRestrictionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Lists shield information barrier segment restrictions based on provided segment ID.
         * @summary List shield information barrier segment restrictions
         * @param {ShieldInformationBarrierSegmentRestrictionsApiListBasedOnSegmentIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listBasedOnSegmentId(requestParameters: ShieldInformationBarrierSegmentRestrictionsApiListBasedOnSegmentIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShieldInformationBarrierSegmentRestrictions>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listBasedOnSegmentId(requestParameters.shieldInformationBarrierSegmentId, requestParameters.marker, requestParameters.limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete shield information barrier segment restriction based on provided ID.
         * @summary Delete shield information barrier segment restriction by ID
         * @param {ShieldInformationBarrierSegmentRestrictionsApiRemoveByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeById(requestParameters: ShieldInformationBarrierSegmentRestrictionsApiRemoveByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeById(requestParameters.shieldInformationBarrierSegmentRestrictionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ShieldInformationBarrierSegmentRestrictionsApi - factory interface
 * @export
 */
export const ShieldInformationBarrierSegmentRestrictionsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ShieldInformationBarrierSegmentRestrictionsApiFp(configuration)
    return {
        /**
         * Creates a shield information barrier segment restriction object.
         * @summary Create shield information barrier segment restriction
         * @param {ShieldInformationBarrierSegmentRestrictionsApiCreateBarrierObjectRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBarrierObject(requestParameters: ShieldInformationBarrierSegmentRestrictionsApiCreateBarrierObjectRequest, options?: AxiosRequestConfig): AxiosPromise<ShieldInformationBarrierSegmentRestriction> {
            return localVarFp.createBarrierObject(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a shield information barrier segment restriction based on provided ID.
         * @summary Get shield information barrier segment restriction by ID
         * @param {ShieldInformationBarrierSegmentRestrictionsApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById(requestParameters: ShieldInformationBarrierSegmentRestrictionsApiGetByIdRequest, options?: AxiosRequestConfig): AxiosPromise<ShieldInformationBarrierSegmentRestriction> {
            return localVarFp.getById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Lists shield information barrier segment restrictions based on provided segment ID.
         * @summary List shield information barrier segment restrictions
         * @param {ShieldInformationBarrierSegmentRestrictionsApiListBasedOnSegmentIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listBasedOnSegmentId(requestParameters: ShieldInformationBarrierSegmentRestrictionsApiListBasedOnSegmentIdRequest, options?: AxiosRequestConfig): AxiosPromise<ShieldInformationBarrierSegmentRestrictions> {
            return localVarFp.listBasedOnSegmentId(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete shield information barrier segment restriction based on provided ID.
         * @summary Delete shield information barrier segment restriction by ID
         * @param {ShieldInformationBarrierSegmentRestrictionsApiRemoveByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeById(requestParameters: ShieldInformationBarrierSegmentRestrictionsApiRemoveByIdRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.removeById(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createBarrierObject operation in ShieldInformationBarrierSegmentRestrictionsApi.
 * @export
 * @interface ShieldInformationBarrierSegmentRestrictionsApiCreateBarrierObjectRequest
 */
export type ShieldInformationBarrierSegmentRestrictionsApiCreateBarrierObjectRequest = {
    
} & ShieldInformationBarrierSegmentRestrictionsCreateBarrierObjectRequest

/**
 * Request parameters for getById operation in ShieldInformationBarrierSegmentRestrictionsApi.
 * @export
 * @interface ShieldInformationBarrierSegmentRestrictionsApiGetByIdRequest
 */
export type ShieldInformationBarrierSegmentRestrictionsApiGetByIdRequest = {
    
    /**
    * The ID of the shield information barrier segment Restriction.
    * @type {string}
    * @memberof ShieldInformationBarrierSegmentRestrictionsApiGetById
    */
    readonly shieldInformationBarrierSegmentRestrictionId: string
    
}

/**
 * Request parameters for listBasedOnSegmentId operation in ShieldInformationBarrierSegmentRestrictionsApi.
 * @export
 * @interface ShieldInformationBarrierSegmentRestrictionsApiListBasedOnSegmentIdRequest
 */
export type ShieldInformationBarrierSegmentRestrictionsApiListBasedOnSegmentIdRequest = {
    
    /**
    * The ID of the shield information barrier segment.
    * @type {string}
    * @memberof ShieldInformationBarrierSegmentRestrictionsApiListBasedOnSegmentId
    */
    readonly shieldInformationBarrierSegmentId: string
    
    /**
    * Defines the position marker at which to begin returning results. This is used when paginating using marker-based pagination.  This requires `usemarker` to be set to `true`.
    * @type {string}
    * @memberof ShieldInformationBarrierSegmentRestrictionsApiListBasedOnSegmentId
    */
    readonly marker?: string
    
    /**
    * The maximum number of items to return per page.
    * @type {number}
    * @memberof ShieldInformationBarrierSegmentRestrictionsApiListBasedOnSegmentId
    */
    readonly limit?: number
    
}

/**
 * Request parameters for removeById operation in ShieldInformationBarrierSegmentRestrictionsApi.
 * @export
 * @interface ShieldInformationBarrierSegmentRestrictionsApiRemoveByIdRequest
 */
export type ShieldInformationBarrierSegmentRestrictionsApiRemoveByIdRequest = {
    
    /**
    * The ID of the shield information barrier segment Restriction.
    * @type {string}
    * @memberof ShieldInformationBarrierSegmentRestrictionsApiRemoveById
    */
    readonly shieldInformationBarrierSegmentRestrictionId: string
    
}

/**
 * ShieldInformationBarrierSegmentRestrictionsApiGenerated - object-oriented interface
 * @export
 * @class ShieldInformationBarrierSegmentRestrictionsApiGenerated
 * @extends {BaseAPI}
 */
export class ShieldInformationBarrierSegmentRestrictionsApiGenerated extends BaseAPI {
    /**
     * Creates a shield information barrier segment restriction object.
     * @summary Create shield information barrier segment restriction
     * @param {ShieldInformationBarrierSegmentRestrictionsApiCreateBarrierObjectRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShieldInformationBarrierSegmentRestrictionsApiGenerated
     */
    public createBarrierObject(requestParameters: ShieldInformationBarrierSegmentRestrictionsApiCreateBarrierObjectRequest, options?: AxiosRequestConfig) {
        return ShieldInformationBarrierSegmentRestrictionsApiFp(this.configuration).createBarrierObject(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a shield information barrier segment restriction based on provided ID.
     * @summary Get shield information barrier segment restriction by ID
     * @param {ShieldInformationBarrierSegmentRestrictionsApiGetByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShieldInformationBarrierSegmentRestrictionsApiGenerated
     */
    public getById(requestParameters: ShieldInformationBarrierSegmentRestrictionsApiGetByIdRequest, options?: AxiosRequestConfig) {
        return ShieldInformationBarrierSegmentRestrictionsApiFp(this.configuration).getById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Lists shield information barrier segment restrictions based on provided segment ID.
     * @summary List shield information barrier segment restrictions
     * @param {ShieldInformationBarrierSegmentRestrictionsApiListBasedOnSegmentIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShieldInformationBarrierSegmentRestrictionsApiGenerated
     */
    public listBasedOnSegmentId(requestParameters: ShieldInformationBarrierSegmentRestrictionsApiListBasedOnSegmentIdRequest, options?: AxiosRequestConfig) {
        return ShieldInformationBarrierSegmentRestrictionsApiFp(this.configuration).listBasedOnSegmentId(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete shield information barrier segment restriction based on provided ID.
     * @summary Delete shield information barrier segment restriction by ID
     * @param {ShieldInformationBarrierSegmentRestrictionsApiRemoveByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShieldInformationBarrierSegmentRestrictionsApiGenerated
     */
    public removeById(requestParameters: ShieldInformationBarrierSegmentRestrictionsApiRemoveByIdRequest, options?: AxiosRequestConfig) {
        return ShieldInformationBarrierSegmentRestrictionsApiFp(this.configuration).removeById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
