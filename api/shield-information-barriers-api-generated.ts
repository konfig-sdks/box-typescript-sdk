/* tslint:disable */
/* eslint-disable */
/*
Box Platform API

[Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.

The version of the OpenAPI document: 2.0.0
Contact: devrel@box.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ClientError } from '../models';
// @ts-ignore
import { EnterpriseBase } from '../models';
// @ts-ignore
import { ShieldInformationBarrier } from '../models';
// @ts-ignore
import { ShieldInformationBarriers } from '../models';
// @ts-ignore
import { ShieldInformationBarriersAddChangedStatusRequest } from '../models';
// @ts-ignore
import { ShieldInformationBarriersCreateBarrierRequest } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * ShieldInformationBarriersApi - axios parameter creator
 * @export
 */
export const ShieldInformationBarriersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Change status of shield information barrier with the specified ID.
         * @summary Add changed status of shield information barrier with specified ID
         * @param {ShieldInformationBarriersAddChangedStatusRequest} [shieldInformationBarriersAddChangedStatusRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addChangedStatus: async (shieldInformationBarriersAddChangedStatusRequest?: ShieldInformationBarriersAddChangedStatusRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/shield_information_barriers/change_status`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2Security required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Security", [], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: shieldInformationBarriersAddChangedStatusRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/shield_information_barriers/change_status',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(shieldInformationBarriersAddChangedStatusRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a shield information barrier to separate individuals/groups within the same firm and prevents confidential information passing between them.
         * @summary Create shield information barrier
         * @param {ShieldInformationBarriersCreateBarrierRequest} [shieldInformationBarriersCreateBarrierRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBarrier: async (shieldInformationBarriersCreateBarrierRequest?: ShieldInformationBarriersCreateBarrierRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/shield_information_barriers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2Security required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Security", [], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: shieldInformationBarriersCreateBarrierRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/shield_information_barriers',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(shieldInformationBarriersCreateBarrierRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get shield information barrier based on provided ID.
         * @summary Get shield information barrier with specified ID
         * @param {string} shieldInformationBarrierId The ID of the shield information barrier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById: async (shieldInformationBarrierId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'shieldInformationBarrierId' is not null or undefined
            assertParamExists('getById', 'shieldInformationBarrierId', shieldInformationBarrierId)
            const localVarPath = `/shield_information_barriers/{shield_information_barrier_id}`
                .replace(`{${"shield_information_barrier_id"}}`, encodeURIComponent(String(shieldInformationBarrierId !== undefined ? shieldInformationBarrierId : `-shield_information_barrier_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2Security required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Security", [], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/shield_information_barriers/{shield_information_barrier_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a list of shield information barrier objects for the enterprise of JWT.
         * @summary List shield information barriers
         * @param {string} [marker] Defines the position marker at which to begin returning results. This is used when paginating using marker-based pagination.
         * @param {number} [limit] The maximum number of items to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listInformationObjects: async (marker?: string, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/shield_information_barriers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2Security required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Security", [], configuration)
            if (marker !== undefined) {
                localVarQueryParameter['marker'] = marker;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/shield_information_barriers',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ShieldInformationBarriersApi - functional programming interface
 * @export
 */
export const ShieldInformationBarriersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ShieldInformationBarriersApiAxiosParamCreator(configuration)
    return {
        /**
         * Change status of shield information barrier with the specified ID.
         * @summary Add changed status of shield information barrier with specified ID
         * @param {ShieldInformationBarriersApiAddChangedStatusRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addChangedStatus(requestParameters: ShieldInformationBarriersApiAddChangedStatusRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShieldInformationBarrier>> {
            const shieldInformationBarriersAddChangedStatusRequest: ShieldInformationBarriersAddChangedStatusRequest = {
                id: requestParameters.id,
                status: requestParameters.status
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addChangedStatus(shieldInformationBarriersAddChangedStatusRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates a shield information barrier to separate individuals/groups within the same firm and prevents confidential information passing between them.
         * @summary Create shield information barrier
         * @param {ShieldInformationBarriersApiCreateBarrierRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createBarrier(requestParameters: ShieldInformationBarriersApiCreateBarrierRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShieldInformationBarrier>> {
            const shieldInformationBarriersCreateBarrierRequest: ShieldInformationBarriersCreateBarrierRequest = {
                enterprise: requestParameters.enterprise
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createBarrier(shieldInformationBarriersCreateBarrierRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get shield information barrier based on provided ID.
         * @summary Get shield information barrier with specified ID
         * @param {ShieldInformationBarriersApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getById(requestParameters: ShieldInformationBarriersApiGetByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShieldInformationBarrier>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getById(requestParameters.shieldInformationBarrierId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a list of shield information barrier objects for the enterprise of JWT.
         * @summary List shield information barriers
         * @param {ShieldInformationBarriersApiListInformationObjectsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listInformationObjects(requestParameters: ShieldInformationBarriersApiListInformationObjectsRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShieldInformationBarriers>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listInformationObjects(requestParameters.marker, requestParameters.limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ShieldInformationBarriersApi - factory interface
 * @export
 */
export const ShieldInformationBarriersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ShieldInformationBarriersApiFp(configuration)
    return {
        /**
         * Change status of shield information barrier with the specified ID.
         * @summary Add changed status of shield information barrier with specified ID
         * @param {ShieldInformationBarriersApiAddChangedStatusRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addChangedStatus(requestParameters: ShieldInformationBarriersApiAddChangedStatusRequest, options?: AxiosRequestConfig): AxiosPromise<ShieldInformationBarrier> {
            return localVarFp.addChangedStatus(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a shield information barrier to separate individuals/groups within the same firm and prevents confidential information passing between them.
         * @summary Create shield information barrier
         * @param {ShieldInformationBarriersApiCreateBarrierRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBarrier(requestParameters: ShieldInformationBarriersApiCreateBarrierRequest, options?: AxiosRequestConfig): AxiosPromise<ShieldInformationBarrier> {
            return localVarFp.createBarrier(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get shield information barrier based on provided ID.
         * @summary Get shield information barrier with specified ID
         * @param {ShieldInformationBarriersApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById(requestParameters: ShieldInformationBarriersApiGetByIdRequest, options?: AxiosRequestConfig): AxiosPromise<ShieldInformationBarrier> {
            return localVarFp.getById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a list of shield information barrier objects for the enterprise of JWT.
         * @summary List shield information barriers
         * @param {ShieldInformationBarriersApiListInformationObjectsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listInformationObjects(requestParameters: ShieldInformationBarriersApiListInformationObjectsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<ShieldInformationBarriers> {
            return localVarFp.listInformationObjects(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addChangedStatus operation in ShieldInformationBarriersApi.
 * @export
 * @interface ShieldInformationBarriersApiAddChangedStatusRequest
 */
export type ShieldInformationBarriersApiAddChangedStatusRequest = {
    
} & ShieldInformationBarriersAddChangedStatusRequest

/**
 * Request parameters for createBarrier operation in ShieldInformationBarriersApi.
 * @export
 * @interface ShieldInformationBarriersApiCreateBarrierRequest
 */
export type ShieldInformationBarriersApiCreateBarrierRequest = {
    
} & ShieldInformationBarriersCreateBarrierRequest

/**
 * Request parameters for getById operation in ShieldInformationBarriersApi.
 * @export
 * @interface ShieldInformationBarriersApiGetByIdRequest
 */
export type ShieldInformationBarriersApiGetByIdRequest = {
    
    /**
    * The ID of the shield information barrier.
    * @type {string}
    * @memberof ShieldInformationBarriersApiGetById
    */
    readonly shieldInformationBarrierId: string
    
}

/**
 * Request parameters for listInformationObjects operation in ShieldInformationBarriersApi.
 * @export
 * @interface ShieldInformationBarriersApiListInformationObjectsRequest
 */
export type ShieldInformationBarriersApiListInformationObjectsRequest = {
    
    /**
    * Defines the position marker at which to begin returning results. This is used when paginating using marker-based pagination.
    * @type {string}
    * @memberof ShieldInformationBarriersApiListInformationObjects
    */
    readonly marker?: string
    
    /**
    * The maximum number of items to return per page.
    * @type {number}
    * @memberof ShieldInformationBarriersApiListInformationObjects
    */
    readonly limit?: number
    
}

/**
 * ShieldInformationBarriersApiGenerated - object-oriented interface
 * @export
 * @class ShieldInformationBarriersApiGenerated
 * @extends {BaseAPI}
 */
export class ShieldInformationBarriersApiGenerated extends BaseAPI {
    /**
     * Change status of shield information barrier with the specified ID.
     * @summary Add changed status of shield information barrier with specified ID
     * @param {ShieldInformationBarriersApiAddChangedStatusRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShieldInformationBarriersApiGenerated
     */
    public addChangedStatus(requestParameters: ShieldInformationBarriersApiAddChangedStatusRequest, options?: AxiosRequestConfig) {
        return ShieldInformationBarriersApiFp(this.configuration).addChangedStatus(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a shield information barrier to separate individuals/groups within the same firm and prevents confidential information passing between them.
     * @summary Create shield information barrier
     * @param {ShieldInformationBarriersApiCreateBarrierRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShieldInformationBarriersApiGenerated
     */
    public createBarrier(requestParameters: ShieldInformationBarriersApiCreateBarrierRequest, options?: AxiosRequestConfig) {
        return ShieldInformationBarriersApiFp(this.configuration).createBarrier(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get shield information barrier based on provided ID.
     * @summary Get shield information barrier with specified ID
     * @param {ShieldInformationBarriersApiGetByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShieldInformationBarriersApiGenerated
     */
    public getById(requestParameters: ShieldInformationBarriersApiGetByIdRequest, options?: AxiosRequestConfig) {
        return ShieldInformationBarriersApiFp(this.configuration).getById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a list of shield information barrier objects for the enterprise of JWT.
     * @summary List shield information barriers
     * @param {ShieldInformationBarriersApiListInformationObjectsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShieldInformationBarriersApiGenerated
     */
    public listInformationObjects(requestParameters: ShieldInformationBarriersApiListInformationObjectsRequest = {}, options?: AxiosRequestConfig) {
        return ShieldInformationBarriersApiFp(this.configuration).listInformationObjects(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
