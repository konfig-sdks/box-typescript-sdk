/* tslint:disable */
/* eslint-disable */
/*
Box Platform API

[Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.

The version of the OpenAPI document: 2.0.0
Contact: devrel@box.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ClientError } from '../models';
// @ts-ignore
import { SignTemplate } from '../models';
// @ts-ignore
import { SignTemplates } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * SignTemplatesApi - axios parameter creator
 * @export
 */
export const SignTemplatesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Fetches details of a specific Box Sign template.
         * @summary Get Box Sign template by ID
         * @param {string} templateId The ID of a Box Sign template.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDetails: async (templateId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'templateId' is not null or undefined
            assertParamExists('getDetails', 'templateId', templateId)
            const localVarPath = `/sign_templates/{template_id}`
                .replace(`{${"template_id"}}`, encodeURIComponent(String(templateId !== undefined ? templateId : `-template_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2Security required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Security", [], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/sign_templates/{template_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets Box Sign templates created by a user.
         * @summary List Box Sign templates
         * @param {string} [marker] Defines the position marker at which to begin returning results. This is used when paginating using marker-based pagination.  This requires &#x60;usemarker&#x60; to be set to &#x60;true&#x60;.
         * @param {number} [limit] The maximum number of items to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTemplates: async (marker?: string, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/sign_templates`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2Security required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Security", [], configuration)
            if (marker !== undefined) {
                localVarQueryParameter['marker'] = marker;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/sign_templates',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SignTemplatesApi - functional programming interface
 * @export
 */
export const SignTemplatesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SignTemplatesApiAxiosParamCreator(configuration)
    return {
        /**
         * Fetches details of a specific Box Sign template.
         * @summary Get Box Sign template by ID
         * @param {SignTemplatesApiGetDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDetails(requestParameters: SignTemplatesApiGetDetailsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SignTemplate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDetails(requestParameters.templateId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Gets Box Sign templates created by a user.
         * @summary List Box Sign templates
         * @param {SignTemplatesApiListTemplatesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listTemplates(requestParameters: SignTemplatesApiListTemplatesRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SignTemplates>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listTemplates(requestParameters.marker, requestParameters.limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SignTemplatesApi - factory interface
 * @export
 */
export const SignTemplatesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SignTemplatesApiFp(configuration)
    return {
        /**
         * Fetches details of a specific Box Sign template.
         * @summary Get Box Sign template by ID
         * @param {SignTemplatesApiGetDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDetails(requestParameters: SignTemplatesApiGetDetailsRequest, options?: AxiosRequestConfig): AxiosPromise<SignTemplate> {
            return localVarFp.getDetails(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets Box Sign templates created by a user.
         * @summary List Box Sign templates
         * @param {SignTemplatesApiListTemplatesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTemplates(requestParameters: SignTemplatesApiListTemplatesRequest = {}, options?: AxiosRequestConfig): AxiosPromise<SignTemplates> {
            return localVarFp.listTemplates(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getDetails operation in SignTemplatesApi.
 * @export
 * @interface SignTemplatesApiGetDetailsRequest
 */
export type SignTemplatesApiGetDetailsRequest = {
    
    /**
    * The ID of a Box Sign template.
    * @type {string}
    * @memberof SignTemplatesApiGetDetails
    */
    readonly templateId: string
    
}

/**
 * Request parameters for listTemplates operation in SignTemplatesApi.
 * @export
 * @interface SignTemplatesApiListTemplatesRequest
 */
export type SignTemplatesApiListTemplatesRequest = {
    
    /**
    * Defines the position marker at which to begin returning results. This is used when paginating using marker-based pagination.  This requires `usemarker` to be set to `true`.
    * @type {string}
    * @memberof SignTemplatesApiListTemplates
    */
    readonly marker?: string
    
    /**
    * The maximum number of items to return per page.
    * @type {number}
    * @memberof SignTemplatesApiListTemplates
    */
    readonly limit?: number
    
}

/**
 * SignTemplatesApiGenerated - object-oriented interface
 * @export
 * @class SignTemplatesApiGenerated
 * @extends {BaseAPI}
 */
export class SignTemplatesApiGenerated extends BaseAPI {
    /**
     * Fetches details of a specific Box Sign template.
     * @summary Get Box Sign template by ID
     * @param {SignTemplatesApiGetDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SignTemplatesApiGenerated
     */
    public getDetails(requestParameters: SignTemplatesApiGetDetailsRequest, options?: AxiosRequestConfig) {
        return SignTemplatesApiFp(this.configuration).getDetails(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets Box Sign templates created by a user.
     * @summary List Box Sign templates
     * @param {SignTemplatesApiListTemplatesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SignTemplatesApiGenerated
     */
    public listTemplates(requestParameters: SignTemplatesApiListTemplatesRequest = {}, options?: AxiosRequestConfig) {
        return SignTemplatesApiFp(this.configuration).listTemplates(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
