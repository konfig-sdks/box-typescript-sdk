/* tslint:disable */
/* eslint-disable */
/*
Box Platform API

[Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.

The version of the OpenAPI document: 2.0.0
Contact: devrel@box.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ClientError } from '../models';
// @ts-ignore
import { ConflictError } from '../models';
// @ts-ignore
import { FileFull } from '../models';
// @ts-ignore
import { FilesCreateCopyRequest } from '../models';
// @ts-ignore
import { FilesCreateCopyRequestParent } from '../models';
// @ts-ignore
import { FilesPreflightCheckBeforeUploadRequest } from '../models';
// @ts-ignore
import { FilesPreflightCheckBeforeUploadRequestParent } from '../models';
// @ts-ignore
import { FilesUpdateFileRequest } from '../models';
// @ts-ignore
import { FilesUpdateFileRequestLock } from '../models';
// @ts-ignore
import { FilesUpdateFileRequestParent } from '../models';
// @ts-ignore
import { FilesUpdateFileRequestPermissions } from '../models';
// @ts-ignore
import { FilesUpdateFileRequestSharedLink } from '../models';
// @ts-ignore
import { Reference1 } from '../models';
// @ts-ignore
import { UploadUrl } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * FilesApi - axios parameter creator
 * @export
 */
export const FilesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a copy of a file.
         * @summary Copy file
         * @param {string} fileId The unique identifier that represents a file.  The ID for any file can be determined by visiting a file in the web application and copying the ID from the URL. For example, for the URL &#x60;https://_*.app.box.com/files/123&#x60; the &#x60;file_id&#x60; is &#x60;123&#x60;.
         * @param {Array<string>} [fields] A comma-separated list of attributes to include in the response. This can be used to request fields that are not normally returned in a standard response.  Be aware that specifying this parameter will have the effect that none of the standard fields are returned in the response unless explicitly specified, instead only fields for the mini representation are returned, additional to the fields requested.
         * @param {FilesCreateCopyRequest} [filesCreateCopyRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCopy: async (fileId: string, fields?: Array<string>, filesCreateCopyRequest?: FilesCreateCopyRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fileId' is not null or undefined
            assertParamExists('createCopy', 'fileId', fileId)
            const localVarPath = `/files/{file_id}/copy`
                .replace(`{${"file_id"}}`, encodeURIComponent(String(fileId !== undefined ? fileId : `-file_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2Security required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Security", [], configuration)
            if (fields) {
                localVarQueryParameter['fields'] = fields.join(COLLECTION_FORMATS.csv);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: filesCreateCopyRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/files/{file_id}/copy',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(filesCreateCopyRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a file, either permanently or by moving it to the trash.  The the enterprise settings determine whether the item will be permanently deleted from Box or moved to the trash.
         * @summary Delete file
         * @param {string} fileId The unique identifier that represents a file.  The ID for any file can be determined by visiting a file in the web application and copying the ID from the URL. For example, for the URL &#x60;https://_*.app.box.com/files/123&#x60; the &#x60;file_id&#x60; is &#x60;123&#x60;.
         * @param {string} [ifMatch] Ensures this item hasn\&#39;t recently changed before making changes.  Pass in the item\&#39;s last observed &#x60;etag&#x60; value into this header and the endpoint will fail with a &#x60;412 Precondition Failed&#x60; if it has changed since.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFile: async (fileId: string, ifMatch?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fileId' is not null or undefined
            assertParamExists('deleteFile', 'fileId', fileId)
            const localVarPath = `/files/{file_id}`
                .replace(`{${"file_id"}}`, encodeURIComponent(String(fileId !== undefined ? fileId : `-file_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2Security required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Security", [], configuration)
            if (ifMatch != null) {
                localVarHeaderParameter['if-match'] = String(ifMatch);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/files/{file_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the details about a file.
         * @summary Get file information
         * @param {string} fileId The unique identifier that represents a file.  The ID for any file can be determined by visiting a file in the web application and copying the ID from the URL. For example, for the URL &#x60;https://_*.app.box.com/files/123&#x60; the &#x60;file_id&#x60; is &#x60;123&#x60;.
         * @param {Array<string>} [fields] A comma-separated list of attributes to include in the response. This can be used to request fields that are not normally returned in a standard response.  Be aware that specifying this parameter will have the effect that none of the standard fields are returned in the response unless explicitly specified, instead only fields for the mini representation are returned, additional to the fields requested.  Additionally this field can be used to query any metadata applied to the file by specifying the &#x60;metadata&#x60; field as well as the scope and key of the template to retrieve, for example &#x60;?field&#x3D;metadata.enterprise_12345.contractTemplate&#x60;.
         * @param {string} [ifNoneMatch] Ensures an item is only returned if it has changed.  Pass in the item\&#39;s last observed &#x60;etag&#x60; value into this header and the endpoint will fail with a &#x60;304 Not Modified&#x60; if the item has not changed since.
         * @param {string} [boxapi] The URL, and optional password, for the shared link of this item.  This header can be used to access items that have not been explicitly shared with a user.  Use the format &#x60;shared_link&#x3D;[link]&#x60; or if a password is required then use &#x60;shared_link&#x3D;[link]&amp;shared_link_password&#x3D;[password]&#x60;.  This header can be used on the file or folder shared, as well as on any files or folders nested within the item.
         * @param {string} [xRepHints] A header required to request specific &#x60;representations&#x60; of a file. Use this in combination with the &#x60;fields&#x60; query parameter to request a specific file representation.  The general format for these representations is &#x60;X-Rep-Hints: [...]&#x60; where &#x60;[...]&#x60; is one or many hints in the format &#x60;[fileType?query]&#x60;.  For example, to request a &#x60;png&#x60; representation in &#x60;32x32&#x60; as well as &#x60;64x64&#x60; pixel dimensions provide the following hints.  &#x60;x-rep-hints: [jpg?dimensions&#x3D;32x32][jpg?dimensions&#x3D;64x64]&#x60;  Additionally, a &#x60;text&#x60; representation is available for all document file types in Box using the &#x60;[extracted_text]&#x60; representation.  &#x60;x-rep-hints: [extracted_text]&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDetails: async (fileId: string, fields?: Array<string>, ifNoneMatch?: string, boxapi?: string, xRepHints?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fileId' is not null or undefined
            assertParamExists('getDetails', 'fileId', fileId)
            const localVarPath = `/files/{file_id}`
                .replace(`{${"file_id"}}`, encodeURIComponent(String(fileId !== undefined ? fileId : `-file_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2Security required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Security", [], configuration)
            if (fields) {
                localVarQueryParameter['fields'] = fields.join(COLLECTION_FORMATS.csv);
            }

            if (ifNoneMatch != null) {
                localVarHeaderParameter['if-none-match'] = String(ifNoneMatch);
            }

            if (boxapi != null) {
                localVarHeaderParameter['boxapi'] = String(boxapi);
            }

            if (xRepHints != null) {
                localVarHeaderParameter['x-rep-hints'] = String(xRepHints);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/files/{file_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a thumbnail, or smaller image representation, of a file.  Sizes of `32x32`,`64x64`, `128x128`, and `256x256` can be returned in the `.png` format and sizes of `32x32`, `160x160`, and `320x320` can be returned in the `.jpg` format.  Thumbnails can be generated for the image and video file formats listed [found on our community site][1].  [1]: https://community.box.com/t5/Migrating-and-Previewing-Content/File-Types-and-Fonts-Supported-in-Box-Content-Preview/ta-p/327
         * @summary Get file thumbnail
         * @param {string} fileId The unique identifier that represents a file.  The ID for any file can be determined by visiting a file in the web application and copying the ID from the URL. For example, for the URL &#x60;https://_*.app.box.com/files/123&#x60; the &#x60;file_id&#x60; is &#x60;123&#x60;.
         * @param {'png' | 'jpg'} extension The file format for the thumbnail
         * @param {number} [minHeight] The minimum height of the thumbnail
         * @param {number} [minWidth] The minimum width of the thumbnail
         * @param {number} [maxHeight] The maximum height of the thumbnail
         * @param {number} [maxWidth] The maximum width of the thumbnail
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getThumbnail: async (fileId: string, extension: 'png' | 'jpg', minHeight?: number, minWidth?: number, maxHeight?: number, maxWidth?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fileId' is not null or undefined
            assertParamExists('getThumbnail', 'fileId', fileId)
            // verify required parameter 'extension' is not null or undefined
            assertParamExists('getThumbnail', 'extension', extension)
            const localVarPath = `/files/{file_id}/thumbnail.{extension}`
                .replace(`{${"file_id"}}`, encodeURIComponent(String(fileId !== undefined ? fileId : `-file_id-`)))
                .replace(`{${"extension"}}`, encodeURIComponent(String(extension !== undefined ? extension : `-extension-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2Security required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Security", [], configuration)
            if (minHeight !== undefined) {
                localVarQueryParameter['min_height'] = minHeight;
            }

            if (minWidth !== undefined) {
                localVarQueryParameter['min_width'] = minWidth;
            }

            if (maxHeight !== undefined) {
                localVarQueryParameter['max_height'] = maxHeight;
            }

            if (maxWidth !== undefined) {
                localVarQueryParameter['max_width'] = maxWidth;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/files/{file_id}/thumbnail.{extension}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Performs a check to verify that a file will be accepted by Box before you upload the entire file.
         * @summary Preflight check before upload
         * @param {FilesPreflightCheckBeforeUploadRequest} [filesPreflightCheckBeforeUploadRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        preflightCheckBeforeUpload: async (filesPreflightCheckBeforeUploadRequest?: FilesPreflightCheckBeforeUploadRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/files/content`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'OPTIONS', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2Security required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Security", [], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: filesPreflightCheckBeforeUploadRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/files/content',
                httpMethod: 'OPTIONS'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(filesPreflightCheckBeforeUploadRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates a file. This can be used to rename or move a file, create a shared link, or lock a file.
         * @summary Update file
         * @param {string} fileId The unique identifier that represents a file.  The ID for any file can be determined by visiting a file in the web application and copying the ID from the URL. For example, for the URL &#x60;https://_*.app.box.com/files/123&#x60; the &#x60;file_id&#x60; is &#x60;123&#x60;.
         * @param {Array<string>} [fields] A comma-separated list of attributes to include in the response. This can be used to request fields that are not normally returned in a standard response.  Be aware that specifying this parameter will have the effect that none of the standard fields are returned in the response unless explicitly specified, instead only fields for the mini representation are returned, additional to the fields requested.
         * @param {string} [ifMatch] Ensures this item hasn\&#39;t recently changed before making changes.  Pass in the item\&#39;s last observed &#x60;etag&#x60; value into this header and the endpoint will fail with a &#x60;412 Precondition Failed&#x60; if it has changed since.
         * @param {FilesUpdateFileRequest} [filesUpdateFileRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateFile: async (fileId: string, fields?: Array<string>, ifMatch?: string, filesUpdateFileRequest?: FilesUpdateFileRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fileId' is not null or undefined
            assertParamExists('updateFile', 'fileId', fileId)
            const localVarPath = `/files/{file_id}`
                .replace(`{${"file_id"}}`, encodeURIComponent(String(fileId !== undefined ? fileId : `-file_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2Security required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Security", [], configuration)
            if (fields) {
                localVarQueryParameter['fields'] = fields.join(COLLECTION_FORMATS.csv);
            }

            if (ifMatch != null) {
                localVarHeaderParameter['if-match'] = String(ifMatch);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: filesUpdateFileRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/files/{file_id}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(filesUpdateFileRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FilesApi - functional programming interface
 * @export
 */
export const FilesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FilesApiAxiosParamCreator(configuration)
    return {
        /**
         * Creates a copy of a file.
         * @summary Copy file
         * @param {FilesApiCreateCopyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createCopy(requestParameters: FilesApiCreateCopyRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FileFull>> {
            const filesCreateCopyRequest: FilesCreateCopyRequest = {
                version: requestParameters.version,
                name: requestParameters.name,
                parent: requestParameters.parent
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createCopy(requestParameters.fileId, requestParameters.fields, filesCreateCopyRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Deletes a file, either permanently or by moving it to the trash.  The the enterprise settings determine whether the item will be permanently deleted from Box or moved to the trash.
         * @summary Delete file
         * @param {FilesApiDeleteFileRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteFile(requestParameters: FilesApiDeleteFileRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteFile(requestParameters.fileId, requestParameters.ifMatch, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves the details about a file.
         * @summary Get file information
         * @param {FilesApiGetDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDetails(requestParameters: FilesApiGetDetailsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FileFull>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDetails(requestParameters.fileId, requestParameters.fields, requestParameters.ifNoneMatch, requestParameters.boxapi, requestParameters.xRepHints, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a thumbnail, or smaller image representation, of a file.  Sizes of `32x32`,`64x64`, `128x128`, and `256x256` can be returned in the `.png` format and sizes of `32x32`, `160x160`, and `320x320` can be returned in the `.jpg` format.  Thumbnails can be generated for the image and video file formats listed [found on our community site][1].  [1]: https://community.box.com/t5/Migrating-and-Previewing-Content/File-Types-and-Fonts-Supported-in-Box-Content-Preview/ta-p/327
         * @summary Get file thumbnail
         * @param {FilesApiGetThumbnailRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getThumbnail(requestParameters: FilesApiGetThumbnailRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Uint8Array | File | buffer.File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getThumbnail(requestParameters.fileId, requestParameters.extension, requestParameters.minHeight, requestParameters.minWidth, requestParameters.maxHeight, requestParameters.maxWidth, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Performs a check to verify that a file will be accepted by Box before you upload the entire file.
         * @summary Preflight check before upload
         * @param {FilesApiPreflightCheckBeforeUploadRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async preflightCheckBeforeUpload(requestParameters: FilesApiPreflightCheckBeforeUploadRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UploadUrl>> {
            const filesPreflightCheckBeforeUploadRequest: FilesPreflightCheckBeforeUploadRequest = {
                name: requestParameters.name,
                size: requestParameters.size,
                parent: requestParameters.parent
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.preflightCheckBeforeUpload(filesPreflightCheckBeforeUploadRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates a file. This can be used to rename or move a file, create a shared link, or lock a file.
         * @summary Update file
         * @param {FilesApiUpdateFileRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateFile(requestParameters: FilesApiUpdateFileRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FileFull>> {
            const filesUpdateFileRequest: FilesUpdateFileRequest = {
                tags: requestParameters.tags,
                description: requestParameters.description,
                name: requestParameters.name,
                parent: requestParameters.parent,
                shared_link: requestParameters.shared_link,
                lock: requestParameters.lock,
                disposition_at: requestParameters.disposition_at,
                permissions: requestParameters.permissions,
                collections: requestParameters.collections
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateFile(requestParameters.fileId, requestParameters.fields, requestParameters.ifMatch, filesUpdateFileRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * FilesApi - factory interface
 * @export
 */
export const FilesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FilesApiFp(configuration)
    return {
        /**
         * Creates a copy of a file.
         * @summary Copy file
         * @param {FilesApiCreateCopyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCopy(requestParameters: FilesApiCreateCopyRequest, options?: AxiosRequestConfig): AxiosPromise<FileFull> {
            return localVarFp.createCopy(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes a file, either permanently or by moving it to the trash.  The the enterprise settings determine whether the item will be permanently deleted from Box or moved to the trash.
         * @summary Delete file
         * @param {FilesApiDeleteFileRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFile(requestParameters: FilesApiDeleteFileRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteFile(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the details about a file.
         * @summary Get file information
         * @param {FilesApiGetDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDetails(requestParameters: FilesApiGetDetailsRequest, options?: AxiosRequestConfig): AxiosPromise<FileFull> {
            return localVarFp.getDetails(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a thumbnail, or smaller image representation, of a file.  Sizes of `32x32`,`64x64`, `128x128`, and `256x256` can be returned in the `.png` format and sizes of `32x32`, `160x160`, and `320x320` can be returned in the `.jpg` format.  Thumbnails can be generated for the image and video file formats listed [found on our community site][1].  [1]: https://community.box.com/t5/Migrating-and-Previewing-Content/File-Types-and-Fonts-Supported-in-Box-Content-Preview/ta-p/327
         * @summary Get file thumbnail
         * @param {FilesApiGetThumbnailRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getThumbnail(requestParameters: FilesApiGetThumbnailRequest, options?: AxiosRequestConfig): AxiosPromise<Uint8Array | File | buffer.File> {
            return localVarFp.getThumbnail(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Performs a check to verify that a file will be accepted by Box before you upload the entire file.
         * @summary Preflight check before upload
         * @param {FilesApiPreflightCheckBeforeUploadRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        preflightCheckBeforeUpload(requestParameters: FilesApiPreflightCheckBeforeUploadRequest = {}, options?: AxiosRequestConfig): AxiosPromise<UploadUrl> {
            return localVarFp.preflightCheckBeforeUpload(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates a file. This can be used to rename or move a file, create a shared link, or lock a file.
         * @summary Update file
         * @param {FilesApiUpdateFileRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateFile(requestParameters: FilesApiUpdateFileRequest, options?: AxiosRequestConfig): AxiosPromise<FileFull> {
            return localVarFp.updateFile(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createCopy operation in FilesApi.
 * @export
 * @interface FilesApiCreateCopyRequest
 */
export type FilesApiCreateCopyRequest = {
    
    /**
    * The unique identifier that represents a file.  The ID for any file can be determined by visiting a file in the web application and copying the ID from the URL. For example, for the URL `https://_*.app.box.com/files/123` the `file_id` is `123`.
    * @type {string}
    * @memberof FilesApiCreateCopy
    */
    readonly fileId: string
    
    /**
    * A comma-separated list of attributes to include in the response. This can be used to request fields that are not normally returned in a standard response.  Be aware that specifying this parameter will have the effect that none of the standard fields are returned in the response unless explicitly specified, instead only fields for the mini representation are returned, additional to the fields requested.
    * @type {Array<string>}
    * @memberof FilesApiCreateCopy
    */
    readonly fields?: Array<string>
    
} & FilesCreateCopyRequest

/**
 * Request parameters for deleteFile operation in FilesApi.
 * @export
 * @interface FilesApiDeleteFileRequest
 */
export type FilesApiDeleteFileRequest = {
    
    /**
    * The unique identifier that represents a file.  The ID for any file can be determined by visiting a file in the web application and copying the ID from the URL. For example, for the URL `https://_*.app.box.com/files/123` the `file_id` is `123`.
    * @type {string}
    * @memberof FilesApiDeleteFile
    */
    readonly fileId: string
    
    /**
    * Ensures this item hasn\'t recently changed before making changes.  Pass in the item\'s last observed `etag` value into this header and the endpoint will fail with a `412 Precondition Failed` if it has changed since.
    * @type {string}
    * @memberof FilesApiDeleteFile
    */
    readonly ifMatch?: string
    
}

/**
 * Request parameters for getDetails operation in FilesApi.
 * @export
 * @interface FilesApiGetDetailsRequest
 */
export type FilesApiGetDetailsRequest = {
    
    /**
    * The unique identifier that represents a file.  The ID for any file can be determined by visiting a file in the web application and copying the ID from the URL. For example, for the URL `https://_*.app.box.com/files/123` the `file_id` is `123`.
    * @type {string}
    * @memberof FilesApiGetDetails
    */
    readonly fileId: string
    
    /**
    * A comma-separated list of attributes to include in the response. This can be used to request fields that are not normally returned in a standard response.  Be aware that specifying this parameter will have the effect that none of the standard fields are returned in the response unless explicitly specified, instead only fields for the mini representation are returned, additional to the fields requested.  Additionally this field can be used to query any metadata applied to the file by specifying the `metadata` field as well as the scope and key of the template to retrieve, for example `?field=metadata.enterprise_12345.contractTemplate`.
    * @type {Array<string>}
    * @memberof FilesApiGetDetails
    */
    readonly fields?: Array<string>
    
    /**
    * Ensures an item is only returned if it has changed.  Pass in the item\'s last observed `etag` value into this header and the endpoint will fail with a `304 Not Modified` if the item has not changed since.
    * @type {string}
    * @memberof FilesApiGetDetails
    */
    readonly ifNoneMatch?: string
    
    /**
    * The URL, and optional password, for the shared link of this item.  This header can be used to access items that have not been explicitly shared with a user.  Use the format `shared_link=[link]` or if a password is required then use `shared_link=[link]&shared_link_password=[password]`.  This header can be used on the file or folder shared, as well as on any files or folders nested within the item.
    * @type {string}
    * @memberof FilesApiGetDetails
    */
    readonly boxapi?: string
    
    /**
    * A header required to request specific `representations` of a file. Use this in combination with the `fields` query parameter to request a specific file representation.  The general format for these representations is `X-Rep-Hints: [...]` where `[...]` is one or many hints in the format `[fileType?query]`.  For example, to request a `png` representation in `32x32` as well as `64x64` pixel dimensions provide the following hints.  `x-rep-hints: [jpg?dimensions=32x32][jpg?dimensions=64x64]`  Additionally, a `text` representation is available for all document file types in Box using the `[extracted_text]` representation.  `x-rep-hints: [extracted_text]`
    * @type {string}
    * @memberof FilesApiGetDetails
    */
    readonly xRepHints?: string
    
}

/**
 * Request parameters for getThumbnail operation in FilesApi.
 * @export
 * @interface FilesApiGetThumbnailRequest
 */
export type FilesApiGetThumbnailRequest = {
    
    /**
    * The unique identifier that represents a file.  The ID for any file can be determined by visiting a file in the web application and copying the ID from the URL. For example, for the URL `https://_*.app.box.com/files/123` the `file_id` is `123`.
    * @type {string}
    * @memberof FilesApiGetThumbnail
    */
    readonly fileId: string
    
    /**
    * The file format for the thumbnail
    * @type {'png' | 'jpg'}
    * @memberof FilesApiGetThumbnail
    */
    readonly extension: 'png' | 'jpg'
    
    /**
    * The minimum height of the thumbnail
    * @type {number}
    * @memberof FilesApiGetThumbnail
    */
    readonly minHeight?: number
    
    /**
    * The minimum width of the thumbnail
    * @type {number}
    * @memberof FilesApiGetThumbnail
    */
    readonly minWidth?: number
    
    /**
    * The maximum height of the thumbnail
    * @type {number}
    * @memberof FilesApiGetThumbnail
    */
    readonly maxHeight?: number
    
    /**
    * The maximum width of the thumbnail
    * @type {number}
    * @memberof FilesApiGetThumbnail
    */
    readonly maxWidth?: number
    
}

/**
 * Request parameters for preflightCheckBeforeUpload operation in FilesApi.
 * @export
 * @interface FilesApiPreflightCheckBeforeUploadRequest
 */
export type FilesApiPreflightCheckBeforeUploadRequest = {
    
} & FilesPreflightCheckBeforeUploadRequest

/**
 * Request parameters for updateFile operation in FilesApi.
 * @export
 * @interface FilesApiUpdateFileRequest
 */
export type FilesApiUpdateFileRequest = {
    
    /**
    * The unique identifier that represents a file.  The ID for any file can be determined by visiting a file in the web application and copying the ID from the URL. For example, for the URL `https://_*.app.box.com/files/123` the `file_id` is `123`.
    * @type {string}
    * @memberof FilesApiUpdateFile
    */
    readonly fileId: string
    
    /**
    * A comma-separated list of attributes to include in the response. This can be used to request fields that are not normally returned in a standard response.  Be aware that specifying this parameter will have the effect that none of the standard fields are returned in the response unless explicitly specified, instead only fields for the mini representation are returned, additional to the fields requested.
    * @type {Array<string>}
    * @memberof FilesApiUpdateFile
    */
    readonly fields?: Array<string>
    
    /**
    * Ensures this item hasn\'t recently changed before making changes.  Pass in the item\'s last observed `etag` value into this header and the endpoint will fail with a `412 Precondition Failed` if it has changed since.
    * @type {string}
    * @memberof FilesApiUpdateFile
    */
    readonly ifMatch?: string
    
} & FilesUpdateFileRequest

/**
 * FilesApiGenerated - object-oriented interface
 * @export
 * @class FilesApiGenerated
 * @extends {BaseAPI}
 */
export class FilesApiGenerated extends BaseAPI {
    /**
     * Creates a copy of a file.
     * @summary Copy file
     * @param {FilesApiCreateCopyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesApiGenerated
     */
    public createCopy(requestParameters: FilesApiCreateCopyRequest, options?: AxiosRequestConfig) {
        return FilesApiFp(this.configuration).createCopy(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes a file, either permanently or by moving it to the trash.  The the enterprise settings determine whether the item will be permanently deleted from Box or moved to the trash.
     * @summary Delete file
     * @param {FilesApiDeleteFileRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesApiGenerated
     */
    public deleteFile(requestParameters: FilesApiDeleteFileRequest, options?: AxiosRequestConfig) {
        return FilesApiFp(this.configuration).deleteFile(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves the details about a file.
     * @summary Get file information
     * @param {FilesApiGetDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesApiGenerated
     */
    public getDetails(requestParameters: FilesApiGetDetailsRequest, options?: AxiosRequestConfig) {
        return FilesApiFp(this.configuration).getDetails(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a thumbnail, or smaller image representation, of a file.  Sizes of `32x32`,`64x64`, `128x128`, and `256x256` can be returned in the `.png` format and sizes of `32x32`, `160x160`, and `320x320` can be returned in the `.jpg` format.  Thumbnails can be generated for the image and video file formats listed [found on our community site][1].  [1]: https://community.box.com/t5/Migrating-and-Previewing-Content/File-Types-and-Fonts-Supported-in-Box-Content-Preview/ta-p/327
     * @summary Get file thumbnail
     * @param {FilesApiGetThumbnailRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesApiGenerated
     */
    public getThumbnail(requestParameters: FilesApiGetThumbnailRequest, options?: AxiosRequestConfig) {
        return FilesApiFp(this.configuration).getThumbnail(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Performs a check to verify that a file will be accepted by Box before you upload the entire file.
     * @summary Preflight check before upload
     * @param {FilesApiPreflightCheckBeforeUploadRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesApiGenerated
     */
    public preflightCheckBeforeUpload(requestParameters: FilesApiPreflightCheckBeforeUploadRequest = {}, options?: AxiosRequestConfig) {
        return FilesApiFp(this.configuration).preflightCheckBeforeUpload(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates a file. This can be used to rename or move a file, create a shared link, or lock a file.
     * @summary Update file
     * @param {FilesApiUpdateFileRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesApiGenerated
     */
    public updateFile(requestParameters: FilesApiUpdateFileRequest, options?: AxiosRequestConfig) {
        return FilesApiFp(this.configuration).updateFile(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
