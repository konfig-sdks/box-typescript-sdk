/* tslint:disable */
/* eslint-disable */
/*
Box Platform API

[Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.

The version of the OpenAPI document: 2.0.0
Contact: devrel@box.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ClientError } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * DownloadsApi - axios parameter creator
 * @export
 */
export const DownloadsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns the contents of a file in binary format.
         * @summary Download file
         * @param {string} fileId The unique identifier that represents a file.  The ID for any file can be determined by visiting a file in the web application and copying the ID from the URL. For example, for the URL &#x60;https://_*.app.box.com/files/123&#x60; the &#x60;file_id&#x60; is &#x60;123&#x60;.
         * @param {string} [range] The byte range of the content to download.  The format &#x60;bytes&#x3D;{start_byte}-{end_byte}&#x60; can be used to specify what section of the file to download.
         * @param {string} [boxapi] The URL, and optional password, for the shared link of this item.  This header can be used to access items that have not been explicitly shared with a user.  Use the format &#x60;shared_link&#x3D;[link]&#x60; or if a password is required then use &#x60;shared_link&#x3D;[link]&amp;shared_link_password&#x3D;[password]&#x60;.  This header can be used on the file or folder shared, as well as on any files or folders nested within the item.
         * @param {string} [version] The file version to download
         * @param {string} [accessToken] An optional access token that can be used to pre-authenticate this request, which means that a download link can be shared with a browser or a third party service without them needing to know how to handle the authentication. When using this parameter, please make sure that the access token is sufficiently scoped down to only allow read access to that file and no other files or folders.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fileContentGet: async (fileId: string, range?: string, boxapi?: string, version?: string, accessToken?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fileId' is not null or undefined
            assertParamExists('fileContentGet', 'fileId', fileId)
            const localVarPath = `/files/{file_id}/content`
                .replace(`{${"file_id"}}`, encodeURIComponent(String(fileId !== undefined ? fileId : `-file_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2Security required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Security", [], configuration)
            if (version !== undefined) {
                localVarQueryParameter['version'] = version;
            }

            if (accessToken !== undefined) {
                localVarQueryParameter['access_token'] = accessToken;
            }

            if (range != null) {
                localVarHeaderParameter['range'] = String(range);
            }

            if (boxapi != null) {
                localVarHeaderParameter['boxapi'] = String(boxapi);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/files/{file_id}/content',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DownloadsApi - functional programming interface
 * @export
 */
export const DownloadsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DownloadsApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns the contents of a file in binary format.
         * @summary Download file
         * @param {DownloadsApiFileContentGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fileContentGet(requestParameters: DownloadsApiFileContentGetRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Uint8Array | File | buffer.File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fileContentGet(requestParameters.fileId, requestParameters.range, requestParameters.boxapi, requestParameters.version, requestParameters.accessToken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DownloadsApi - factory interface
 * @export
 */
export const DownloadsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DownloadsApiFp(configuration)
    return {
        /**
         * Returns the contents of a file in binary format.
         * @summary Download file
         * @param {DownloadsApiFileContentGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fileContentGet(requestParameters: DownloadsApiFileContentGetRequest, options?: AxiosRequestConfig): AxiosPromise<Uint8Array | File | buffer.File> {
            return localVarFp.fileContentGet(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for fileContentGet operation in DownloadsApi.
 * @export
 * @interface DownloadsApiFileContentGetRequest
 */
export type DownloadsApiFileContentGetRequest = {
    
    /**
    * The unique identifier that represents a file.  The ID for any file can be determined by visiting a file in the web application and copying the ID from the URL. For example, for the URL `https://_*.app.box.com/files/123` the `file_id` is `123`.
    * @type {string}
    * @memberof DownloadsApiFileContentGet
    */
    readonly fileId: string
    
    /**
    * The byte range of the content to download.  The format `bytes={start_byte}-{end_byte}` can be used to specify what section of the file to download.
    * @type {string}
    * @memberof DownloadsApiFileContentGet
    */
    readonly range?: string
    
    /**
    * The URL, and optional password, for the shared link of this item.  This header can be used to access items that have not been explicitly shared with a user.  Use the format `shared_link=[link]` or if a password is required then use `shared_link=[link]&shared_link_password=[password]`.  This header can be used on the file or folder shared, as well as on any files or folders nested within the item.
    * @type {string}
    * @memberof DownloadsApiFileContentGet
    */
    readonly boxapi?: string
    
    /**
    * The file version to download
    * @type {string}
    * @memberof DownloadsApiFileContentGet
    */
    readonly version?: string
    
    /**
    * An optional access token that can be used to pre-authenticate this request, which means that a download link can be shared with a browser or a third party service without them needing to know how to handle the authentication. When using this parameter, please make sure that the access token is sufficiently scoped down to only allow read access to that file and no other files or folders.
    * @type {string}
    * @memberof DownloadsApiFileContentGet
    */
    readonly accessToken?: string
    
}

/**
 * DownloadsApiGenerated - object-oriented interface
 * @export
 * @class DownloadsApiGenerated
 * @extends {BaseAPI}
 */
export class DownloadsApiGenerated extends BaseAPI {
    /**
     * Returns the contents of a file in binary format.
     * @summary Download file
     * @param {DownloadsApiFileContentGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DownloadsApiGenerated
     */
    public fileContentGet(requestParameters: DownloadsApiFileContentGetRequest, options?: AxiosRequestConfig) {
        return DownloadsApiFp(this.configuration).fileContentGet(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
