/* tslint:disable */
/* eslint-disable */
/*
Box Platform API

[Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.

The version of the OpenAPI document: 2.0.0
Contact: devrel@box.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ClientError } from '../models';
// @ts-ignore
import { FileRequest } from '../models';
// @ts-ignore
import { FileRequestCopyRequest } from '../models';
// @ts-ignore
import { FileRequestCopyRequestAllOfFolder } from '../models';
// @ts-ignore
import { FileRequestUpdateRequest } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * FileRequestsApi - axios parameter creator
 * @export
 */
export const FileRequestsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Copies an existing file request that is already present on one folder, and applies it to another folder.
         * @summary Copy file request
         * @param {string} fileRequestId The unique identifier that represent a file request.  The ID for any file request can be determined by visiting a file request builder in the web application and copying the ID from the URL. For example, for the URL &#x60;https://_*.app.box.com/filerequest/123&#x60; the &#x60;file_request_id&#x60; is &#x60;123&#x60;.
         * @param {FileRequestCopyRequest} [fileRequestCopyRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        copyRequestToFolder: async (fileRequestId: string, fileRequestCopyRequest?: FileRequestCopyRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fileRequestId' is not null or undefined
            assertParamExists('copyRequestToFolder', 'fileRequestId', fileRequestId)
            const localVarPath = `/file_requests/{file_request_id}/copy`
                .replace(`{${"file_request_id"}}`, encodeURIComponent(String(fileRequestId !== undefined ? fileRequestId : `-file_request_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2Security required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Security", [], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: fileRequestCopyRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/file_requests/{file_request_id}/copy',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(fileRequestCopyRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a file request permanently.
         * @summary Delete file request
         * @param {string} fileRequestId The unique identifier that represent a file request.  The ID for any file request can be determined by visiting a file request builder in the web application and copying the ID from the URL. For example, for the URL &#x60;https://_*.app.box.com/filerequest/123&#x60; the &#x60;file_request_id&#x60; is &#x60;123&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePermanently: async (fileRequestId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fileRequestId' is not null or undefined
            assertParamExists('deletePermanently', 'fileRequestId', fileRequestId)
            const localVarPath = `/file_requests/{file_request_id}`
                .replace(`{${"file_request_id"}}`, encodeURIComponent(String(fileRequestId !== undefined ? fileRequestId : `-file_request_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2Security required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Security", [], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/file_requests/{file_request_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the information about a file request.
         * @summary Get file request
         * @param {string} fileRequestId The unique identifier that represent a file request.  The ID for any file request can be determined by visiting a file request builder in the web application and copying the ID from the URL. For example, for the URL &#x60;https://_*.app.box.com/filerequest/123&#x60; the &#x60;file_request_id&#x60; is &#x60;123&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInformation: async (fileRequestId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fileRequestId' is not null or undefined
            assertParamExists('getInformation', 'fileRequestId', fileRequestId)
            const localVarPath = `/file_requests/{file_request_id}`
                .replace(`{${"file_request_id"}}`, encodeURIComponent(String(fileRequestId !== undefined ? fileRequestId : `-file_request_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2Security required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Security", [], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/file_requests/{file_request_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates a file request. This can be used to activate or deactivate a file request.
         * @summary Update file request
         * @param {string} fileRequestId The unique identifier that represent a file request.  The ID for any file request can be determined by visiting a file request builder in the web application and copying the ID from the URL. For example, for the URL &#x60;https://_*.app.box.com/filerequest/123&#x60; the &#x60;file_request_id&#x60; is &#x60;123&#x60;.
         * @param {string} [ifMatch] Ensures this item hasn\&#39;t recently changed before making changes.  Pass in the item\&#39;s last observed &#x60;etag&#x60; value into this header and the endpoint will fail with a &#x60;412 Precondition Failed&#x60; if it has changed since.
         * @param {FileRequestUpdateRequest} [fileRequestUpdateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRequest: async (fileRequestId: string, ifMatch?: string, fileRequestUpdateRequest?: FileRequestUpdateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fileRequestId' is not null or undefined
            assertParamExists('updateRequest', 'fileRequestId', fileRequestId)
            const localVarPath = `/file_requests/{file_request_id}`
                .replace(`{${"file_request_id"}}`, encodeURIComponent(String(fileRequestId !== undefined ? fileRequestId : `-file_request_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2Security required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Security", [], configuration)
            if (ifMatch != null) {
                localVarHeaderParameter['if-match'] = String(ifMatch);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: fileRequestUpdateRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/file_requests/{file_request_id}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(fileRequestUpdateRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FileRequestsApi - functional programming interface
 * @export
 */
export const FileRequestsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FileRequestsApiAxiosParamCreator(configuration)
    return {
        /**
         * Copies an existing file request that is already present on one folder, and applies it to another folder.
         * @summary Copy file request
         * @param {FileRequestsApiCopyRequestToFolderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async copyRequestToFolder(requestParameters: FileRequestsApiCopyRequestToFolderRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FileRequest>> {
            const fileRequestCopyRequest: FileRequestCopyRequest = {
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.copyRequestToFolder(requestParameters.fileRequestId, fileRequestCopyRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Deletes a file request permanently.
         * @summary Delete file request
         * @param {FileRequestsApiDeletePermanentlyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePermanently(requestParameters: FileRequestsApiDeletePermanentlyRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePermanently(requestParameters.fileRequestId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves the information about a file request.
         * @summary Get file request
         * @param {FileRequestsApiGetInformationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInformation(requestParameters: FileRequestsApiGetInformationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FileRequest>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getInformation(requestParameters.fileRequestId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates a file request. This can be used to activate or deactivate a file request.
         * @summary Update file request
         * @param {FileRequestsApiUpdateRequestRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateRequest(requestParameters: FileRequestsApiUpdateRequestRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FileRequest>> {
            const fileRequestUpdateRequest: FileRequestUpdateRequest = {
                title: requestParameters.title,
                description: requestParameters.description,
                status: requestParameters.status,
                is_email_required: requestParameters.is_email_required,
                is_description_required: requestParameters.is_description_required,
                expires_at: requestParameters.expires_at
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateRequest(requestParameters.fileRequestId, requestParameters.ifMatch, fileRequestUpdateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * FileRequestsApi - factory interface
 * @export
 */
export const FileRequestsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FileRequestsApiFp(configuration)
    return {
        /**
         * Copies an existing file request that is already present on one folder, and applies it to another folder.
         * @summary Copy file request
         * @param {FileRequestsApiCopyRequestToFolderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        copyRequestToFolder(requestParameters: FileRequestsApiCopyRequestToFolderRequest, options?: AxiosRequestConfig): AxiosPromise<FileRequest> {
            return localVarFp.copyRequestToFolder(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes a file request permanently.
         * @summary Delete file request
         * @param {FileRequestsApiDeletePermanentlyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePermanently(requestParameters: FileRequestsApiDeletePermanentlyRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deletePermanently(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the information about a file request.
         * @summary Get file request
         * @param {FileRequestsApiGetInformationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInformation(requestParameters: FileRequestsApiGetInformationRequest, options?: AxiosRequestConfig): AxiosPromise<FileRequest> {
            return localVarFp.getInformation(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates a file request. This can be used to activate or deactivate a file request.
         * @summary Update file request
         * @param {FileRequestsApiUpdateRequestRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRequest(requestParameters: FileRequestsApiUpdateRequestRequest, options?: AxiosRequestConfig): AxiosPromise<FileRequest> {
            return localVarFp.updateRequest(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for copyRequestToFolder operation in FileRequestsApi.
 * @export
 * @interface FileRequestsApiCopyRequestToFolderRequest
 */
export type FileRequestsApiCopyRequestToFolderRequest = {
    
    /**
    * The unique identifier that represent a file request.  The ID for any file request can be determined by visiting a file request builder in the web application and copying the ID from the URL. For example, for the URL `https://_*.app.box.com/filerequest/123` the `file_request_id` is `123`.
    * @type {string}
    * @memberof FileRequestsApiCopyRequestToFolder
    */
    readonly fileRequestId: string
    
} & FileRequestCopyRequest

/**
 * Request parameters for deletePermanently operation in FileRequestsApi.
 * @export
 * @interface FileRequestsApiDeletePermanentlyRequest
 */
export type FileRequestsApiDeletePermanentlyRequest = {
    
    /**
    * The unique identifier that represent a file request.  The ID for any file request can be determined by visiting a file request builder in the web application and copying the ID from the URL. For example, for the URL `https://_*.app.box.com/filerequest/123` the `file_request_id` is `123`.
    * @type {string}
    * @memberof FileRequestsApiDeletePermanently
    */
    readonly fileRequestId: string
    
}

/**
 * Request parameters for getInformation operation in FileRequestsApi.
 * @export
 * @interface FileRequestsApiGetInformationRequest
 */
export type FileRequestsApiGetInformationRequest = {
    
    /**
    * The unique identifier that represent a file request.  The ID for any file request can be determined by visiting a file request builder in the web application and copying the ID from the URL. For example, for the URL `https://_*.app.box.com/filerequest/123` the `file_request_id` is `123`.
    * @type {string}
    * @memberof FileRequestsApiGetInformation
    */
    readonly fileRequestId: string
    
}

/**
 * Request parameters for updateRequest operation in FileRequestsApi.
 * @export
 * @interface FileRequestsApiUpdateRequestRequest
 */
export type FileRequestsApiUpdateRequestRequest = {
    
    /**
    * The unique identifier that represent a file request.  The ID for any file request can be determined by visiting a file request builder in the web application and copying the ID from the URL. For example, for the URL `https://_*.app.box.com/filerequest/123` the `file_request_id` is `123`.
    * @type {string}
    * @memberof FileRequestsApiUpdateRequest
    */
    readonly fileRequestId: string
    
    /**
    * Ensures this item hasn\'t recently changed before making changes.  Pass in the item\'s last observed `etag` value into this header and the endpoint will fail with a `412 Precondition Failed` if it has changed since.
    * @type {string}
    * @memberof FileRequestsApiUpdateRequest
    */
    readonly ifMatch?: string
    
} & FileRequestUpdateRequest

/**
 * FileRequestsApiGenerated - object-oriented interface
 * @export
 * @class FileRequestsApiGenerated
 * @extends {BaseAPI}
 */
export class FileRequestsApiGenerated extends BaseAPI {
    /**
     * Copies an existing file request that is already present on one folder, and applies it to another folder.
     * @summary Copy file request
     * @param {FileRequestsApiCopyRequestToFolderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileRequestsApiGenerated
     */
    public copyRequestToFolder(requestParameters: FileRequestsApiCopyRequestToFolderRequest, options?: AxiosRequestConfig) {
        return FileRequestsApiFp(this.configuration).copyRequestToFolder(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes a file request permanently.
     * @summary Delete file request
     * @param {FileRequestsApiDeletePermanentlyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileRequestsApiGenerated
     */
    public deletePermanently(requestParameters: FileRequestsApiDeletePermanentlyRequest, options?: AxiosRequestConfig) {
        return FileRequestsApiFp(this.configuration).deletePermanently(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves the information about a file request.
     * @summary Get file request
     * @param {FileRequestsApiGetInformationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileRequestsApiGenerated
     */
    public getInformation(requestParameters: FileRequestsApiGetInformationRequest, options?: AxiosRequestConfig) {
        return FileRequestsApiFp(this.configuration).getInformation(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates a file request. This can be used to activate or deactivate a file request.
     * @summary Update file request
     * @param {FileRequestsApiUpdateRequestRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileRequestsApiGenerated
     */
    public updateRequest(requestParameters: FileRequestsApiUpdateRequestRequest, options?: AxiosRequestConfig) {
        return FileRequestsApiFp(this.configuration).updateRequest(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
