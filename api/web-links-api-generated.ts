/* tslint:disable */
/* eslint-disable */
/*
Box Platform API

[Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.

The version of the OpenAPI document: 2.0.0
Contact: devrel@box.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ClientError } from '../models';
// @ts-ignore
import { WebLink } from '../models';
// @ts-ignore
import { WebLinksCreateObjectRequest } from '../models';
// @ts-ignore
import { WebLinksCreateObjectRequestParent } from '../models';
// @ts-ignore
import { WebLinksUpdateObjectRequest } from '../models';
// @ts-ignore
import { WebLinksUpdateObjectRequestParent } from '../models';
// @ts-ignore
import { WebLinksUpdateObjectRequestSharedLink } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * WebLinksApi - axios parameter creator
 * @export
 */
export const WebLinksApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a web link object within a folder.
         * @summary Create web link
         * @param {WebLinksCreateObjectRequest} [webLinksCreateObjectRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createObject: async (webLinksCreateObjectRequest?: WebLinksCreateObjectRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/web_links`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2Security required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Security", [], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: webLinksCreateObjectRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/web_links',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(webLinksCreateObjectRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve information about a web link.
         * @summary Get web link
         * @param {string} webLinkId The ID of the web link.
         * @param {string} [boxapi] The URL, and optional password, for the shared link of this item.  This header can be used to access items that have not been explicitly shared with a user.  Use the format &#x60;shared_link&#x3D;[link]&#x60; or if a password is required then use &#x60;shared_link&#x3D;[link]&amp;shared_link_password&#x3D;[password]&#x60;.  This header can be used on the file or folder shared, as well as on any files or folders nested within the item.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInformation: async (webLinkId: string, boxapi?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'webLinkId' is not null or undefined
            assertParamExists('getInformation', 'webLinkId', webLinkId)
            const localVarPath = `/web_links/{web_link_id}`
                .replace(`{${"web_link_id"}}`, encodeURIComponent(String(webLinkId !== undefined ? webLinkId : `-web_link_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2Security required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Security", [], configuration)
            if (boxapi != null) {
                localVarHeaderParameter['boxapi'] = String(boxapi);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/web_links/{web_link_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a web link.
         * @summary Remove web link
         * @param {string} webLinkId The ID of the web link.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeLink: async (webLinkId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'webLinkId' is not null or undefined
            assertParamExists('removeLink', 'webLinkId', webLinkId)
            const localVarPath = `/web_links/{web_link_id}`
                .replace(`{${"web_link_id"}}`, encodeURIComponent(String(webLinkId !== undefined ? webLinkId : `-web_link_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2Security required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Security", [], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/web_links/{web_link_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates a web link object.
         * @summary Update web link
         * @param {string} webLinkId The ID of the web link.
         * @param {WebLinksUpdateObjectRequest} [webLinksUpdateObjectRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateObject: async (webLinkId: string, webLinksUpdateObjectRequest?: WebLinksUpdateObjectRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'webLinkId' is not null or undefined
            assertParamExists('updateObject', 'webLinkId', webLinkId)
            const localVarPath = `/web_links/{web_link_id}`
                .replace(`{${"web_link_id"}}`, encodeURIComponent(String(webLinkId !== undefined ? webLinkId : `-web_link_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2Security required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Security", [], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: webLinksUpdateObjectRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/web_links/{web_link_id}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(webLinksUpdateObjectRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WebLinksApi - functional programming interface
 * @export
 */
export const WebLinksApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WebLinksApiAxiosParamCreator(configuration)
    return {
        /**
         * Creates a web link object within a folder.
         * @summary Create web link
         * @param {WebLinksApiCreateObjectRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createObject(requestParameters: WebLinksApiCreateObjectRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WebLink>> {
            const webLinksCreateObjectRequest: WebLinksCreateObjectRequest = {
                description: requestParameters.description,
                url: requestParameters.url,
                parent: requestParameters.parent,
                name: requestParameters.name
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createObject(webLinksCreateObjectRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve information about a web link.
         * @summary Get web link
         * @param {WebLinksApiGetInformationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInformation(requestParameters: WebLinksApiGetInformationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WebLink>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getInformation(requestParameters.webLinkId, requestParameters.boxapi, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Deletes a web link.
         * @summary Remove web link
         * @param {WebLinksApiRemoveLinkRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeLink(requestParameters: WebLinksApiRemoveLinkRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeLink(requestParameters.webLinkId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates a web link object.
         * @summary Update web link
         * @param {WebLinksApiUpdateObjectRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateObject(requestParameters: WebLinksApiUpdateObjectRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WebLink>> {
            const webLinksUpdateObjectRequest: WebLinksUpdateObjectRequest = {
                description: requestParameters.description,
                url: requestParameters.url,
                parent: requestParameters.parent,
                name: requestParameters.name,
                shared_link: requestParameters.shared_link
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateObject(requestParameters.webLinkId, webLinksUpdateObjectRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * WebLinksApi - factory interface
 * @export
 */
export const WebLinksApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WebLinksApiFp(configuration)
    return {
        /**
         * Creates a web link object within a folder.
         * @summary Create web link
         * @param {WebLinksApiCreateObjectRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createObject(requestParameters: WebLinksApiCreateObjectRequest, options?: AxiosRequestConfig): AxiosPromise<WebLink> {
            return localVarFp.createObject(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve information about a web link.
         * @summary Get web link
         * @param {WebLinksApiGetInformationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInformation(requestParameters: WebLinksApiGetInformationRequest, options?: AxiosRequestConfig): AxiosPromise<WebLink> {
            return localVarFp.getInformation(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes a web link.
         * @summary Remove web link
         * @param {WebLinksApiRemoveLinkRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeLink(requestParameters: WebLinksApiRemoveLinkRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.removeLink(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates a web link object.
         * @summary Update web link
         * @param {WebLinksApiUpdateObjectRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateObject(requestParameters: WebLinksApiUpdateObjectRequest, options?: AxiosRequestConfig): AxiosPromise<WebLink> {
            return localVarFp.updateObject(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createObject operation in WebLinksApi.
 * @export
 * @interface WebLinksApiCreateObjectRequest
 */
export type WebLinksApiCreateObjectRequest = {
    
} & WebLinksCreateObjectRequest

/**
 * Request parameters for getInformation operation in WebLinksApi.
 * @export
 * @interface WebLinksApiGetInformationRequest
 */
export type WebLinksApiGetInformationRequest = {
    
    /**
    * The ID of the web link.
    * @type {string}
    * @memberof WebLinksApiGetInformation
    */
    readonly webLinkId: string
    
    /**
    * The URL, and optional password, for the shared link of this item.  This header can be used to access items that have not been explicitly shared with a user.  Use the format `shared_link=[link]` or if a password is required then use `shared_link=[link]&shared_link_password=[password]`.  This header can be used on the file or folder shared, as well as on any files or folders nested within the item.
    * @type {string}
    * @memberof WebLinksApiGetInformation
    */
    readonly boxapi?: string
    
}

/**
 * Request parameters for removeLink operation in WebLinksApi.
 * @export
 * @interface WebLinksApiRemoveLinkRequest
 */
export type WebLinksApiRemoveLinkRequest = {
    
    /**
    * The ID of the web link.
    * @type {string}
    * @memberof WebLinksApiRemoveLink
    */
    readonly webLinkId: string
    
}

/**
 * Request parameters for updateObject operation in WebLinksApi.
 * @export
 * @interface WebLinksApiUpdateObjectRequest
 */
export type WebLinksApiUpdateObjectRequest = {
    
    /**
    * The ID of the web link.
    * @type {string}
    * @memberof WebLinksApiUpdateObject
    */
    readonly webLinkId: string
    
} & WebLinksUpdateObjectRequest

/**
 * WebLinksApiGenerated - object-oriented interface
 * @export
 * @class WebLinksApiGenerated
 * @extends {BaseAPI}
 */
export class WebLinksApiGenerated extends BaseAPI {
    /**
     * Creates a web link object within a folder.
     * @summary Create web link
     * @param {WebLinksApiCreateObjectRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebLinksApiGenerated
     */
    public createObject(requestParameters: WebLinksApiCreateObjectRequest, options?: AxiosRequestConfig) {
        return WebLinksApiFp(this.configuration).createObject(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve information about a web link.
     * @summary Get web link
     * @param {WebLinksApiGetInformationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebLinksApiGenerated
     */
    public getInformation(requestParameters: WebLinksApiGetInformationRequest, options?: AxiosRequestConfig) {
        return WebLinksApiFp(this.configuration).getInformation(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes a web link.
     * @summary Remove web link
     * @param {WebLinksApiRemoveLinkRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebLinksApiGenerated
     */
    public removeLink(requestParameters: WebLinksApiRemoveLinkRequest, options?: AxiosRequestConfig) {
        return WebLinksApiFp(this.configuration).removeLink(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates a web link object.
     * @summary Update web link
     * @param {WebLinksApiUpdateObjectRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebLinksApiGenerated
     */
    public updateObject(requestParameters: WebLinksApiUpdateObjectRequest, options?: AxiosRequestConfig) {
        return WebLinksApiFp(this.configuration).updateObject(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
