/* tslint:disable */
/* eslint-disable */
/*
Box Platform API

[Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.

The version of the OpenAPI document: 2.0.0
Contact: devrel@box.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ClientError } from '../models';
// @ts-ignore
import { FolderFull } from '../models';
// @ts-ignore
import { TransferFoldersToDestinationRequest } from '../models';
// @ts-ignore
import { TransferFoldersToDestinationRequestOwnedBy } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * TransferFoldersApi - axios parameter creator
 * @export
 */
export const TransferFoldersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Move all of the items (files, folders and workflows) owned by a user into another user\'s account  Only the root folder (`0`) can be transferred.  Folders can only be moved across users by users with administrative permissions.  All existing shared links and folder-level collaborations are transferred during the operation. Please note that while collaborations at the individual file-level are transferred during the operation, the collaborations are deleted when the original user is deleted.  This call will be performed synchronously which might lead to a slow response when the source user has a large number of items in all of its folders.  If the destination path has a metadata cascade policy attached to any of the parent folders, a metadata cascade operation will be kicked off asynchronously.  There is currently no way to check for when this operation is finished.  The destination folder\'s name will be in the format `{User}\'s Files and Folders`, where `{User}` is the display name of the user.  To make this API call your application will need to have the \"Read and write all files and folders stored in Box\" scope enabled.  Please make sure the destination user has access to `Relay` or `Relay Lite`, and has access to the files and folders involved in the workflows being transferred.  Admins will receive an email when the operation is completed.
         * @summary Transfer owned folders
         * @param {string} userId The ID of the user.
         * @param {Array<string>} [fields] A comma-separated list of attributes to include in the response. This can be used to request fields that are not normally returned in a standard response.  Be aware that specifying this parameter will have the effect that none of the standard fields are returned in the response unless explicitly specified, instead only fields for the mini representation are returned, additional to the fields requested.
         * @param {boolean} [notify] Determines if users should receive email notification for the action performed.
         * @param {TransferFoldersToDestinationRequest} [transferFoldersToDestinationRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        toDestination: async (userId: string, fields?: Array<string>, notify?: boolean, transferFoldersToDestinationRequest?: TransferFoldersToDestinationRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('toDestination', 'userId', userId)
            const localVarPath = `/users/{user_id}/folders/0`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-user_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2Security required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Security", [], configuration)
            if (fields) {
                localVarQueryParameter['fields'] = fields.join(COLLECTION_FORMATS.csv);
            }

            if (notify !== undefined) {
                localVarQueryParameter['notify'] = notify;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: transferFoldersToDestinationRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/users/{user_id}/folders/0',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(transferFoldersToDestinationRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TransferFoldersApi - functional programming interface
 * @export
 */
export const TransferFoldersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TransferFoldersApiAxiosParamCreator(configuration)
    return {
        /**
         * Move all of the items (files, folders and workflows) owned by a user into another user\'s account  Only the root folder (`0`) can be transferred.  Folders can only be moved across users by users with administrative permissions.  All existing shared links and folder-level collaborations are transferred during the operation. Please note that while collaborations at the individual file-level are transferred during the operation, the collaborations are deleted when the original user is deleted.  This call will be performed synchronously which might lead to a slow response when the source user has a large number of items in all of its folders.  If the destination path has a metadata cascade policy attached to any of the parent folders, a metadata cascade operation will be kicked off asynchronously.  There is currently no way to check for when this operation is finished.  The destination folder\'s name will be in the format `{User}\'s Files and Folders`, where `{User}` is the display name of the user.  To make this API call your application will need to have the \"Read and write all files and folders stored in Box\" scope enabled.  Please make sure the destination user has access to `Relay` or `Relay Lite`, and has access to the files and folders involved in the workflows being transferred.  Admins will receive an email when the operation is completed.
         * @summary Transfer owned folders
         * @param {TransferFoldersApiToDestinationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async toDestination(requestParameters: TransferFoldersApiToDestinationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FolderFull>> {
            const transferFoldersToDestinationRequest: TransferFoldersToDestinationRequest = {
                owned_by: requestParameters.owned_by
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.toDestination(requestParameters.userId, requestParameters.fields, requestParameters.notify, transferFoldersToDestinationRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TransferFoldersApi - factory interface
 * @export
 */
export const TransferFoldersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TransferFoldersApiFp(configuration)
    return {
        /**
         * Move all of the items (files, folders and workflows) owned by a user into another user\'s account  Only the root folder (`0`) can be transferred.  Folders can only be moved across users by users with administrative permissions.  All existing shared links and folder-level collaborations are transferred during the operation. Please note that while collaborations at the individual file-level are transferred during the operation, the collaborations are deleted when the original user is deleted.  This call will be performed synchronously which might lead to a slow response when the source user has a large number of items in all of its folders.  If the destination path has a metadata cascade policy attached to any of the parent folders, a metadata cascade operation will be kicked off asynchronously.  There is currently no way to check for when this operation is finished.  The destination folder\'s name will be in the format `{User}\'s Files and Folders`, where `{User}` is the display name of the user.  To make this API call your application will need to have the \"Read and write all files and folders stored in Box\" scope enabled.  Please make sure the destination user has access to `Relay` or `Relay Lite`, and has access to the files and folders involved in the workflows being transferred.  Admins will receive an email when the operation is completed.
         * @summary Transfer owned folders
         * @param {TransferFoldersApiToDestinationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        toDestination(requestParameters: TransferFoldersApiToDestinationRequest, options?: AxiosRequestConfig): AxiosPromise<FolderFull> {
            return localVarFp.toDestination(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for toDestination operation in TransferFoldersApi.
 * @export
 * @interface TransferFoldersApiToDestinationRequest
 */
export type TransferFoldersApiToDestinationRequest = {
    
    /**
    * The ID of the user.
    * @type {string}
    * @memberof TransferFoldersApiToDestination
    */
    readonly userId: string
    
    /**
    * A comma-separated list of attributes to include in the response. This can be used to request fields that are not normally returned in a standard response.  Be aware that specifying this parameter will have the effect that none of the standard fields are returned in the response unless explicitly specified, instead only fields for the mini representation are returned, additional to the fields requested.
    * @type {Array<string>}
    * @memberof TransferFoldersApiToDestination
    */
    readonly fields?: Array<string>
    
    /**
    * Determines if users should receive email notification for the action performed.
    * @type {boolean}
    * @memberof TransferFoldersApiToDestination
    */
    readonly notify?: boolean
    
} & TransferFoldersToDestinationRequest

/**
 * TransferFoldersApiGenerated - object-oriented interface
 * @export
 * @class TransferFoldersApiGenerated
 * @extends {BaseAPI}
 */
export class TransferFoldersApiGenerated extends BaseAPI {
    /**
     * Move all of the items (files, folders and workflows) owned by a user into another user\'s account  Only the root folder (`0`) can be transferred.  Folders can only be moved across users by users with administrative permissions.  All existing shared links and folder-level collaborations are transferred during the operation. Please note that while collaborations at the individual file-level are transferred during the operation, the collaborations are deleted when the original user is deleted.  This call will be performed synchronously which might lead to a slow response when the source user has a large number of items in all of its folders.  If the destination path has a metadata cascade policy attached to any of the parent folders, a metadata cascade operation will be kicked off asynchronously.  There is currently no way to check for when this operation is finished.  The destination folder\'s name will be in the format `{User}\'s Files and Folders`, where `{User}` is the display name of the user.  To make this API call your application will need to have the \"Read and write all files and folders stored in Box\" scope enabled.  Please make sure the destination user has access to `Relay` or `Relay Lite`, and has access to the files and folders involved in the workflows being transferred.  Admins will receive an email when the operation is completed.
     * @summary Transfer owned folders
     * @param {TransferFoldersApiToDestinationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransferFoldersApiGenerated
     */
    public toDestination(requestParameters: TransferFoldersApiToDestinationRequest, options?: AxiosRequestConfig) {
        return TransferFoldersApiFp(this.configuration).toDestination(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
