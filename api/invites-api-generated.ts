/* tslint:disable */
/* eslint-disable */
/*
Box Platform API

[Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.

The version of the OpenAPI document: 2.0.0
Contact: devrel@box.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ClientError } from '../models';
// @ts-ignore
import { Invite } from '../models';
// @ts-ignore
import { PostInvitesRequest } from '../models';
// @ts-ignore
import { PostInvitesRequestActionableBy } from '../models';
// @ts-ignore
import { PostInvitesRequestEnterprise } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * InvitesApi - axios parameter creator
 * @export
 */
export const InvitesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns the status of a user invite.
         * @summary Get user invite status
         * @param {string} inviteId The ID of an invite.
         * @param {Array<string>} [fields] A comma-separated list of attributes to include in the response. This can be used to request fields that are not normally returned in a standard response.  Be aware that specifying this parameter will have the effect that none of the standard fields are returned in the response unless explicitly specified, instead only fields for the mini representation are returned, additional to the fields requested.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserInviteStatus: async (inviteId: string, fields?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'inviteId' is not null or undefined
            assertParamExists('getUserInviteStatus', 'inviteId', inviteId)
            const localVarPath = `/invites/{invite_id}`
                .replace(`{${"invite_id"}}`, encodeURIComponent(String(inviteId !== undefined ? inviteId : `-invite_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2Security required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Security", [], configuration)
            if (fields) {
                localVarQueryParameter['fields'] = fields.join(COLLECTION_FORMATS.csv);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/invites/{invite_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Invites an existing external user to join an enterprise.  The existing user can not be part of another enterprise and must already have a Box account. Once invited, the user will receive an email and are prompted to accept the invitation within the Box web application.  This method requires the \"Manage An Enterprise\" scope enabled for the application, which can be enabled within the developer console.
         * @summary Create user invite
         * @param {Array<string>} [fields] A comma-separated list of attributes to include in the response. This can be used to request fields that are not normally returned in a standard response.  Be aware that specifying this parameter will have the effect that none of the standard fields are returned in the response unless explicitly specified, instead only fields for the mini representation are returned, additional to the fields requested.
         * @param {PostInvitesRequest} [postInvitesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invites: async (fields?: Array<string>, postInvitesRequest?: PostInvitesRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/invites`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2Security required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Security", [], configuration)
            if (fields) {
                localVarQueryParameter['fields'] = fields.join(COLLECTION_FORMATS.csv);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: postInvitesRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/invites',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(postInvitesRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * InvitesApi - functional programming interface
 * @export
 */
export const InvitesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = InvitesApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns the status of a user invite.
         * @summary Get user invite status
         * @param {InvitesApiGetUserInviteStatusRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserInviteStatus(requestParameters: InvitesApiGetUserInviteStatusRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Invite>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserInviteStatus(requestParameters.inviteId, requestParameters.fields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Invites an existing external user to join an enterprise.  The existing user can not be part of another enterprise and must already have a Box account. Once invited, the user will receive an email and are prompted to accept the invitation within the Box web application.  This method requires the \"Manage An Enterprise\" scope enabled for the application, which can be enabled within the developer console.
         * @summary Create user invite
         * @param {InvitesApiInvitesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async invites(requestParameters: InvitesApiInvitesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Invite>> {
            const postInvitesRequest: PostInvitesRequest = {
                enterprise: requestParameters.enterprise,
                actionable_by: requestParameters.actionable_by
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.invites(requestParameters.fields, postInvitesRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * InvitesApi - factory interface
 * @export
 */
export const InvitesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = InvitesApiFp(configuration)
    return {
        /**
         * Returns the status of a user invite.
         * @summary Get user invite status
         * @param {InvitesApiGetUserInviteStatusRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserInviteStatus(requestParameters: InvitesApiGetUserInviteStatusRequest, options?: AxiosRequestConfig): AxiosPromise<Invite> {
            return localVarFp.getUserInviteStatus(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Invites an existing external user to join an enterprise.  The existing user can not be part of another enterprise and must already have a Box account. Once invited, the user will receive an email and are prompted to accept the invitation within the Box web application.  This method requires the \"Manage An Enterprise\" scope enabled for the application, which can be enabled within the developer console.
         * @summary Create user invite
         * @param {InvitesApiInvitesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invites(requestParameters: InvitesApiInvitesRequest, options?: AxiosRequestConfig): AxiosPromise<Invite> {
            return localVarFp.invites(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getUserInviteStatus operation in InvitesApi.
 * @export
 * @interface InvitesApiGetUserInviteStatusRequest
 */
export type InvitesApiGetUserInviteStatusRequest = {
    
    /**
    * The ID of an invite.
    * @type {string}
    * @memberof InvitesApiGetUserInviteStatus
    */
    readonly inviteId: string
    
    /**
    * A comma-separated list of attributes to include in the response. This can be used to request fields that are not normally returned in a standard response.  Be aware that specifying this parameter will have the effect that none of the standard fields are returned in the response unless explicitly specified, instead only fields for the mini representation are returned, additional to the fields requested.
    * @type {Array<string>}
    * @memberof InvitesApiGetUserInviteStatus
    */
    readonly fields?: Array<string>
    
}

/**
 * Request parameters for invites operation in InvitesApi.
 * @export
 * @interface InvitesApiInvitesRequest
 */
export type InvitesApiInvitesRequest = {
    
    /**
    * A comma-separated list of attributes to include in the response. This can be used to request fields that are not normally returned in a standard response.  Be aware that specifying this parameter will have the effect that none of the standard fields are returned in the response unless explicitly specified, instead only fields for the mini representation are returned, additional to the fields requested.
    * @type {Array<string>}
    * @memberof InvitesApiInvites
    */
    readonly fields?: Array<string>
    
} & PostInvitesRequest

/**
 * InvitesApiGenerated - object-oriented interface
 * @export
 * @class InvitesApiGenerated
 * @extends {BaseAPI}
 */
export class InvitesApiGenerated extends BaseAPI {
    /**
     * Returns the status of a user invite.
     * @summary Get user invite status
     * @param {InvitesApiGetUserInviteStatusRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvitesApiGenerated
     */
    public getUserInviteStatus(requestParameters: InvitesApiGetUserInviteStatusRequest, options?: AxiosRequestConfig) {
        return InvitesApiFp(this.configuration).getUserInviteStatus(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Invites an existing external user to join an enterprise.  The existing user can not be part of another enterprise and must already have a Box account. Once invited, the user will receive an email and are prompted to accept the invitation within the Box web application.  This method requires the \"Manage An Enterprise\" scope enabled for the application, which can be enabled within the developer console.
     * @summary Create user invite
     * @param {InvitesApiInvitesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvitesApiGenerated
     */
    public invites(requestParameters: InvitesApiInvitesRequest, options?: AxiosRequestConfig) {
        return InvitesApiFp(this.configuration).invites(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
