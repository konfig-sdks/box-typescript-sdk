/* tslint:disable */
/* eslint-disable */
/*
Box Platform API

[Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.

The version of the OpenAPI document: 2.0.0
Contact: devrel@box.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ClientError } from '../models';
// @ts-ignore
import { PostTasksRequest } from '../models';
// @ts-ignore
import { PostTasksRequestItem } from '../models';
// @ts-ignore
import { Task } from '../models';
// @ts-ignore
import { Tasks } from '../models';
// @ts-ignore
import { TasksUpdateTaskConfigurationRequest } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * TasksApi - axios parameter creator
 * @export
 */
export const TasksApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieves information about a specific task.
         * @summary Get task
         * @param {string} taskId The ID of the task.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInfo: async (taskId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'taskId' is not null or undefined
            assertParamExists('getInfo', 'taskId', taskId)
            const localVarPath = `/tasks/{task_id}`
                .replace(`{${"task_id"}}`, encodeURIComponent(String(taskId !== undefined ? taskId : `-task_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2Security required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Security", [], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/tasks/{task_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a list of all the tasks for a file. This endpoint does not support pagination.
         * @summary List tasks on file
         * @param {string} fileId The unique identifier that represents a file.  The ID for any file can be determined by visiting a file in the web application and copying the ID from the URL. For example, for the URL &#x60;https://_*.app.box.com/files/123&#x60; the &#x60;file_id&#x60; is &#x60;123&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOnFile: async (fileId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fileId' is not null or undefined
            assertParamExists('listOnFile', 'fileId', fileId)
            const localVarPath = `/files/{file_id}/tasks`
                .replace(`{${"file_id"}}`, encodeURIComponent(String(fileId !== undefined ? fileId : `-file_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2Security required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Security", [], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/files/{file_id}/tasks',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Removes a task from a file.
         * @summary Remove task
         * @param {string} taskId The ID of the task.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeFile: async (taskId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'taskId' is not null or undefined
            assertParamExists('removeFile', 'taskId', taskId)
            const localVarPath = `/tasks/{task_id}`
                .replace(`{${"task_id"}}`, encodeURIComponent(String(taskId !== undefined ? taskId : `-task_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2Security required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Security", [], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/tasks/{task_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a single task on a file. This task is not assigned to any user and will need to be assigned separately.
         * @summary Create task
         * @param {PostTasksRequest} [postTasksRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tasks: async (postTasksRequest?: PostTasksRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/tasks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2Security required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Security", [], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: postTasksRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/tasks',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(postTasksRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates a task. This can be used to update a task\'s configuration, or to update its completion state.
         * @summary Update task
         * @param {string} taskId The ID of the task.
         * @param {TasksUpdateTaskConfigurationRequest} [tasksUpdateTaskConfigurationRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTaskConfiguration: async (taskId: string, tasksUpdateTaskConfigurationRequest?: TasksUpdateTaskConfigurationRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'taskId' is not null or undefined
            assertParamExists('updateTaskConfiguration', 'taskId', taskId)
            const localVarPath = `/tasks/{task_id}`
                .replace(`{${"task_id"}}`, encodeURIComponent(String(taskId !== undefined ? taskId : `-task_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2Security required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Security", [], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: tasksUpdateTaskConfigurationRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/tasks/{task_id}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(tasksUpdateTaskConfigurationRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TasksApi - functional programming interface
 * @export
 */
export const TasksApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TasksApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieves information about a specific task.
         * @summary Get task
         * @param {TasksApiGetInfoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInfo(requestParameters: TasksApiGetInfoRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Task>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getInfo(requestParameters.taskId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a list of all the tasks for a file. This endpoint does not support pagination.
         * @summary List tasks on file
         * @param {TasksApiListOnFileRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listOnFile(requestParameters: TasksApiListOnFileRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Tasks>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listOnFile(requestParameters.fileId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Removes a task from a file.
         * @summary Remove task
         * @param {TasksApiRemoveFileRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeFile(requestParameters: TasksApiRemoveFileRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeFile(requestParameters.taskId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates a single task on a file. This task is not assigned to any user and will need to be assigned separately.
         * @summary Create task
         * @param {TasksApiTasksRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tasks(requestParameters: TasksApiTasksRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Task>> {
            const postTasksRequest: PostTasksRequest = {
                item: requestParameters.item,
                action: requestParameters.action,
                message: requestParameters.message,
                due_at: requestParameters.due_at,
                completion_rule: requestParameters.completion_rule
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.tasks(postTasksRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates a task. This can be used to update a task\'s configuration, or to update its completion state.
         * @summary Update task
         * @param {TasksApiUpdateTaskConfigurationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateTaskConfiguration(requestParameters: TasksApiUpdateTaskConfigurationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Task>> {
            const tasksUpdateTaskConfigurationRequest: TasksUpdateTaskConfigurationRequest = {
                action: requestParameters.action,
                message: requestParameters.message,
                due_at: requestParameters.due_at,
                completion_rule: requestParameters.completion_rule
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateTaskConfiguration(requestParameters.taskId, tasksUpdateTaskConfigurationRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TasksApi - factory interface
 * @export
 */
export const TasksApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TasksApiFp(configuration)
    return {
        /**
         * Retrieves information about a specific task.
         * @summary Get task
         * @param {TasksApiGetInfoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInfo(requestParameters: TasksApiGetInfoRequest, options?: AxiosRequestConfig): AxiosPromise<Task> {
            return localVarFp.getInfo(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a list of all the tasks for a file. This endpoint does not support pagination.
         * @summary List tasks on file
         * @param {TasksApiListOnFileRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOnFile(requestParameters: TasksApiListOnFileRequest, options?: AxiosRequestConfig): AxiosPromise<Tasks> {
            return localVarFp.listOnFile(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Removes a task from a file.
         * @summary Remove task
         * @param {TasksApiRemoveFileRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeFile(requestParameters: TasksApiRemoveFileRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.removeFile(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a single task on a file. This task is not assigned to any user and will need to be assigned separately.
         * @summary Create task
         * @param {TasksApiTasksRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tasks(requestParameters: TasksApiTasksRequest, options?: AxiosRequestConfig): AxiosPromise<Task> {
            return localVarFp.tasks(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates a task. This can be used to update a task\'s configuration, or to update its completion state.
         * @summary Update task
         * @param {TasksApiUpdateTaskConfigurationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTaskConfiguration(requestParameters: TasksApiUpdateTaskConfigurationRequest, options?: AxiosRequestConfig): AxiosPromise<Task> {
            return localVarFp.updateTaskConfiguration(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getInfo operation in TasksApi.
 * @export
 * @interface TasksApiGetInfoRequest
 */
export type TasksApiGetInfoRequest = {
    
    /**
    * The ID of the task.
    * @type {string}
    * @memberof TasksApiGetInfo
    */
    readonly taskId: string
    
}

/**
 * Request parameters for listOnFile operation in TasksApi.
 * @export
 * @interface TasksApiListOnFileRequest
 */
export type TasksApiListOnFileRequest = {
    
    /**
    * The unique identifier that represents a file.  The ID for any file can be determined by visiting a file in the web application and copying the ID from the URL. For example, for the URL `https://_*.app.box.com/files/123` the `file_id` is `123`.
    * @type {string}
    * @memberof TasksApiListOnFile
    */
    readonly fileId: string
    
}

/**
 * Request parameters for removeFile operation in TasksApi.
 * @export
 * @interface TasksApiRemoveFileRequest
 */
export type TasksApiRemoveFileRequest = {
    
    /**
    * The ID of the task.
    * @type {string}
    * @memberof TasksApiRemoveFile
    */
    readonly taskId: string
    
}

/**
 * Request parameters for tasks operation in TasksApi.
 * @export
 * @interface TasksApiTasksRequest
 */
export type TasksApiTasksRequest = {
    
} & PostTasksRequest

/**
 * Request parameters for updateTaskConfiguration operation in TasksApi.
 * @export
 * @interface TasksApiUpdateTaskConfigurationRequest
 */
export type TasksApiUpdateTaskConfigurationRequest = {
    
    /**
    * The ID of the task.
    * @type {string}
    * @memberof TasksApiUpdateTaskConfiguration
    */
    readonly taskId: string
    
} & TasksUpdateTaskConfigurationRequest

/**
 * TasksApiGenerated - object-oriented interface
 * @export
 * @class TasksApiGenerated
 * @extends {BaseAPI}
 */
export class TasksApiGenerated extends BaseAPI {
    /**
     * Retrieves information about a specific task.
     * @summary Get task
     * @param {TasksApiGetInfoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TasksApiGenerated
     */
    public getInfo(requestParameters: TasksApiGetInfoRequest, options?: AxiosRequestConfig) {
        return TasksApiFp(this.configuration).getInfo(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a list of all the tasks for a file. This endpoint does not support pagination.
     * @summary List tasks on file
     * @param {TasksApiListOnFileRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TasksApiGenerated
     */
    public listOnFile(requestParameters: TasksApiListOnFileRequest, options?: AxiosRequestConfig) {
        return TasksApiFp(this.configuration).listOnFile(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Removes a task from a file.
     * @summary Remove task
     * @param {TasksApiRemoveFileRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TasksApiGenerated
     */
    public removeFile(requestParameters: TasksApiRemoveFileRequest, options?: AxiosRequestConfig) {
        return TasksApiFp(this.configuration).removeFile(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a single task on a file. This task is not assigned to any user and will need to be assigned separately.
     * @summary Create task
     * @param {TasksApiTasksRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TasksApiGenerated
     */
    public tasks(requestParameters: TasksApiTasksRequest, options?: AxiosRequestConfig) {
        return TasksApiFp(this.configuration).tasks(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates a task. This can be used to update a task\'s configuration, or to update its completion state.
     * @summary Update task
     * @param {TasksApiUpdateTaskConfigurationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TasksApiGenerated
     */
    public updateTaskConfiguration(requestParameters: TasksApiUpdateTaskConfigurationRequest, options?: AxiosRequestConfig) {
        return TasksApiFp(this.configuration).updateTaskConfiguration(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
