/* tslint:disable */
/* eslint-disable */
/*
Box Platform API

[Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.

The version of the OpenAPI document: 2.0.0
Contact: devrel@box.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ClientError } from '../models';
// @ts-ignore
import { TermsOfServiceUserStatus } from '../models';
// @ts-ignore
import { TermsOfServiceUserStatuses } from '../models';
// @ts-ignore
import { TermsOfServiceUserStatusesCreateUserStatusRequest } from '../models';
// @ts-ignore
import { TermsOfServiceUserStatusesCreateUserStatusRequestTos } from '../models';
// @ts-ignore
import { TermsOfServiceUserStatusesCreateUserStatusRequestUser } from '../models';
// @ts-ignore
import { TermsOfServiceUserStatusesUpdateUserStatusRequest } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * TermsOfServiceUserStatusesApi - axios parameter creator
 * @export
 */
export const TermsOfServiceUserStatusesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Sets the status for a terms of service for a user.
         * @summary Create terms of service status for new user
         * @param {TermsOfServiceUserStatusesCreateUserStatusRequest} [termsOfServiceUserStatusesCreateUserStatusRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUserStatus: async (termsOfServiceUserStatusesCreateUserStatusRequest?: TermsOfServiceUserStatusesCreateUserStatusRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/terms_of_service_user_statuses`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2Security required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Security", [], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: termsOfServiceUserStatusesCreateUserStatusRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/terms_of_service_user_statuses',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(termsOfServiceUserStatusesCreateUserStatusRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves an overview of users and their status for a terms of service, including Whether they have accepted the terms and when.
         * @summary List terms of service user statuses
         * @param {string} tosId The ID of the terms of service.
         * @param {string} [userId] Limits results to the given user ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserStatuses: async (tosId: string, userId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tosId' is not null or undefined
            assertParamExists('listUserStatuses', 'tosId', tosId)
            const localVarPath = `/terms_of_service_user_statuses`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2Security required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Security", [], configuration)
            if (tosId !== undefined) {
                localVarQueryParameter['tos_id'] = tosId;
            }

            if (userId !== undefined) {
                localVarQueryParameter['user_id'] = userId;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/terms_of_service_user_statuses',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates the status for a terms of service for a user.
         * @summary Update terms of service status for existing user
         * @param {string} termsOfServiceUserStatusId The ID of the terms of service status.
         * @param {TermsOfServiceUserStatusesUpdateUserStatusRequest} [termsOfServiceUserStatusesUpdateUserStatusRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserStatus: async (termsOfServiceUserStatusId: string, termsOfServiceUserStatusesUpdateUserStatusRequest?: TermsOfServiceUserStatusesUpdateUserStatusRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'termsOfServiceUserStatusId' is not null or undefined
            assertParamExists('updateUserStatus', 'termsOfServiceUserStatusId', termsOfServiceUserStatusId)
            const localVarPath = `/terms_of_service_user_statuses/{terms_of_service_user_status_id}`
                .replace(`{${"terms_of_service_user_status_id"}}`, encodeURIComponent(String(termsOfServiceUserStatusId !== undefined ? termsOfServiceUserStatusId : `-terms_of_service_user_status_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2Security required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Security", [], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: termsOfServiceUserStatusesUpdateUserStatusRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/terms_of_service_user_statuses/{terms_of_service_user_status_id}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(termsOfServiceUserStatusesUpdateUserStatusRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TermsOfServiceUserStatusesApi - functional programming interface
 * @export
 */
export const TermsOfServiceUserStatusesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TermsOfServiceUserStatusesApiAxiosParamCreator(configuration)
    return {
        /**
         * Sets the status for a terms of service for a user.
         * @summary Create terms of service status for new user
         * @param {TermsOfServiceUserStatusesApiCreateUserStatusRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createUserStatus(requestParameters: TermsOfServiceUserStatusesApiCreateUserStatusRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TermsOfServiceUserStatus>> {
            const termsOfServiceUserStatusesCreateUserStatusRequest: TermsOfServiceUserStatusesCreateUserStatusRequest = {
                tos: requestParameters.tos,
                user: requestParameters.user,
                is_accepted: requestParameters.is_accepted
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createUserStatus(termsOfServiceUserStatusesCreateUserStatusRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves an overview of users and their status for a terms of service, including Whether they have accepted the terms and when.
         * @summary List terms of service user statuses
         * @param {TermsOfServiceUserStatusesApiListUserStatusesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listUserStatuses(requestParameters: TermsOfServiceUserStatusesApiListUserStatusesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TermsOfServiceUserStatuses>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listUserStatuses(requestParameters.tosId, requestParameters.userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates the status for a terms of service for a user.
         * @summary Update terms of service status for existing user
         * @param {TermsOfServiceUserStatusesApiUpdateUserStatusRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUserStatus(requestParameters: TermsOfServiceUserStatusesApiUpdateUserStatusRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TermsOfServiceUserStatus>> {
            const termsOfServiceUserStatusesUpdateUserStatusRequest: TermsOfServiceUserStatusesUpdateUserStatusRequest = {
                is_accepted: requestParameters.is_accepted
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateUserStatus(requestParameters.termsOfServiceUserStatusId, termsOfServiceUserStatusesUpdateUserStatusRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TermsOfServiceUserStatusesApi - factory interface
 * @export
 */
export const TermsOfServiceUserStatusesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TermsOfServiceUserStatusesApiFp(configuration)
    return {
        /**
         * Sets the status for a terms of service for a user.
         * @summary Create terms of service status for new user
         * @param {TermsOfServiceUserStatusesApiCreateUserStatusRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUserStatus(requestParameters: TermsOfServiceUserStatusesApiCreateUserStatusRequest, options?: AxiosRequestConfig): AxiosPromise<TermsOfServiceUserStatus> {
            return localVarFp.createUserStatus(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves an overview of users and their status for a terms of service, including Whether they have accepted the terms and when.
         * @summary List terms of service user statuses
         * @param {TermsOfServiceUserStatusesApiListUserStatusesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserStatuses(requestParameters: TermsOfServiceUserStatusesApiListUserStatusesRequest, options?: AxiosRequestConfig): AxiosPromise<TermsOfServiceUserStatuses> {
            return localVarFp.listUserStatuses(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates the status for a terms of service for a user.
         * @summary Update terms of service status for existing user
         * @param {TermsOfServiceUserStatusesApiUpdateUserStatusRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserStatus(requestParameters: TermsOfServiceUserStatusesApiUpdateUserStatusRequest, options?: AxiosRequestConfig): AxiosPromise<TermsOfServiceUserStatus> {
            return localVarFp.updateUserStatus(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createUserStatus operation in TermsOfServiceUserStatusesApi.
 * @export
 * @interface TermsOfServiceUserStatusesApiCreateUserStatusRequest
 */
export type TermsOfServiceUserStatusesApiCreateUserStatusRequest = {
    
} & TermsOfServiceUserStatusesCreateUserStatusRequest

/**
 * Request parameters for listUserStatuses operation in TermsOfServiceUserStatusesApi.
 * @export
 * @interface TermsOfServiceUserStatusesApiListUserStatusesRequest
 */
export type TermsOfServiceUserStatusesApiListUserStatusesRequest = {
    
    /**
    * The ID of the terms of service.
    * @type {string}
    * @memberof TermsOfServiceUserStatusesApiListUserStatuses
    */
    readonly tosId: string
    
    /**
    * Limits results to the given user ID.
    * @type {string}
    * @memberof TermsOfServiceUserStatusesApiListUserStatuses
    */
    readonly userId?: string
    
}

/**
 * Request parameters for updateUserStatus operation in TermsOfServiceUserStatusesApi.
 * @export
 * @interface TermsOfServiceUserStatusesApiUpdateUserStatusRequest
 */
export type TermsOfServiceUserStatusesApiUpdateUserStatusRequest = {
    
    /**
    * The ID of the terms of service status.
    * @type {string}
    * @memberof TermsOfServiceUserStatusesApiUpdateUserStatus
    */
    readonly termsOfServiceUserStatusId: string
    
} & TermsOfServiceUserStatusesUpdateUserStatusRequest

/**
 * TermsOfServiceUserStatusesApiGenerated - object-oriented interface
 * @export
 * @class TermsOfServiceUserStatusesApiGenerated
 * @extends {BaseAPI}
 */
export class TermsOfServiceUserStatusesApiGenerated extends BaseAPI {
    /**
     * Sets the status for a terms of service for a user.
     * @summary Create terms of service status for new user
     * @param {TermsOfServiceUserStatusesApiCreateUserStatusRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TermsOfServiceUserStatusesApiGenerated
     */
    public createUserStatus(requestParameters: TermsOfServiceUserStatusesApiCreateUserStatusRequest, options?: AxiosRequestConfig) {
        return TermsOfServiceUserStatusesApiFp(this.configuration).createUserStatus(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves an overview of users and their status for a terms of service, including Whether they have accepted the terms and when.
     * @summary List terms of service user statuses
     * @param {TermsOfServiceUserStatusesApiListUserStatusesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TermsOfServiceUserStatusesApiGenerated
     */
    public listUserStatuses(requestParameters: TermsOfServiceUserStatusesApiListUserStatusesRequest, options?: AxiosRequestConfig) {
        return TermsOfServiceUserStatusesApiFp(this.configuration).listUserStatuses(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates the status for a terms of service for a user.
     * @summary Update terms of service status for existing user
     * @param {TermsOfServiceUserStatusesApiUpdateUserStatusRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TermsOfServiceUserStatusesApiGenerated
     */
    public updateUserStatus(requestParameters: TermsOfServiceUserStatusesApiUpdateUserStatusRequest, options?: AxiosRequestConfig) {
        return TermsOfServiceUserStatusesApiFp(this.configuration).updateUserStatus(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
