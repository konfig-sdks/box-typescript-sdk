/* tslint:disable */
/* eslint-disable */
/*
Box Platform API

[Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.

The version of the OpenAPI document: 2.0.0
Contact: devrel@box.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ClassificationTemplate } from '../models';
// @ts-ignore
import { ClassificationsAddNewClassificationsRequestInner } from '../models';
// @ts-ignore
import { ClassificationsInitializeTemplateRequest } from '../models';
// @ts-ignore
import { ClassificationsInitializeTemplateRequestFieldsInner } from '../models';
// @ts-ignore
import { ClassificationsUpdateLabelsDescriptionsRequestInner } from '../models';
// @ts-ignore
import { ClientError } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * ClassificationsApi - axios parameter creator
 * @export
 */
export const ClassificationsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Adds one or more new classifications to the list of classifications available to the enterprise.  This API can also be called by including the enterprise ID in the URL explicitly, for example `/metadata_templates/enterprise_12345/securityClassification-6VMVochwUWo/schema`.
         * @summary Add classification
         * @param {Array<ClassificationsAddNewClassificationsRequestInner>} [classificationsAddNewClassificationsRequestInner] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewClassifications: async (classificationsAddNewClassificationsRequestInner?: Array<ClassificationsAddNewClassificationsRequestInner>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/metadata_templates/enterprise/securityClassification-6VMVochwUWo/schema#add`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2Security required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Security", [], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: classificationsAddNewClassificationsRequestInner,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/metadata_templates/enterprise/securityClassification-6VMVochwUWo/schema#add',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(classificationsAddNewClassificationsRequestInner, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * When an enterprise does not yet have any classifications, this API call initializes the classification template with an initial set of classifications.  If an enterprise already has a classification, the template will already exist and instead an API call should be made to add additional classifications.
         * @summary Add initial classifications
         * @param {ClassificationsInitializeTemplateRequest} [classificationsInitializeTemplateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        initializeTemplate: async (classificationsInitializeTemplateRequest?: ClassificationsInitializeTemplateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/metadata_templates/schema#classifications`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2Security required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Security", [], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: classificationsInitializeTemplateRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/metadata_templates/schema#classifications',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(classificationsInitializeTemplateRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the classification metadata template and lists all the classifications available to this enterprise.  This API can also be called by including the enterprise ID in the URL explicitly, for example `/metadata_templates/enterprise_12345/securityClassification-6VMVochwUWo/schema`.
         * @summary List all classifications
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllClassifications: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/metadata_templates/enterprise/securityClassification-6VMVochwUWo/schema`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2Security required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Security", [], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/metadata_templates/enterprise/securityClassification-6VMVochwUWo/schema',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates the labels and descriptions of one or more classifications available to the enterprise.  This API can also be called by including the enterprise ID in the URL explicitly, for example `/metadata_templates/enterprise_12345/securityClassification-6VMVochwUWo/schema`.
         * @summary Update classification
         * @param {Array<ClassificationsUpdateLabelsDescriptionsRequestInner>} [classificationsUpdateLabelsDescriptionsRequestInner] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLabelsDescriptions: async (classificationsUpdateLabelsDescriptionsRequestInner?: Array<ClassificationsUpdateLabelsDescriptionsRequestInner>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/metadata_templates/enterprise/securityClassification-6VMVochwUWo/schema#update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2Security required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Security", [], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: classificationsUpdateLabelsDescriptionsRequestInner,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/metadata_templates/enterprise/securityClassification-6VMVochwUWo/schema#update',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(classificationsUpdateLabelsDescriptionsRequestInner, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ClassificationsApi - functional programming interface
 * @export
 */
export const ClassificationsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ClassificationsApiAxiosParamCreator(configuration)
    return {
        /**
         * Adds one or more new classifications to the list of classifications available to the enterprise.  This API can also be called by including the enterprise ID in the URL explicitly, for example `/metadata_templates/enterprise_12345/securityClassification-6VMVochwUWo/schema`.
         * @summary Add classification
         * @param {ClassificationsApiAddNewClassificationsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addNewClassifications(requestParameters: ClassificationsApiAddNewClassificationsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ClassificationTemplate>> {
            const classificationsAddNewClassificationsRequestInner: Array<ClassificationsAddNewClassificationsRequestInner> = requestParameters;
            const localVarAxiosArgs = await localVarAxiosParamCreator.addNewClassifications(classificationsAddNewClassificationsRequestInner, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * When an enterprise does not yet have any classifications, this API call initializes the classification template with an initial set of classifications.  If an enterprise already has a classification, the template will already exist and instead an API call should be made to add additional classifications.
         * @summary Add initial classifications
         * @param {ClassificationsApiInitializeTemplateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async initializeTemplate(requestParameters: ClassificationsApiInitializeTemplateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ClassificationTemplate>> {
            const classificationsInitializeTemplateRequest: ClassificationsInitializeTemplateRequest = {
                scope: requestParameters.scope,
                templateKey: requestParameters.templateKey,
                displayName: requestParameters.displayName,
                hidden: requestParameters.hidden,
                copyInstanceOnItemCopy: requestParameters.copyInstanceOnItemCopy,
                fields: requestParameters.fields
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.initializeTemplate(classificationsInitializeTemplateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves the classification metadata template and lists all the classifications available to this enterprise.  This API can also be called by including the enterprise ID in the URL explicitly, for example `/metadata_templates/enterprise_12345/securityClassification-6VMVochwUWo/schema`.
         * @summary List all classifications
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAllClassifications(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ClassificationTemplate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAllClassifications(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates the labels and descriptions of one or more classifications available to the enterprise.  This API can also be called by including the enterprise ID in the URL explicitly, for example `/metadata_templates/enterprise_12345/securityClassification-6VMVochwUWo/schema`.
         * @summary Update classification
         * @param {ClassificationsApiUpdateLabelsDescriptionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateLabelsDescriptions(requestParameters: ClassificationsApiUpdateLabelsDescriptionsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ClassificationTemplate>> {
            const classificationsUpdateLabelsDescriptionsRequestInner: Array<ClassificationsUpdateLabelsDescriptionsRequestInner> = requestParameters;
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateLabelsDescriptions(classificationsUpdateLabelsDescriptionsRequestInner, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ClassificationsApi - factory interface
 * @export
 */
export const ClassificationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ClassificationsApiFp(configuration)
    return {
        /**
         * Adds one or more new classifications to the list of classifications available to the enterprise.  This API can also be called by including the enterprise ID in the URL explicitly, for example `/metadata_templates/enterprise_12345/securityClassification-6VMVochwUWo/schema`.
         * @summary Add classification
         * @param {ClassificationsApiAddNewClassificationsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewClassifications(requestParameters: ClassificationsApiAddNewClassificationsRequest, options?: AxiosRequestConfig): AxiosPromise<ClassificationTemplate> {
            return localVarFp.addNewClassifications(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * When an enterprise does not yet have any classifications, this API call initializes the classification template with an initial set of classifications.  If an enterprise already has a classification, the template will already exist and instead an API call should be made to add additional classifications.
         * @summary Add initial classifications
         * @param {ClassificationsApiInitializeTemplateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        initializeTemplate(requestParameters: ClassificationsApiInitializeTemplateRequest, options?: AxiosRequestConfig): AxiosPromise<ClassificationTemplate> {
            return localVarFp.initializeTemplate(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the classification metadata template and lists all the classifications available to this enterprise.  This API can also be called by including the enterprise ID in the URL explicitly, for example `/metadata_templates/enterprise_12345/securityClassification-6VMVochwUWo/schema`.
         * @summary List all classifications
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllClassifications(options?: AxiosRequestConfig): AxiosPromise<ClassificationTemplate> {
            return localVarFp.listAllClassifications(options).then((request) => request(axios, basePath));
        },
        /**
         * Updates the labels and descriptions of one or more classifications available to the enterprise.  This API can also be called by including the enterprise ID in the URL explicitly, for example `/metadata_templates/enterprise_12345/securityClassification-6VMVochwUWo/schema`.
         * @summary Update classification
         * @param {ClassificationsApiUpdateLabelsDescriptionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLabelsDescriptions(requestParameters: ClassificationsApiUpdateLabelsDescriptionsRequest, options?: AxiosRequestConfig): AxiosPromise<ClassificationTemplate> {
            return localVarFp.updateLabelsDescriptions(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addNewClassifications operation in ClassificationsApi.
 * @export
 * @interface ClassificationsApiAddNewClassificationsRequest
 */
export type ClassificationsApiAddNewClassificationsRequest = Array<ClassificationsAddNewClassificationsRequestInner>

/**
 * Request parameters for initializeTemplate operation in ClassificationsApi.
 * @export
 * @interface ClassificationsApiInitializeTemplateRequest
 */
export type ClassificationsApiInitializeTemplateRequest = {
    
} & ClassificationsInitializeTemplateRequest

/**
 * Request parameters for updateLabelsDescriptions operation in ClassificationsApi.
 * @export
 * @interface ClassificationsApiUpdateLabelsDescriptionsRequest
 */
export type ClassificationsApiUpdateLabelsDescriptionsRequest = Array<ClassificationsUpdateLabelsDescriptionsRequestInner>

/**
 * ClassificationsApiGenerated - object-oriented interface
 * @export
 * @class ClassificationsApiGenerated
 * @extends {BaseAPI}
 */
export class ClassificationsApiGenerated extends BaseAPI {
    /**
     * Adds one or more new classifications to the list of classifications available to the enterprise.  This API can also be called by including the enterprise ID in the URL explicitly, for example `/metadata_templates/enterprise_12345/securityClassification-6VMVochwUWo/schema`.
     * @summary Add classification
     * @param {ClassificationsApiAddNewClassificationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClassificationsApiGenerated
     */
    public addNewClassifications(requestParameters: ClassificationsApiAddNewClassificationsRequest, options?: AxiosRequestConfig) {
        return ClassificationsApiFp(this.configuration).addNewClassifications(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * When an enterprise does not yet have any classifications, this API call initializes the classification template with an initial set of classifications.  If an enterprise already has a classification, the template will already exist and instead an API call should be made to add additional classifications.
     * @summary Add initial classifications
     * @param {ClassificationsApiInitializeTemplateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClassificationsApiGenerated
     */
    public initializeTemplate(requestParameters: ClassificationsApiInitializeTemplateRequest, options?: AxiosRequestConfig) {
        return ClassificationsApiFp(this.configuration).initializeTemplate(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves the classification metadata template and lists all the classifications available to this enterprise.  This API can also be called by including the enterprise ID in the URL explicitly, for example `/metadata_templates/enterprise_12345/securityClassification-6VMVochwUWo/schema`.
     * @summary List all classifications
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClassificationsApiGenerated
     */
    public listAllClassifications(options?: AxiosRequestConfig) {
        return ClassificationsApiFp(this.configuration).listAllClassifications(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates the labels and descriptions of one or more classifications available to the enterprise.  This API can also be called by including the enterprise ID in the URL explicitly, for example `/metadata_templates/enterprise_12345/securityClassification-6VMVochwUWo/schema`.
     * @summary Update classification
     * @param {ClassificationsApiUpdateLabelsDescriptionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClassificationsApiGenerated
     */
    public updateLabelsDescriptions(requestParameters: ClassificationsApiUpdateLabelsDescriptionsRequest, options?: AxiosRequestConfig) {
        return ClassificationsApiFp(this.configuration).updateLabelsDescriptions(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
