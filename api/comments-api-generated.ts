/* tslint:disable */
/* eslint-disable */
/*
Box Platform API

[Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.

The version of the OpenAPI document: 2.0.0
Contact: devrel@box.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ClientError } from '../models';
// @ts-ignore
import { CommentFull } from '../models';
// @ts-ignore
import { Comments } from '../models';
// @ts-ignore
import { CommentsUpdateMessageRequest } from '../models';
// @ts-ignore
import { PostCommentsRequest } from '../models';
// @ts-ignore
import { PostCommentsRequestItem } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * CommentsApi - axios parameter creator
 * @export
 */
export const CommentsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Adds a comment by the user to a specific file, or as a reply to an other comment.
         * @summary Create comment
         * @param {Array<string>} [fields] A comma-separated list of attributes to include in the response. This can be used to request fields that are not normally returned in a standard response.  Be aware that specifying this parameter will have the effect that none of the standard fields are returned in the response unless explicitly specified, instead only fields for the mini representation are returned, additional to the fields requested.
         * @param {PostCommentsRequest} [postCommentsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        comments: async (fields?: Array<string>, postCommentsRequest?: PostCommentsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/comments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2Security required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Security", [], configuration)
            if (fields) {
                localVarQueryParameter['fields'] = fields.join(COLLECTION_FORMATS.csv);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: postCommentsRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/comments',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(postCommentsRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the message and metadata for a specific comment, as well as information on the user who created the comment.
         * @summary Get comment
         * @param {string} commentId The ID of the comment.
         * @param {Array<string>} [fields] A comma-separated list of attributes to include in the response. This can be used to request fields that are not normally returned in a standard response.  Be aware that specifying this parameter will have the effect that none of the standard fields are returned in the response unless explicitly specified, instead only fields for the mini representation are returned, additional to the fields requested.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById: async (commentId: string, fields?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'commentId' is not null or undefined
            assertParamExists('getById', 'commentId', commentId)
            const localVarPath = `/comments/{comment_id}`
                .replace(`{${"comment_id"}}`, encodeURIComponent(String(commentId !== undefined ? commentId : `-comment_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2Security required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Security", [], configuration)
            if (fields) {
                localVarQueryParameter['fields'] = fields.join(COLLECTION_FORMATS.csv);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/comments/{comment_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a list of comments for a file.
         * @summary List file comments
         * @param {string} fileId The unique identifier that represents a file.  The ID for any file can be determined by visiting a file in the web application and copying the ID from the URL. For example, for the URL &#x60;https://_*.app.box.com/files/123&#x60; the &#x60;file_id&#x60; is &#x60;123&#x60;.
         * @param {Array<string>} [fields] A comma-separated list of attributes to include in the response. This can be used to request fields that are not normally returned in a standard response.  Be aware that specifying this parameter will have the effect that none of the standard fields are returned in the response unless explicitly specified, instead only fields for the mini representation are returned, additional to the fields requested.
         * @param {number} [limit] The maximum number of items to return per page.
         * @param {number} [offset] The offset of the item at which to begin the response.  Queries with offset parameter value exceeding 10000 will be rejected with a 400 response.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFileComments: async (fileId: string, fields?: Array<string>, limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fileId' is not null or undefined
            assertParamExists('listFileComments', 'fileId', fileId)
            const localVarPath = `/files/{file_id}/comments`
                .replace(`{${"file_id"}}`, encodeURIComponent(String(fileId !== undefined ? fileId : `-file_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2Security required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Security", [], configuration)
            if (fields) {
                localVarQueryParameter['fields'] = fields.join(COLLECTION_FORMATS.csv);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/files/{file_id}/comments',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Permanently deletes a comment.
         * @summary Remove comment
         * @param {string} commentId The ID of the comment.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeById: async (commentId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'commentId' is not null or undefined
            assertParamExists('removeById', 'commentId', commentId)
            const localVarPath = `/comments/{comment_id}`
                .replace(`{${"comment_id"}}`, encodeURIComponent(String(commentId !== undefined ? commentId : `-comment_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2Security required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Security", [], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/comments/{comment_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update the message of a comment.
         * @summary Update comment
         * @param {string} commentId The ID of the comment.
         * @param {Array<string>} [fields] A comma-separated list of attributes to include in the response. This can be used to request fields that are not normally returned in a standard response.  Be aware that specifying this parameter will have the effect that none of the standard fields are returned in the response unless explicitly specified, instead only fields for the mini representation are returned, additional to the fields requested.
         * @param {CommentsUpdateMessageRequest} [commentsUpdateMessageRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMessage: async (commentId: string, fields?: Array<string>, commentsUpdateMessageRequest?: CommentsUpdateMessageRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'commentId' is not null or undefined
            assertParamExists('updateMessage', 'commentId', commentId)
            const localVarPath = `/comments/{comment_id}`
                .replace(`{${"comment_id"}}`, encodeURIComponent(String(commentId !== undefined ? commentId : `-comment_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2Security required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Security", [], configuration)
            if (fields) {
                localVarQueryParameter['fields'] = fields.join(COLLECTION_FORMATS.csv);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: commentsUpdateMessageRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/comments/{comment_id}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(commentsUpdateMessageRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CommentsApi - functional programming interface
 * @export
 */
export const CommentsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CommentsApiAxiosParamCreator(configuration)
    return {
        /**
         * Adds a comment by the user to a specific file, or as a reply to an other comment.
         * @summary Create comment
         * @param {CommentsApiCommentsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async comments(requestParameters: CommentsApiCommentsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommentFull>> {
            const postCommentsRequest: PostCommentsRequest = {
                message: requestParameters.message,
                tagged_message: requestParameters.tagged_message,
                item: requestParameters.item
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.comments(requestParameters.fields, postCommentsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves the message and metadata for a specific comment, as well as information on the user who created the comment.
         * @summary Get comment
         * @param {CommentsApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getById(requestParameters: CommentsApiGetByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommentFull>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getById(requestParameters.commentId, requestParameters.fields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a list of comments for a file.
         * @summary List file comments
         * @param {CommentsApiListFileCommentsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listFileComments(requestParameters: CommentsApiListFileCommentsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Comments>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listFileComments(requestParameters.fileId, requestParameters.fields, requestParameters.limit, requestParameters.offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Permanently deletes a comment.
         * @summary Remove comment
         * @param {CommentsApiRemoveByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeById(requestParameters: CommentsApiRemoveByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeById(requestParameters.commentId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update the message of a comment.
         * @summary Update comment
         * @param {CommentsApiUpdateMessageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateMessage(requestParameters: CommentsApiUpdateMessageRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommentFull>> {
            const commentsUpdateMessageRequest: CommentsUpdateMessageRequest = {
                message: requestParameters.message
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateMessage(requestParameters.commentId, requestParameters.fields, commentsUpdateMessageRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CommentsApi - factory interface
 * @export
 */
export const CommentsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CommentsApiFp(configuration)
    return {
        /**
         * Adds a comment by the user to a specific file, or as a reply to an other comment.
         * @summary Create comment
         * @param {CommentsApiCommentsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        comments(requestParameters: CommentsApiCommentsRequest, options?: AxiosRequestConfig): AxiosPromise<CommentFull> {
            return localVarFp.comments(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the message and metadata for a specific comment, as well as information on the user who created the comment.
         * @summary Get comment
         * @param {CommentsApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById(requestParameters: CommentsApiGetByIdRequest, options?: AxiosRequestConfig): AxiosPromise<CommentFull> {
            return localVarFp.getById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a list of comments for a file.
         * @summary List file comments
         * @param {CommentsApiListFileCommentsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFileComments(requestParameters: CommentsApiListFileCommentsRequest, options?: AxiosRequestConfig): AxiosPromise<Comments> {
            return localVarFp.listFileComments(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Permanently deletes a comment.
         * @summary Remove comment
         * @param {CommentsApiRemoveByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeById(requestParameters: CommentsApiRemoveByIdRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.removeById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update the message of a comment.
         * @summary Update comment
         * @param {CommentsApiUpdateMessageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMessage(requestParameters: CommentsApiUpdateMessageRequest, options?: AxiosRequestConfig): AxiosPromise<CommentFull> {
            return localVarFp.updateMessage(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for comments operation in CommentsApi.
 * @export
 * @interface CommentsApiCommentsRequest
 */
export type CommentsApiCommentsRequest = {
    
    /**
    * A comma-separated list of attributes to include in the response. This can be used to request fields that are not normally returned in a standard response.  Be aware that specifying this parameter will have the effect that none of the standard fields are returned in the response unless explicitly specified, instead only fields for the mini representation are returned, additional to the fields requested.
    * @type {Array<string>}
    * @memberof CommentsApiComments
    */
    readonly fields?: Array<string>
    
} & PostCommentsRequest

/**
 * Request parameters for getById operation in CommentsApi.
 * @export
 * @interface CommentsApiGetByIdRequest
 */
export type CommentsApiGetByIdRequest = {
    
    /**
    * The ID of the comment.
    * @type {string}
    * @memberof CommentsApiGetById
    */
    readonly commentId: string
    
    /**
    * A comma-separated list of attributes to include in the response. This can be used to request fields that are not normally returned in a standard response.  Be aware that specifying this parameter will have the effect that none of the standard fields are returned in the response unless explicitly specified, instead only fields for the mini representation are returned, additional to the fields requested.
    * @type {Array<string>}
    * @memberof CommentsApiGetById
    */
    readonly fields?: Array<string>
    
}

/**
 * Request parameters for listFileComments operation in CommentsApi.
 * @export
 * @interface CommentsApiListFileCommentsRequest
 */
export type CommentsApiListFileCommentsRequest = {
    
    /**
    * The unique identifier that represents a file.  The ID for any file can be determined by visiting a file in the web application and copying the ID from the URL. For example, for the URL `https://_*.app.box.com/files/123` the `file_id` is `123`.
    * @type {string}
    * @memberof CommentsApiListFileComments
    */
    readonly fileId: string
    
    /**
    * A comma-separated list of attributes to include in the response. This can be used to request fields that are not normally returned in a standard response.  Be aware that specifying this parameter will have the effect that none of the standard fields are returned in the response unless explicitly specified, instead only fields for the mini representation are returned, additional to the fields requested.
    * @type {Array<string>}
    * @memberof CommentsApiListFileComments
    */
    readonly fields?: Array<string>
    
    /**
    * The maximum number of items to return per page.
    * @type {number}
    * @memberof CommentsApiListFileComments
    */
    readonly limit?: number
    
    /**
    * The offset of the item at which to begin the response.  Queries with offset parameter value exceeding 10000 will be rejected with a 400 response.
    * @type {number}
    * @memberof CommentsApiListFileComments
    */
    readonly offset?: number
    
}

/**
 * Request parameters for removeById operation in CommentsApi.
 * @export
 * @interface CommentsApiRemoveByIdRequest
 */
export type CommentsApiRemoveByIdRequest = {
    
    /**
    * The ID of the comment.
    * @type {string}
    * @memberof CommentsApiRemoveById
    */
    readonly commentId: string
    
}

/**
 * Request parameters for updateMessage operation in CommentsApi.
 * @export
 * @interface CommentsApiUpdateMessageRequest
 */
export type CommentsApiUpdateMessageRequest = {
    
    /**
    * The ID of the comment.
    * @type {string}
    * @memberof CommentsApiUpdateMessage
    */
    readonly commentId: string
    
    /**
    * A comma-separated list of attributes to include in the response. This can be used to request fields that are not normally returned in a standard response.  Be aware that specifying this parameter will have the effect that none of the standard fields are returned in the response unless explicitly specified, instead only fields for the mini representation are returned, additional to the fields requested.
    * @type {Array<string>}
    * @memberof CommentsApiUpdateMessage
    */
    readonly fields?: Array<string>
    
} & CommentsUpdateMessageRequest

/**
 * CommentsApiGenerated - object-oriented interface
 * @export
 * @class CommentsApiGenerated
 * @extends {BaseAPI}
 */
export class CommentsApiGenerated extends BaseAPI {
    /**
     * Adds a comment by the user to a specific file, or as a reply to an other comment.
     * @summary Create comment
     * @param {CommentsApiCommentsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommentsApiGenerated
     */
    public comments(requestParameters: CommentsApiCommentsRequest, options?: AxiosRequestConfig) {
        return CommentsApiFp(this.configuration).comments(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves the message and metadata for a specific comment, as well as information on the user who created the comment.
     * @summary Get comment
     * @param {CommentsApiGetByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommentsApiGenerated
     */
    public getById(requestParameters: CommentsApiGetByIdRequest, options?: AxiosRequestConfig) {
        return CommentsApiFp(this.configuration).getById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a list of comments for a file.
     * @summary List file comments
     * @param {CommentsApiListFileCommentsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommentsApiGenerated
     */
    public listFileComments(requestParameters: CommentsApiListFileCommentsRequest, options?: AxiosRequestConfig) {
        return CommentsApiFp(this.configuration).listFileComments(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Permanently deletes a comment.
     * @summary Remove comment
     * @param {CommentsApiRemoveByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommentsApiGenerated
     */
    public removeById(requestParameters: CommentsApiRemoveByIdRequest, options?: AxiosRequestConfig) {
        return CommentsApiFp(this.configuration).removeById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update the message of a comment.
     * @summary Update comment
     * @param {CommentsApiUpdateMessageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommentsApiGenerated
     */
    public updateMessage(requestParameters: CommentsApiUpdateMessageRequest, options?: AxiosRequestConfig) {
        return CommentsApiFp(this.configuration).updateMessage(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
