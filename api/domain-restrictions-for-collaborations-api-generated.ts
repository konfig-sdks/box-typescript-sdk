/* tslint:disable */
/* eslint-disable */
/*
Box Platform API

[Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.

The version of the OpenAPI document: 2.0.0
Contact: devrel@box.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ClientError } from '../models';
// @ts-ignore
import { CollaborationAllowlistEntries } from '../models';
// @ts-ignore
import { CollaborationAllowlistEntry } from '../models';
// @ts-ignore
import { DomainRestrictionsForCollaborationsAddAllowedDomainEntryRequest } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * DomainRestrictionsForCollaborationsApi - axios parameter creator
 * @export
 */
export const DomainRestrictionsForCollaborationsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a new entry in the list of allowed domains to allow collaboration for.
         * @summary Add domain to list of allowed collaboration domains
         * @param {DomainRestrictionsForCollaborationsAddAllowedDomainEntryRequest} [domainRestrictionsForCollaborationsAddAllowedDomainEntryRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAllowedDomainEntry: async (domainRestrictionsForCollaborationsAddAllowedDomainEntryRequest?: DomainRestrictionsForCollaborationsAddAllowedDomainEntryRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/collaboration_whitelist_entries`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2Security required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Security", [], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: domainRestrictionsForCollaborationsAddAllowedDomainEntryRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/collaboration_whitelist_entries',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(domainRestrictionsForCollaborationsAddAllowedDomainEntryRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a domain that has been deemed safe to create collaborations for within the current enterprise.
         * @summary Get allowed collaboration domain
         * @param {string} collaborationWhitelistEntryId The ID of the entry in the list.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        allowedCollaborationDomain: async (collaborationWhitelistEntryId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'collaborationWhitelistEntryId' is not null or undefined
            assertParamExists('allowedCollaborationDomain', 'collaborationWhitelistEntryId', collaborationWhitelistEntryId)
            const localVarPath = `/collaboration_whitelist_entries/{collaboration_whitelist_entry_id}`
                .replace(`{${"collaboration_whitelist_entry_id"}}`, encodeURIComponent(String(collaborationWhitelistEntryId !== undefined ? collaborationWhitelistEntryId : `-collaboration_whitelist_entry_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2Security required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Security", [], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/collaboration_whitelist_entries/{collaboration_whitelist_entry_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the list domains that have been deemed safe to create collaborations for within the current enterprise.
         * @summary List allowed collaboration domains
         * @param {string} [marker] Defines the position marker at which to begin returning results. This is used when paginating using marker-based pagination.  This requires &#x60;usemarker&#x60; to be set to &#x60;true&#x60;.
         * @param {number} [limit] The maximum number of items to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllowedCollaborationDomains: async (marker?: string, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/collaboration_whitelist_entries`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2Security required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Security", [], configuration)
            if (marker !== undefined) {
                localVarQueryParameter['marker'] = marker;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/collaboration_whitelist_entries',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Removes a domain from the list of domains that have been deemed safe to create collaborations for within the current enterprise.
         * @summary Remove domain from list of allowed collaboration domains
         * @param {string} collaborationWhitelistEntryId The ID of the entry in the list.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAllowedDomainEntry: async (collaborationWhitelistEntryId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'collaborationWhitelistEntryId' is not null or undefined
            assertParamExists('removeAllowedDomainEntry', 'collaborationWhitelistEntryId', collaborationWhitelistEntryId)
            const localVarPath = `/collaboration_whitelist_entries/{collaboration_whitelist_entry_id}`
                .replace(`{${"collaboration_whitelist_entry_id"}}`, encodeURIComponent(String(collaborationWhitelistEntryId !== undefined ? collaborationWhitelistEntryId : `-collaboration_whitelist_entry_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2Security required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Security", [], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/collaboration_whitelist_entries/{collaboration_whitelist_entry_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DomainRestrictionsForCollaborationsApi - functional programming interface
 * @export
 */
export const DomainRestrictionsForCollaborationsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DomainRestrictionsForCollaborationsApiAxiosParamCreator(configuration)
    return {
        /**
         * Creates a new entry in the list of allowed domains to allow collaboration for.
         * @summary Add domain to list of allowed collaboration domains
         * @param {DomainRestrictionsForCollaborationsApiAddAllowedDomainEntryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addAllowedDomainEntry(requestParameters: DomainRestrictionsForCollaborationsApiAddAllowedDomainEntryRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CollaborationAllowlistEntry>> {
            const domainRestrictionsForCollaborationsAddAllowedDomainEntryRequest: DomainRestrictionsForCollaborationsAddAllowedDomainEntryRequest = {
                domain: requestParameters.domain,
                direction: requestParameters.direction
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addAllowedDomainEntry(domainRestrictionsForCollaborationsAddAllowedDomainEntryRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a domain that has been deemed safe to create collaborations for within the current enterprise.
         * @summary Get allowed collaboration domain
         * @param {DomainRestrictionsForCollaborationsApiAllowedCollaborationDomainRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async allowedCollaborationDomain(requestParameters: DomainRestrictionsForCollaborationsApiAllowedCollaborationDomainRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CollaborationAllowlistEntry>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.allowedCollaborationDomain(requestParameters.collaborationWhitelistEntryId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns the list domains that have been deemed safe to create collaborations for within the current enterprise.
         * @summary List allowed collaboration domains
         * @param {DomainRestrictionsForCollaborationsApiListAllowedCollaborationDomainsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAllowedCollaborationDomains(requestParameters: DomainRestrictionsForCollaborationsApiListAllowedCollaborationDomainsRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CollaborationAllowlistEntries>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAllowedCollaborationDomains(requestParameters.marker, requestParameters.limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Removes a domain from the list of domains that have been deemed safe to create collaborations for within the current enterprise.
         * @summary Remove domain from list of allowed collaboration domains
         * @param {DomainRestrictionsForCollaborationsApiRemoveAllowedDomainEntryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeAllowedDomainEntry(requestParameters: DomainRestrictionsForCollaborationsApiRemoveAllowedDomainEntryRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeAllowedDomainEntry(requestParameters.collaborationWhitelistEntryId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DomainRestrictionsForCollaborationsApi - factory interface
 * @export
 */
export const DomainRestrictionsForCollaborationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DomainRestrictionsForCollaborationsApiFp(configuration)
    return {
        /**
         * Creates a new entry in the list of allowed domains to allow collaboration for.
         * @summary Add domain to list of allowed collaboration domains
         * @param {DomainRestrictionsForCollaborationsApiAddAllowedDomainEntryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAllowedDomainEntry(requestParameters: DomainRestrictionsForCollaborationsApiAddAllowedDomainEntryRequest, options?: AxiosRequestConfig): AxiosPromise<CollaborationAllowlistEntry> {
            return localVarFp.addAllowedDomainEntry(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a domain that has been deemed safe to create collaborations for within the current enterprise.
         * @summary Get allowed collaboration domain
         * @param {DomainRestrictionsForCollaborationsApiAllowedCollaborationDomainRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        allowedCollaborationDomain(requestParameters: DomainRestrictionsForCollaborationsApiAllowedCollaborationDomainRequest, options?: AxiosRequestConfig): AxiosPromise<CollaborationAllowlistEntry> {
            return localVarFp.allowedCollaborationDomain(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the list domains that have been deemed safe to create collaborations for within the current enterprise.
         * @summary List allowed collaboration domains
         * @param {DomainRestrictionsForCollaborationsApiListAllowedCollaborationDomainsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllowedCollaborationDomains(requestParameters: DomainRestrictionsForCollaborationsApiListAllowedCollaborationDomainsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<CollaborationAllowlistEntries> {
            return localVarFp.listAllowedCollaborationDomains(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Removes a domain from the list of domains that have been deemed safe to create collaborations for within the current enterprise.
         * @summary Remove domain from list of allowed collaboration domains
         * @param {DomainRestrictionsForCollaborationsApiRemoveAllowedDomainEntryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAllowedDomainEntry(requestParameters: DomainRestrictionsForCollaborationsApiRemoveAllowedDomainEntryRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.removeAllowedDomainEntry(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addAllowedDomainEntry operation in DomainRestrictionsForCollaborationsApi.
 * @export
 * @interface DomainRestrictionsForCollaborationsApiAddAllowedDomainEntryRequest
 */
export type DomainRestrictionsForCollaborationsApiAddAllowedDomainEntryRequest = {
    
} & DomainRestrictionsForCollaborationsAddAllowedDomainEntryRequest

/**
 * Request parameters for allowedCollaborationDomain operation in DomainRestrictionsForCollaborationsApi.
 * @export
 * @interface DomainRestrictionsForCollaborationsApiAllowedCollaborationDomainRequest
 */
export type DomainRestrictionsForCollaborationsApiAllowedCollaborationDomainRequest = {
    
    /**
    * The ID of the entry in the list.
    * @type {string}
    * @memberof DomainRestrictionsForCollaborationsApiAllowedCollaborationDomain
    */
    readonly collaborationWhitelistEntryId: string
    
}

/**
 * Request parameters for listAllowedCollaborationDomains operation in DomainRestrictionsForCollaborationsApi.
 * @export
 * @interface DomainRestrictionsForCollaborationsApiListAllowedCollaborationDomainsRequest
 */
export type DomainRestrictionsForCollaborationsApiListAllowedCollaborationDomainsRequest = {
    
    /**
    * Defines the position marker at which to begin returning results. This is used when paginating using marker-based pagination.  This requires `usemarker` to be set to `true`.
    * @type {string}
    * @memberof DomainRestrictionsForCollaborationsApiListAllowedCollaborationDomains
    */
    readonly marker?: string
    
    /**
    * The maximum number of items to return per page.
    * @type {number}
    * @memberof DomainRestrictionsForCollaborationsApiListAllowedCollaborationDomains
    */
    readonly limit?: number
    
}

/**
 * Request parameters for removeAllowedDomainEntry operation in DomainRestrictionsForCollaborationsApi.
 * @export
 * @interface DomainRestrictionsForCollaborationsApiRemoveAllowedDomainEntryRequest
 */
export type DomainRestrictionsForCollaborationsApiRemoveAllowedDomainEntryRequest = {
    
    /**
    * The ID of the entry in the list.
    * @type {string}
    * @memberof DomainRestrictionsForCollaborationsApiRemoveAllowedDomainEntry
    */
    readonly collaborationWhitelistEntryId: string
    
}

/**
 * DomainRestrictionsForCollaborationsApiGenerated - object-oriented interface
 * @export
 * @class DomainRestrictionsForCollaborationsApiGenerated
 * @extends {BaseAPI}
 */
export class DomainRestrictionsForCollaborationsApiGenerated extends BaseAPI {
    /**
     * Creates a new entry in the list of allowed domains to allow collaboration for.
     * @summary Add domain to list of allowed collaboration domains
     * @param {DomainRestrictionsForCollaborationsApiAddAllowedDomainEntryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DomainRestrictionsForCollaborationsApiGenerated
     */
    public addAllowedDomainEntry(requestParameters: DomainRestrictionsForCollaborationsApiAddAllowedDomainEntryRequest, options?: AxiosRequestConfig) {
        return DomainRestrictionsForCollaborationsApiFp(this.configuration).addAllowedDomainEntry(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a domain that has been deemed safe to create collaborations for within the current enterprise.
     * @summary Get allowed collaboration domain
     * @param {DomainRestrictionsForCollaborationsApiAllowedCollaborationDomainRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DomainRestrictionsForCollaborationsApiGenerated
     */
    public allowedCollaborationDomain(requestParameters: DomainRestrictionsForCollaborationsApiAllowedCollaborationDomainRequest, options?: AxiosRequestConfig) {
        return DomainRestrictionsForCollaborationsApiFp(this.configuration).allowedCollaborationDomain(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the list domains that have been deemed safe to create collaborations for within the current enterprise.
     * @summary List allowed collaboration domains
     * @param {DomainRestrictionsForCollaborationsApiListAllowedCollaborationDomainsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DomainRestrictionsForCollaborationsApiGenerated
     */
    public listAllowedCollaborationDomains(requestParameters: DomainRestrictionsForCollaborationsApiListAllowedCollaborationDomainsRequest = {}, options?: AxiosRequestConfig) {
        return DomainRestrictionsForCollaborationsApiFp(this.configuration).listAllowedCollaborationDomains(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Removes a domain from the list of domains that have been deemed safe to create collaborations for within the current enterprise.
     * @summary Remove domain from list of allowed collaboration domains
     * @param {DomainRestrictionsForCollaborationsApiRemoveAllowedDomainEntryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DomainRestrictionsForCollaborationsApiGenerated
     */
    public removeAllowedDomainEntry(requestParameters: DomainRestrictionsForCollaborationsApiRemoveAllowedDomainEntryRequest, options?: AxiosRequestConfig) {
        return DomainRestrictionsForCollaborationsApiFp(this.configuration).removeAllowedDomainEntry(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
