/* tslint:disable */
/* eslint-disable */
/*
Box Platform API

[Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.

The version of the OpenAPI document: 2.0.0
Contact: devrel@box.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ClientError } from '../models';
// @ts-ignore
import { GroupMembership } from '../models';
// @ts-ignore
import { GroupMemberships } from '../models';
// @ts-ignore
import { GroupMembershipsCreateMembershipRequest } from '../models';
// @ts-ignore
import { GroupMembershipsCreateMembershipRequestGroup } from '../models';
// @ts-ignore
import { GroupMembershipsCreateMembershipRequestUser } from '../models';
// @ts-ignore
import { GroupMembershipsUpdateMembershipRequest } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * GroupMembershipsApi - axios parameter creator
 * @export
 */
export const GroupMembershipsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a group membership. Only users with admin-level permissions will be able to use this API.
         * @summary Add user to group
         * @param {Array<string>} [fields] A comma-separated list of attributes to include in the response. This can be used to request fields that are not normally returned in a standard response.  Be aware that specifying this parameter will have the effect that none of the standard fields are returned in the response unless explicitly specified, instead only fields for the mini representation are returned, additional to the fields requested.
         * @param {GroupMembershipsCreateMembershipRequest} [groupMembershipsCreateMembershipRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMembership: async (fields?: Array<string>, groupMembershipsCreateMembershipRequest?: GroupMembershipsCreateMembershipRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/group_memberships`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2Security required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Security", [], configuration)
            if (fields) {
                localVarQueryParameter['fields'] = fields.join(COLLECTION_FORMATS.csv);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: groupMembershipsCreateMembershipRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/group_memberships',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(groupMembershipsCreateMembershipRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves all the groups for a user. Only members of this group or users with admin-level permissions will be able to use this API.
         * @summary List user\'s groups
         * @param {string} userId The ID of the user.
         * @param {number} [limit] The maximum number of items to return per page.
         * @param {number} [offset] The offset of the item at which to begin the response.  Queries with offset parameter value exceeding 10000 will be rejected with a 400 response.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAll: async (userId: string, limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getAll', 'userId', userId)
            const localVarPath = `/users/{user_id}/memberships`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-user_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2Security required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Security", [], configuration)
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/users/{user_id}/memberships',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a specific group membership. Only admins of this group or users with admin-level permissions will be able to use this API.
         * @summary Get group membership
         * @param {string} groupMembershipId The ID of the group membership.
         * @param {Array<string>} [fields] A comma-separated list of attributes to include in the response. This can be used to request fields that are not normally returned in a standard response.  Be aware that specifying this parameter will have the effect that none of the standard fields are returned in the response unless explicitly specified, instead only fields for the mini representation are returned, additional to the fields requested.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpecificMembership: async (groupMembershipId: string, fields?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupMembershipId' is not null or undefined
            assertParamExists('getSpecificMembership', 'groupMembershipId', groupMembershipId)
            const localVarPath = `/group_memberships/{group_membership_id}`
                .replace(`{${"group_membership_id"}}`, encodeURIComponent(String(groupMembershipId !== undefined ? groupMembershipId : `-group_membership_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2Security required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Security", [], configuration)
            if (fields) {
                localVarQueryParameter['fields'] = fields.join(COLLECTION_FORMATS.csv);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/group_memberships/{group_membership_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves all the members for a group. Only members of this group or users with admin-level permissions will be able to use this API.
         * @summary List members of group
         * @param {string} groupId The ID of the group.
         * @param {number} [limit] The maximum number of items to return per page.
         * @param {number} [offset] The offset of the item at which to begin the response.  Queries with offset parameter value exceeding 10000 will be rejected with a 400 response.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMembersOfGroup: async (groupId: string, limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('listMembersOfGroup', 'groupId', groupId)
            const localVarPath = `/groups/{group_id}/memberships`
                .replace(`{${"group_id"}}`, encodeURIComponent(String(groupId !== undefined ? groupId : `-group_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2Security required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Security", [], configuration)
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/groups/{group_id}/memberships',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a specific group membership. Only admins of this group or users with admin-level permissions will be able to use this API.
         * @summary Remove user from group
         * @param {string} groupMembershipId The ID of the group membership.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeUserFromGroup: async (groupMembershipId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupMembershipId' is not null or undefined
            assertParamExists('removeUserFromGroup', 'groupMembershipId', groupMembershipId)
            const localVarPath = `/group_memberships/{group_membership_id}`
                .replace(`{${"group_membership_id"}}`, encodeURIComponent(String(groupMembershipId !== undefined ? groupMembershipId : `-group_membership_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2Security required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Security", [], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/group_memberships/{group_membership_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates a user\'s group membership. Only admins of this group or users with admin-level permissions will be able to use this API.
         * @summary Update group membership
         * @param {string} groupMembershipId The ID of the group membership.
         * @param {Array<string>} [fields] A comma-separated list of attributes to include in the response. This can be used to request fields that are not normally returned in a standard response.  Be aware that specifying this parameter will have the effect that none of the standard fields are returned in the response unless explicitly specified, instead only fields for the mini representation are returned, additional to the fields requested.
         * @param {GroupMembershipsUpdateMembershipRequest} [groupMembershipsUpdateMembershipRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMembership: async (groupMembershipId: string, fields?: Array<string>, groupMembershipsUpdateMembershipRequest?: GroupMembershipsUpdateMembershipRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupMembershipId' is not null or undefined
            assertParamExists('updateMembership', 'groupMembershipId', groupMembershipId)
            const localVarPath = `/group_memberships/{group_membership_id}`
                .replace(`{${"group_membership_id"}}`, encodeURIComponent(String(groupMembershipId !== undefined ? groupMembershipId : `-group_membership_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2Security required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Security", [], configuration)
            if (fields) {
                localVarQueryParameter['fields'] = fields.join(COLLECTION_FORMATS.csv);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: groupMembershipsUpdateMembershipRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/group_memberships/{group_membership_id}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(groupMembershipsUpdateMembershipRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GroupMembershipsApi - functional programming interface
 * @export
 */
export const GroupMembershipsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GroupMembershipsApiAxiosParamCreator(configuration)
    return {
        /**
         * Creates a group membership. Only users with admin-level permissions will be able to use this API.
         * @summary Add user to group
         * @param {GroupMembershipsApiCreateMembershipRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createMembership(requestParameters: GroupMembershipsApiCreateMembershipRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GroupMembership>> {
            const groupMembershipsCreateMembershipRequest: GroupMembershipsCreateMembershipRequest = {
                user: requestParameters.user,
                group: requestParameters.group,
                role: requestParameters.role,
                configurable_permissions: requestParameters.configurable_permissions
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createMembership(requestParameters.fields, groupMembershipsCreateMembershipRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves all the groups for a user. Only members of this group or users with admin-level permissions will be able to use this API.
         * @summary List user\'s groups
         * @param {GroupMembershipsApiGetAllRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAll(requestParameters: GroupMembershipsApiGetAllRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GroupMemberships>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAll(requestParameters.userId, requestParameters.limit, requestParameters.offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a specific group membership. Only admins of this group or users with admin-level permissions will be able to use this API.
         * @summary Get group membership
         * @param {GroupMembershipsApiGetSpecificMembershipRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSpecificMembership(requestParameters: GroupMembershipsApiGetSpecificMembershipRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GroupMembership>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSpecificMembership(requestParameters.groupMembershipId, requestParameters.fields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves all the members for a group. Only members of this group or users with admin-level permissions will be able to use this API.
         * @summary List members of group
         * @param {GroupMembershipsApiListMembersOfGroupRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listMembersOfGroup(requestParameters: GroupMembershipsApiListMembersOfGroupRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GroupMemberships>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listMembersOfGroup(requestParameters.groupId, requestParameters.limit, requestParameters.offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Deletes a specific group membership. Only admins of this group or users with admin-level permissions will be able to use this API.
         * @summary Remove user from group
         * @param {GroupMembershipsApiRemoveUserFromGroupRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeUserFromGroup(requestParameters: GroupMembershipsApiRemoveUserFromGroupRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeUserFromGroup(requestParameters.groupMembershipId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates a user\'s group membership. Only admins of this group or users with admin-level permissions will be able to use this API.
         * @summary Update group membership
         * @param {GroupMembershipsApiUpdateMembershipRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateMembership(requestParameters: GroupMembershipsApiUpdateMembershipRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GroupMembership>> {
            const groupMembershipsUpdateMembershipRequest: GroupMembershipsUpdateMembershipRequest = {
                role: requestParameters.role,
                configurable_permissions: requestParameters.configurable_permissions
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateMembership(requestParameters.groupMembershipId, requestParameters.fields, groupMembershipsUpdateMembershipRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * GroupMembershipsApi - factory interface
 * @export
 */
export const GroupMembershipsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GroupMembershipsApiFp(configuration)
    return {
        /**
         * Creates a group membership. Only users with admin-level permissions will be able to use this API.
         * @summary Add user to group
         * @param {GroupMembershipsApiCreateMembershipRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMembership(requestParameters: GroupMembershipsApiCreateMembershipRequest, options?: AxiosRequestConfig): AxiosPromise<GroupMembership> {
            return localVarFp.createMembership(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves all the groups for a user. Only members of this group or users with admin-level permissions will be able to use this API.
         * @summary List user\'s groups
         * @param {GroupMembershipsApiGetAllRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAll(requestParameters: GroupMembershipsApiGetAllRequest, options?: AxiosRequestConfig): AxiosPromise<GroupMemberships> {
            return localVarFp.getAll(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a specific group membership. Only admins of this group or users with admin-level permissions will be able to use this API.
         * @summary Get group membership
         * @param {GroupMembershipsApiGetSpecificMembershipRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpecificMembership(requestParameters: GroupMembershipsApiGetSpecificMembershipRequest, options?: AxiosRequestConfig): AxiosPromise<GroupMembership> {
            return localVarFp.getSpecificMembership(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves all the members for a group. Only members of this group or users with admin-level permissions will be able to use this API.
         * @summary List members of group
         * @param {GroupMembershipsApiListMembersOfGroupRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMembersOfGroup(requestParameters: GroupMembershipsApiListMembersOfGroupRequest, options?: AxiosRequestConfig): AxiosPromise<GroupMemberships> {
            return localVarFp.listMembersOfGroup(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes a specific group membership. Only admins of this group or users with admin-level permissions will be able to use this API.
         * @summary Remove user from group
         * @param {GroupMembershipsApiRemoveUserFromGroupRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeUserFromGroup(requestParameters: GroupMembershipsApiRemoveUserFromGroupRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.removeUserFromGroup(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates a user\'s group membership. Only admins of this group or users with admin-level permissions will be able to use this API.
         * @summary Update group membership
         * @param {GroupMembershipsApiUpdateMembershipRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMembership(requestParameters: GroupMembershipsApiUpdateMembershipRequest, options?: AxiosRequestConfig): AxiosPromise<GroupMembership> {
            return localVarFp.updateMembership(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createMembership operation in GroupMembershipsApi.
 * @export
 * @interface GroupMembershipsApiCreateMembershipRequest
 */
export type GroupMembershipsApiCreateMembershipRequest = {
    
    /**
    * A comma-separated list of attributes to include in the response. This can be used to request fields that are not normally returned in a standard response.  Be aware that specifying this parameter will have the effect that none of the standard fields are returned in the response unless explicitly specified, instead only fields for the mini representation are returned, additional to the fields requested.
    * @type {Array<string>}
    * @memberof GroupMembershipsApiCreateMembership
    */
    readonly fields?: Array<string>
    
} & GroupMembershipsCreateMembershipRequest

/**
 * Request parameters for getAll operation in GroupMembershipsApi.
 * @export
 * @interface GroupMembershipsApiGetAllRequest
 */
export type GroupMembershipsApiGetAllRequest = {
    
    /**
    * The ID of the user.
    * @type {string}
    * @memberof GroupMembershipsApiGetAll
    */
    readonly userId: string
    
    /**
    * The maximum number of items to return per page.
    * @type {number}
    * @memberof GroupMembershipsApiGetAll
    */
    readonly limit?: number
    
    /**
    * The offset of the item at which to begin the response.  Queries with offset parameter value exceeding 10000 will be rejected with a 400 response.
    * @type {number}
    * @memberof GroupMembershipsApiGetAll
    */
    readonly offset?: number
    
}

/**
 * Request parameters for getSpecificMembership operation in GroupMembershipsApi.
 * @export
 * @interface GroupMembershipsApiGetSpecificMembershipRequest
 */
export type GroupMembershipsApiGetSpecificMembershipRequest = {
    
    /**
    * The ID of the group membership.
    * @type {string}
    * @memberof GroupMembershipsApiGetSpecificMembership
    */
    readonly groupMembershipId: string
    
    /**
    * A comma-separated list of attributes to include in the response. This can be used to request fields that are not normally returned in a standard response.  Be aware that specifying this parameter will have the effect that none of the standard fields are returned in the response unless explicitly specified, instead only fields for the mini representation are returned, additional to the fields requested.
    * @type {Array<string>}
    * @memberof GroupMembershipsApiGetSpecificMembership
    */
    readonly fields?: Array<string>
    
}

/**
 * Request parameters for listMembersOfGroup operation in GroupMembershipsApi.
 * @export
 * @interface GroupMembershipsApiListMembersOfGroupRequest
 */
export type GroupMembershipsApiListMembersOfGroupRequest = {
    
    /**
    * The ID of the group.
    * @type {string}
    * @memberof GroupMembershipsApiListMembersOfGroup
    */
    readonly groupId: string
    
    /**
    * The maximum number of items to return per page.
    * @type {number}
    * @memberof GroupMembershipsApiListMembersOfGroup
    */
    readonly limit?: number
    
    /**
    * The offset of the item at which to begin the response.  Queries with offset parameter value exceeding 10000 will be rejected with a 400 response.
    * @type {number}
    * @memberof GroupMembershipsApiListMembersOfGroup
    */
    readonly offset?: number
    
}

/**
 * Request parameters for removeUserFromGroup operation in GroupMembershipsApi.
 * @export
 * @interface GroupMembershipsApiRemoveUserFromGroupRequest
 */
export type GroupMembershipsApiRemoveUserFromGroupRequest = {
    
    /**
    * The ID of the group membership.
    * @type {string}
    * @memberof GroupMembershipsApiRemoveUserFromGroup
    */
    readonly groupMembershipId: string
    
}

/**
 * Request parameters for updateMembership operation in GroupMembershipsApi.
 * @export
 * @interface GroupMembershipsApiUpdateMembershipRequest
 */
export type GroupMembershipsApiUpdateMembershipRequest = {
    
    /**
    * The ID of the group membership.
    * @type {string}
    * @memberof GroupMembershipsApiUpdateMembership
    */
    readonly groupMembershipId: string
    
    /**
    * A comma-separated list of attributes to include in the response. This can be used to request fields that are not normally returned in a standard response.  Be aware that specifying this parameter will have the effect that none of the standard fields are returned in the response unless explicitly specified, instead only fields for the mini representation are returned, additional to the fields requested.
    * @type {Array<string>}
    * @memberof GroupMembershipsApiUpdateMembership
    */
    readonly fields?: Array<string>
    
} & GroupMembershipsUpdateMembershipRequest

/**
 * GroupMembershipsApiGenerated - object-oriented interface
 * @export
 * @class GroupMembershipsApiGenerated
 * @extends {BaseAPI}
 */
export class GroupMembershipsApiGenerated extends BaseAPI {
    /**
     * Creates a group membership. Only users with admin-level permissions will be able to use this API.
     * @summary Add user to group
     * @param {GroupMembershipsApiCreateMembershipRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupMembershipsApiGenerated
     */
    public createMembership(requestParameters: GroupMembershipsApiCreateMembershipRequest, options?: AxiosRequestConfig) {
        return GroupMembershipsApiFp(this.configuration).createMembership(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves all the groups for a user. Only members of this group or users with admin-level permissions will be able to use this API.
     * @summary List user\'s groups
     * @param {GroupMembershipsApiGetAllRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupMembershipsApiGenerated
     */
    public getAll(requestParameters: GroupMembershipsApiGetAllRequest, options?: AxiosRequestConfig) {
        return GroupMembershipsApiFp(this.configuration).getAll(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a specific group membership. Only admins of this group or users with admin-level permissions will be able to use this API.
     * @summary Get group membership
     * @param {GroupMembershipsApiGetSpecificMembershipRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupMembershipsApiGenerated
     */
    public getSpecificMembership(requestParameters: GroupMembershipsApiGetSpecificMembershipRequest, options?: AxiosRequestConfig) {
        return GroupMembershipsApiFp(this.configuration).getSpecificMembership(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves all the members for a group. Only members of this group or users with admin-level permissions will be able to use this API.
     * @summary List members of group
     * @param {GroupMembershipsApiListMembersOfGroupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupMembershipsApiGenerated
     */
    public listMembersOfGroup(requestParameters: GroupMembershipsApiListMembersOfGroupRequest, options?: AxiosRequestConfig) {
        return GroupMembershipsApiFp(this.configuration).listMembersOfGroup(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes a specific group membership. Only admins of this group or users with admin-level permissions will be able to use this API.
     * @summary Remove user from group
     * @param {GroupMembershipsApiRemoveUserFromGroupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupMembershipsApiGenerated
     */
    public removeUserFromGroup(requestParameters: GroupMembershipsApiRemoveUserFromGroupRequest, options?: AxiosRequestConfig) {
        return GroupMembershipsApiFp(this.configuration).removeUserFromGroup(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates a user\'s group membership. Only admins of this group or users with admin-level permissions will be able to use this API.
     * @summary Update group membership
     * @param {GroupMembershipsApiUpdateMembershipRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupMembershipsApiGenerated
     */
    public updateMembership(requestParameters: GroupMembershipsApiUpdateMembershipRequest, options?: AxiosRequestConfig) {
        return GroupMembershipsApiFp(this.configuration).updateMembership(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
