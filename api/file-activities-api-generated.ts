/* tslint:disable */
/* eslint-disable */
/*
Box Platform API

[Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.

The version of the OpenAPI document: 2.0.0
Contact: devrel@box.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Activities } from '../models';
// @ts-ignore
import { ClientError } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * FileActivitiesApi - axios parameter creator
 * @export
 */
export const FileActivitiesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * List file activities by file ID.
         * @summary List file activities
         * @param {string} fileId File ID for which to retrieve activity
         * @param {Array<'annotation' | 'app_activity' | 'comment' | 'task' | 'versions'>} [activityTypes] Comma-separated list of activity types to return. This field is ignored if marker is passed in. Defaults to all activity types.
         * @param {Array<string>} [commentFields] fields that are required for comments
         * @param {Array<string>} [versionsFields] fields that are required for versions
         * @param {Array<string>} [annotationFields] fields that are required for annotations
         * @param {Array<string>} [taskFields] fields that are required for tasks
         * @param {Array<string>} [appActivityFields] fields that are required for &#x60;app_activity&#x60;
         * @param {string} [replyLimit] maximum number of replies the response should contain per each top level activity[annotation, comment]
         * @param {'open' | 'resolved' | 'deleted'} [status] Used to filter an annotation or a comment based on the status
         * @param {boolean} [enableReplies] Whether or not replies should be returned
         * @param {number} [limit] The maximum number of items to return per page.
         * @param {string} [marker] Defines the position marker at which to begin returning results. This is used when paginating using marker-based pagination.  This requires &#x60;usemarker&#x60; to be set to &#x60;true&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listByFileId: async (fileId: string, activityTypes?: Array<'annotation' | 'app_activity' | 'comment' | 'task' | 'versions'>, commentFields?: Array<string>, versionsFields?: Array<string>, annotationFields?: Array<string>, taskFields?: Array<string>, appActivityFields?: Array<string>, replyLimit?: string, status?: 'open' | 'resolved' | 'deleted', enableReplies?: boolean, limit?: number, marker?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fileId' is not null or undefined
            assertParamExists('listByFileId', 'fileId', fileId)
            const localVarPath = `/file_activities`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2Security required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Security", [], configuration)
            if (fileId !== undefined) {
                localVarQueryParameter['file_id'] = fileId;
            }

            if (activityTypes) {
                localVarQueryParameter['activity_types'] = activityTypes;
            }

            if (commentFields) {
                localVarQueryParameter['comment_fields'] = commentFields;
            }

            if (versionsFields) {
                localVarQueryParameter['versions_fields'] = versionsFields;
            }

            if (annotationFields) {
                localVarQueryParameter['annotation_fields'] = annotationFields;
            }

            if (taskFields) {
                localVarQueryParameter['task_fields'] = taskFields;
            }

            if (appActivityFields) {
                localVarQueryParameter['app_activity_fields'] = appActivityFields;
            }

            if (replyLimit !== undefined) {
                localVarQueryParameter['reply_limit'] = replyLimit;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (enableReplies !== undefined) {
                localVarQueryParameter['enable_replies'] = enableReplies;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (marker !== undefined) {
                localVarQueryParameter['marker'] = marker;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/file_activities',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FileActivitiesApi - functional programming interface
 * @export
 */
export const FileActivitiesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FileActivitiesApiAxiosParamCreator(configuration)
    return {
        /**
         * List file activities by file ID.
         * @summary List file activities
         * @param {FileActivitiesApiListByFileIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listByFileId(requestParameters: FileActivitiesApiListByFileIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Activities>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listByFileId(requestParameters.fileId, requestParameters.activityTypes, requestParameters.commentFields, requestParameters.versionsFields, requestParameters.annotationFields, requestParameters.taskFields, requestParameters.appActivityFields, requestParameters.replyLimit, requestParameters.status, requestParameters.enableReplies, requestParameters.limit, requestParameters.marker, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * FileActivitiesApi - factory interface
 * @export
 */
export const FileActivitiesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FileActivitiesApiFp(configuration)
    return {
        /**
         * List file activities by file ID.
         * @summary List file activities
         * @param {FileActivitiesApiListByFileIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listByFileId(requestParameters: FileActivitiesApiListByFileIdRequest, options?: AxiosRequestConfig): AxiosPromise<Activities> {
            return localVarFp.listByFileId(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for listByFileId operation in FileActivitiesApi.
 * @export
 * @interface FileActivitiesApiListByFileIdRequest
 */
export type FileActivitiesApiListByFileIdRequest = {
    
    /**
    * File ID for which to retrieve activity
    * @type {string}
    * @memberof FileActivitiesApiListByFileId
    */
    readonly fileId: string
    
    /**
    * Comma-separated list of activity types to return. This field is ignored if marker is passed in. Defaults to all activity types.
    * @type {Array<'annotation' | 'app_activity' | 'comment' | 'task' | 'versions'>}
    * @memberof FileActivitiesApiListByFileId
    */
    readonly activityTypes?: Array<'annotation' | 'app_activity' | 'comment' | 'task' | 'versions'>
    
    /**
    * fields that are required for comments
    * @type {Array<string>}
    * @memberof FileActivitiesApiListByFileId
    */
    readonly commentFields?: Array<string>
    
    /**
    * fields that are required for versions
    * @type {Array<string>}
    * @memberof FileActivitiesApiListByFileId
    */
    readonly versionsFields?: Array<string>
    
    /**
    * fields that are required for annotations
    * @type {Array<string>}
    * @memberof FileActivitiesApiListByFileId
    */
    readonly annotationFields?: Array<string>
    
    /**
    * fields that are required for tasks
    * @type {Array<string>}
    * @memberof FileActivitiesApiListByFileId
    */
    readonly taskFields?: Array<string>
    
    /**
    * fields that are required for `app_activity`
    * @type {Array<string>}
    * @memberof FileActivitiesApiListByFileId
    */
    readonly appActivityFields?: Array<string>
    
    /**
    * maximum number of replies the response should contain per each top level activity[annotation, comment]
    * @type {string}
    * @memberof FileActivitiesApiListByFileId
    */
    readonly replyLimit?: string
    
    /**
    * Used to filter an annotation or a comment based on the status
    * @type {'open' | 'resolved' | 'deleted'}
    * @memberof FileActivitiesApiListByFileId
    */
    readonly status?: 'open' | 'resolved' | 'deleted'
    
    /**
    * Whether or not replies should be returned
    * @type {boolean}
    * @memberof FileActivitiesApiListByFileId
    */
    readonly enableReplies?: boolean
    
    /**
    * The maximum number of items to return per page.
    * @type {number}
    * @memberof FileActivitiesApiListByFileId
    */
    readonly limit?: number
    
    /**
    * Defines the position marker at which to begin returning results. This is used when paginating using marker-based pagination.  This requires `usemarker` to be set to `true`.
    * @type {string}
    * @memberof FileActivitiesApiListByFileId
    */
    readonly marker?: string
    
}

/**
 * FileActivitiesApiGenerated - object-oriented interface
 * @export
 * @class FileActivitiesApiGenerated
 * @extends {BaseAPI}
 */
export class FileActivitiesApiGenerated extends BaseAPI {
    /**
     * List file activities by file ID.
     * @summary List file activities
     * @param {FileActivitiesApiListByFileIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileActivitiesApiGenerated
     */
    public listByFileId(requestParameters: FileActivitiesApiListByFileIdRequest, options?: AxiosRequestConfig) {
        return FileActivitiesApiFp(this.configuration).listByFileId(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
