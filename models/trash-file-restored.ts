/*
Box Platform API

[Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.

The version of the OpenAPI document: 2.0.0
Contact: devrel@box.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/
import type * as buffer from "buffer"

import { TrashFileCreatedBy } from './trash-file-created-by';
import { TrashFileFileVersion } from './trash-file-file-version';
import { TrashFileModifiedBy } from './trash-file-modified-by';
import { TrashFileOwnedBy } from './trash-file-owned-by';
import { TrashFileParent } from './trash-file-parent';
import { TrashFileRestoredPathCollection } from './trash-file-restored-path-collection';

/**
 * Represents a file restored from the trash.
 * @export
 * @interface TrashFileRestored
 */
export interface TrashFileRestored {
    /**
     * The optional description of this file
     * @type {string}
     * @memberof TrashFileRestored
     */
    'description': string;
    /**
     * The unique identifier that represent a file.  The ID for any file can be determined by visiting a file in the web application and copying the ID from the URL. For example, for the URL `https://_*.app.box.com/files/123` the `file_id` is `123`.
     * @type {string}
     * @memberof TrashFileRestored
     */
    'id': string;
    /**
     * The HTTP `etag` of this file. This can be used within some API endpoints in the `If-Match` and `If-None-Match` headers to only perform changes on the file if (no) changes have happened.
     * @type {string}
     * @memberof TrashFileRestored
     */
    'etag'?: string | null;
    /**
     * `file`
     * @type {string}
     * @memberof TrashFileRestored
     */
    'type': TrashFileRestoredTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof TrashFileRestored
     */
    'sequence_id': string;
    /**
     * The name of the file
     * @type {string}
     * @memberof TrashFileRestored
     */
    'name'?: string;
    /**
     * The SHA1 hash of the file. This can be used to compare the contents of a file on Box with a local file.
     * @type {string}
     * @memberof TrashFileRestored
     */
    'sha1': string;
    /**
     * 
     * @type {TrashFileFileVersion}
     * @memberof TrashFileRestored
     */
    'file_version'?: TrashFileFileVersion;
    /**
     * The file size in bytes. Be careful parsing this integer as it can get very large and cause an integer overflow.
     * @type {number}
     * @memberof TrashFileRestored
     */
    'size': number;
    /**
     * 
     * @type {TrashFileRestoredPathCollection}
     * @memberof TrashFileRestored
     */
    'path_collection': TrashFileRestoredPathCollection;
    /**
     * The date and time when the file was created on Box.
     * @type {string}
     * @memberof TrashFileRestored
     */
    'created_at': string;
    /**
     * The date and time when the file was last updated on Box.
     * @type {string}
     * @memberof TrashFileRestored
     */
    'modified_at': string;
    /**
     * The time at which this file was put in the trash - becomes `null` after restore.
     * @type {string}
     * @memberof TrashFileRestored
     */
    'trashed_at'?: string | null;
    /**
     * The time at which this file is expected to be purged from the trash  - becomes `null` after restore.
     * @type {string}
     * @memberof TrashFileRestored
     */
    'purged_at'?: string | null;
    /**
     * The date and time at which this file was originally created, which might be before it was uploaded to Box.
     * @type {string}
     * @memberof TrashFileRestored
     */
    'content_created_at'?: string | null;
    /**
     * The date and time at which this file was last updated, which might be before it was uploaded to Box.
     * @type {string}
     * @memberof TrashFileRestored
     */
    'content_modified_at'?: string | null;
    /**
     * 
     * @type {TrashFileCreatedBy}
     * @memberof TrashFileRestored
     */
    'created_by'?: TrashFileCreatedBy;
    /**
     * 
     * @type {TrashFileModifiedBy}
     * @memberof TrashFileRestored
     */
    'modified_by': TrashFileModifiedBy;
    /**
     * 
     * @type {TrashFileOwnedBy}
     * @memberof TrashFileRestored
     */
    'owned_by': TrashFileOwnedBy;
    /**
     * The shared link for this file. This will be `null` if a file had been trashed, even though the original shared link does become active again.
     * @type {string}
     * @memberof TrashFileRestored
     */
    'shared_link'?: string | null;
    /**
     * 
     * @type {TrashFileParent}
     * @memberof TrashFileRestored
     */
    'parent'?: TrashFileParent;
    /**
     * Defines if this item has been deleted or not.  * `active` when the item has is not in the trash * `trashed` when the item has been moved to the trash but not deleted * `deleted` when the item has been permanently deleted.
     * @type {string}
     * @memberof TrashFileRestored
     */
    'item_status': TrashFileRestoredItemStatusEnum;
}

type TrashFileRestoredTypeEnum = 'file'
type TrashFileRestoredItemStatusEnum = 'active' | 'trashed' | 'deleted'


