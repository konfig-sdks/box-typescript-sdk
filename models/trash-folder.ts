/*
Box Platform API

[Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.

The version of the OpenAPI document: 2.0.0
Contact: devrel@box.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/
import type * as buffer from "buffer"

import { TrashFolderCreatedBy } from './trash-folder-created-by';
import { TrashFolderModifiedBy } from './trash-folder-modified-by';
import { TrashFolderOwnedBy } from './trash-folder-owned-by';
import { TrashFolderParent } from './trash-folder-parent';
import { TrashFolderPathCollection } from './trash-folder-path-collection';

/**
 * Represents a trashed folder.
 * @export
 * @interface TrashFolder
 */
export interface TrashFolder {
    /**
     * 
     * @type {string}
     * @memberof TrashFolder
     */
    'description': string;
    /**
     * The unique identifier that represent a folder.  The ID for any folder can be determined by visiting a folder in the web application and copying the ID from the URL. For example, for the URL `https://_*.app.box.com/folders/123` the `folder_id` is `123`.
     * @type {string}
     * @memberof TrashFolder
     */
    'id': string;
    /**
     * The HTTP `etag` of this folder. This can be used within some API endpoints in the `If-Match` and `If-None-Match` headers to only perform changes on the folder if (no) changes have happened.
     * @type {string}
     * @memberof TrashFolder
     */
    'etag'?: string | null;
    /**
     * `folder`
     * @type {string}
     * @memberof TrashFolder
     */
    'type': TrashFolderTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof TrashFolder
     */
    'sequence_id'?: string;
    /**
     * The name of the folder.
     * @type {string}
     * @memberof TrashFolder
     */
    'name': string;
    /**
     * The date and time when the folder was created. This value may be `null` for some folders such as the root folder or the trash folder.
     * @type {string}
     * @memberof TrashFolder
     */
    'created_at'?: string | null;
    /**
     * The date and time when the folder was last updated. This value may be `null` for some folders such as the root folder or the trash folder.
     * @type {string}
     * @memberof TrashFolder
     */
    'modified_at'?: string | null;
    /**
     * The folder size in bytes.  Be careful parsing this integer as its value can get very large.
     * @type {number}
     * @memberof TrashFolder
     */
    'size': number;
    /**
     * 
     * @type {TrashFolderPathCollection}
     * @memberof TrashFolder
     */
    'path_collection': TrashFolderPathCollection;
    /**
     * 
     * @type {TrashFolderCreatedBy}
     * @memberof TrashFolder
     */
    'created_by': TrashFolderCreatedBy;
    /**
     * 
     * @type {TrashFolderModifiedBy}
     * @memberof TrashFolder
     */
    'modified_by': TrashFolderModifiedBy;
    /**
     * The time at which this folder was put in the trash.
     * @type {string}
     * @memberof TrashFolder
     */
    'trashed_at'?: string | null;
    /**
     * The time at which this folder is expected to be purged from the trash.
     * @type {string}
     * @memberof TrashFolder
     */
    'purged_at'?: string | null;
    /**
     * The date and time at which this folder was originally created.
     * @type {string}
     * @memberof TrashFolder
     */
    'content_created_at'?: string | null;
    /**
     * The date and time at which this folder was last updated.
     * @type {string}
     * @memberof TrashFolder
     */
    'content_modified_at'?: string | null;
    /**
     * 
     * @type {TrashFolderOwnedBy}
     * @memberof TrashFolder
     */
    'owned_by': TrashFolderOwnedBy;
    /**
     * The shared link for this folder. This will be `null` if a folder has been trashed, since the link will no longer be active.
     * @type {string}
     * @memberof TrashFolder
     */
    'shared_link'?: string | null;
    /**
     * The folder upload email for this folder. This will be `null` if a folder has been trashed, since the upload will no longer work.
     * @type {string}
     * @memberof TrashFolder
     */
    'folder_upload_email'?: string | null;
    /**
     * 
     * @type {TrashFolderParent}
     * @memberof TrashFolder
     */
    'parent'?: TrashFolderParent;
    /**
     * Defines if this item has been deleted or not.  * `active` when the item has is not in the trash * `trashed` when the item has been moved to the trash but not deleted * `deleted` when the item has been permanently deleted.
     * @type {string}
     * @memberof TrashFolder
     */
    'item_status': TrashFolderItemStatusEnum;
}

type TrashFolderTypeEnum = 'folder'
type TrashFolderItemStatusEnum = 'active' | 'trashed' | 'deleted'


