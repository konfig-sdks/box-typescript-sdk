/*
Box Platform API

[Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.

The version of the OpenAPI document: 2.0.0
Contact: devrel@box.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/
import type * as buffer from "buffer"

import { RetentionPolicyAllOfAssignmentCounts } from './retention-policy-all-of-assignment-counts';
import { UserMini } from './user-mini';

/**
 * 
 * @export
 * @interface RetentionPolicyAllOf
 */
export interface RetentionPolicyAllOf {
    /**
     * The additional text description of the retention policy.
     * @type {string}
     * @memberof RetentionPolicyAllOf
     */
    'description'?: string;
    /**
     * The type of the retention policy. A retention policy type can either be `finite`, where a specific amount of time to retain the content is known upfront, or `indefinite`, where the amount of time to retain the content is still unknown.
     * @type {string}
     * @memberof RetentionPolicyAllOf
     */
    'policy_type'?: RetentionPolicyAllOfPolicyTypeEnum;
    /**
     * Specifies the retention type:  * `modifiable`: You can modify the retention policy. For example,  you can add or remove folders, shorten or lengthen  the policy duration, or delete the assignment.  Use this type if your retention policy  is not related to any regulatory purposes.  * `non-modifiable`: You can modify the retention policy  only in a limited way: add a folder, lengthen the duration,  retire the policy, change the disposition action  or notification settings. You cannot perform other actions,  such as deleting the assignment or shortening the  policy duration. Use this type to ensure  compliance with regulatory retention policies.
     * @type {string}
     * @memberof RetentionPolicyAllOf
     */
    'retention_type'?: RetentionPolicyAllOfRetentionTypeEnum;
    /**
     * The status of the retention policy. The status of a policy will be `active`, unless explicitly retired by an administrator, in which case the status will be `retired`. Once a policy has been retired, it cannot become active again.
     * @type {string}
     * @memberof RetentionPolicyAllOf
     */
    'status'?: RetentionPolicyAllOfStatusEnum;
    /**
     * 
     * @type {UserMini}
     * @memberof RetentionPolicyAllOf
     */
    'created_by'?: UserMini;
    /**
     * When the retention policy object was created.
     * @type {string}
     * @memberof RetentionPolicyAllOf
     */
    'created_at'?: string;
    /**
     * When the retention policy object was last modified.
     * @type {string}
     * @memberof RetentionPolicyAllOf
     */
    'modified_at'?: string;
    /**
     * Determines if the owner of items under the policy can extend the retention when the original retention duration is about to end.
     * @type {boolean}
     * @memberof RetentionPolicyAllOf
     */
    'can_owner_extend_retention'?: boolean;
    /**
     * Determines if owners and co-owners of items under the policy are notified when the retention duration is about to end.
     * @type {boolean}
     * @memberof RetentionPolicyAllOf
     */
    'are_owners_notified'?: boolean;
    /**
     * A list of users notified when the retention policy duration is about to end.
     * @type {Array<UserMini>}
     * @memberof RetentionPolicyAllOf
     */
    'custom_notification_recipients'?: Array<UserMini>;
    /**
     * 
     * @type {RetentionPolicyAllOfAssignmentCounts}
     * @memberof RetentionPolicyAllOf
     */
    'assignment_counts'?: RetentionPolicyAllOfAssignmentCounts;
}

type RetentionPolicyAllOfPolicyTypeEnum = 'finite' | 'indefinite'
type RetentionPolicyAllOfRetentionTypeEnum = 'modifiable' | 'non_modifiable'
type RetentionPolicyAllOfStatusEnum = 'active' | 'retired'


